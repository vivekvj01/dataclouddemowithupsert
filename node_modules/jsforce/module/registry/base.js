import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import "core-js/modules/es.array.iterator";
import "core-js/modules/es.promise";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; _forEachInstanceProperty(_context = ownKeys(Object(source), true)).call(_context, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
import Connection from '../connection';
/**
 *
 */
export class BaseRegistry {
  constructor() {
    _defineProperty(this, "_registryConfig", {});
  }
  _saveConfig() {
    throw new Error('_saveConfig must be implemented in subclass');
  }
  _getClients() {
    return this._registryConfig.clients || (this._registryConfig.clients = {});
  }
  _getConnections() {
    return this._registryConfig.connections || (this._registryConfig.connections = {});
  }
  async getConnectionNames() {
    return _Object$keys(this._getConnections());
  }
  async getConnection(name) {
    const config = await this.getConnectionConfig(name);
    return config ? new Connection(config) : null;
  }
  async getConnectionConfig(name) {
    if (!name) {
      name = this._registryConfig['default'];
    }
    const connections = this._getConnections();
    const connConfig = name ? connections[name] : undefined;
    if (!connConfig) {
      return null;
    }
    const {
        client
      } = connConfig,
      connConfig_ = _objectWithoutProperties(connConfig, ["client"]);
    if (client) {
      return _objectSpread(_objectSpread({}, connConfig_), {}, {
        oauth2: _objectSpread({}, await this.getClientConfig(client))
      });
    }
    return connConfig_;
  }
  async saveConnectionConfig(name, connConfig) {
    const connections = this._getConnections();
    const {
        oauth2
      } = connConfig,
      connConfig_ = _objectWithoutProperties(connConfig, ["oauth2"]);
    let persistConnConfig = connConfig_;
    if (oauth2) {
      const clientName = this._findClientName(oauth2);
      if (clientName) {
        persistConnConfig = _objectSpread(_objectSpread({}, persistConnConfig), {}, {
          client: clientName
        });
      }
      delete connConfig.oauth2;
    }
    connections[name] = persistConnConfig;
    this._saveConfig();
  }
  _findClientName({
    clientId,
    loginUrl
  }) {
    const clients = this._getClients();
    for (const name of _Object$keys(clients)) {
      const client = clients[name];
      if (client.clientId === clientId && (client.loginUrl || 'https://login.salesforce.com') === loginUrl) {
        return name;
      }
    }
    return null;
  }
  async setDefaultConnection(name) {
    this._registryConfig['default'] = name;
    this._saveConfig();
  }
  async removeConnectionConfig(name) {
    const connections = this._getConnections();
    delete connections[name];
    this._saveConfig();
  }
  async getClientConfig(name) {
    const clients = this._getClients();
    const clientConfig = clients[name];
    return clientConfig && _objectSpread({}, clientConfig);
  }
  async getClientNames() {
    return _Object$keys(this._getClients());
  }
  async registerClientConfig(name, clientConfig) {
    const clients = this._getClients();
    clients[name] = clientConfig;
    this._saveConfig();
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,