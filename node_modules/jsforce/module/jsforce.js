import "core-js/modules/es.array.iterator";
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import { EventEmitter } from 'events';
import VERSION from './VERSION';
import Connection from './connection';
import OAuth2 from './oauth2';
import SfDate from './date';
import registry from './registry';
import client, { BrowserClient } from './browser/client';
import { JwtOAuth2 } from './jwtOAuth2';

/**
 *
 */
class JSforce extends EventEmitter {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "VERSION", VERSION);
    _defineProperty(this, "Connection", Connection);
    _defineProperty(this, "OAuth2", OAuth2);
    _defineProperty(this, "JwtOAuth2", JwtOAuth2);
    _defineProperty(this, "SfDate", SfDate);
    _defineProperty(this, "Date", SfDate);
    _defineProperty(this, "BrowserClient", BrowserClient);
    _defineProperty(this, "registry", registry);
    _defineProperty(this, "browser", client);
  }
}
export function registerModule(name, factory) {
  jsforce.on('connection:new', conn => {
    let obj = undefined;
    _Object$defineProperty(conn, name, {
      get() {
        var _obj;
        obj = (_obj = obj) !== null && _obj !== void 0 ? _obj : factory(conn);
        return obj;
      },
      enumerable: true,
      configurable: true
    });
  });
}
const jsforce = new JSforce();
export default jsforce;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJWRVJTSU9OIiwiQ29ubmVjdGlvbiIsIk9BdXRoMiIsIlNmRGF0ZSIsInJlZ2lzdHJ5IiwiY2xpZW50IiwiQnJvd3NlckNsaWVudCIsIkp3dE9BdXRoMiIsIkpTZm9yY2UiLCJjb25zdHJ1Y3RvciIsImFyZ3MiLCJfZGVmaW5lUHJvcGVydHkiLCJyZWdpc3Rlck1vZHVsZSIsIm5hbWUiLCJmYWN0b3J5IiwianNmb3JjZSIsIm9uIiwiY29ubiIsIm9iaiIsInVuZGVmaW5lZCIsIl9PYmplY3QkZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJfb2JqIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSJdLCJzb3VyY2VzIjpbIi4uL3NyYy9qc2ZvcmNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgVkVSU0lPTiBmcm9tICcuL1ZFUlNJT04nO1xuaW1wb3J0IENvbm5lY3Rpb24gZnJvbSAnLi9jb25uZWN0aW9uJztcbmltcG9ydCBPQXV0aDIgZnJvbSAnLi9vYXV0aDInO1xuaW1wb3J0IFNmRGF0ZSBmcm9tICcuL2RhdGUnO1xuaW1wb3J0IHJlZ2lzdHJ5LCB7IFJlZ2lzdHJ5IH0gZnJvbSAnLi9yZWdpc3RyeSc7XG5pbXBvcnQgY2xpZW50LCB7IEJyb3dzZXJDbGllbnQgfSBmcm9tICcuL2Jyb3dzZXIvY2xpZW50JztcbmltcG9ydCB7IEp3dE9BdXRoMiB9IGZyb20gJy4vand0T0F1dGgyJztcblxuLyoqXG4gKlxuICovXG5jbGFzcyBKU2ZvcmNlIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgVkVSU0lPTjogdHlwZW9mIFZFUlNJT04gPSBWRVJTSU9OO1xuICBDb25uZWN0aW9uOiB0eXBlb2YgQ29ubmVjdGlvbiA9IENvbm5lY3Rpb247XG4gIE9BdXRoMjogdHlwZW9mIE9BdXRoMiA9IE9BdXRoMjtcbiAgSnd0T0F1dGgyOiB0eXBlb2YgSnd0T0F1dGgyID0gSnd0T0F1dGgyO1xuICBTZkRhdGU6IHR5cGVvZiBTZkRhdGUgPSBTZkRhdGU7XG4gIERhdGU6IHR5cGVvZiBTZkRhdGUgPSBTZkRhdGU7XG4gIEJyb3dzZXJDbGllbnQ6IHR5cGVvZiBCcm93c2VyQ2xpZW50ID0gQnJvd3NlckNsaWVudDtcbiAgcmVnaXN0cnk6IFJlZ2lzdHJ5ID0gcmVnaXN0cnk7XG4gIGJyb3dzZXI6IEJyb3dzZXJDbGllbnQgPSBjbGllbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlck1vZHVsZShcbiAgbmFtZTogc3RyaW5nLFxuICBmYWN0b3J5OiAoY29ubjogQ29ubmVjdGlvbikgPT4gYW55LFxuKSB7XG4gIGpzZm9yY2Uub24oJ2Nvbm5lY3Rpb246bmV3JywgKGNvbm46IENvbm5lY3Rpb24pID0+IHtcbiAgICBsZXQgb2JqOiBhbnkgPSB1bmRlZmluZWQ7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbm4sIG5hbWUsIHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgb2JqID0gb2JqID8/IGZhY3RvcnkoY29ubik7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgICB9LFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB9KTtcbiAgfSk7XG59XG5cbmNvbnN0IGpzZm9yY2UgPSBuZXcgSlNmb3JjZSgpO1xuZXhwb3J0IGRlZmF1bHQganNmb3JjZTtcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsU0FBU0EsWUFBWSxRQUFRLFFBQVE7QUFDckMsT0FBT0MsT0FBTyxNQUFNLFdBQVc7QUFDL0IsT0FBT0MsVUFBVSxNQUFNLGNBQWM7QUFDckMsT0FBT0MsTUFBTSxNQUFNLFVBQVU7QUFDN0IsT0FBT0MsTUFBTSxNQUFNLFFBQVE7QUFDM0IsT0FBT0MsUUFBUSxNQUFvQixZQUFZO0FBQy9DLE9BQU9DLE1BQU0sSUFBSUMsYUFBYSxRQUFRLGtCQUFrQjtBQUN4RCxTQUFTQyxTQUFTLFFBQVEsYUFBYTs7QUFFdkM7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsT0FBTyxTQUFTVCxZQUFZLENBQUM7RUFBQVUsWUFBQSxHQUFBQyxJQUFBO0lBQUEsU0FBQUEsSUFBQTtJQUFBQyxlQUFBLGtCQUNQWCxPQUFPO0lBQUFXLGVBQUEscUJBQ0RWLFVBQVU7SUFBQVUsZUFBQSxpQkFDbEJULE1BQU07SUFBQVMsZUFBQSxvQkFDQUosU0FBUztJQUFBSSxlQUFBLGlCQUNmUixNQUFNO0lBQUFRLGVBQUEsZUFDUlIsTUFBTTtJQUFBUSxlQUFBLHdCQUNVTCxhQUFhO0lBQUFLLGVBQUEsbUJBQzlCUCxRQUFRO0lBQUFPLGVBQUEsa0JBQ0pOLE1BQU07RUFBQTtBQUNqQztBQUVBLE9BQU8sU0FBU08sY0FBY0EsQ0FDNUJDLElBQVksRUFDWkMsT0FBa0MsRUFDbEM7RUFDQUMsT0FBTyxDQUFDQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUdDLElBQWdCLElBQUs7SUFDakQsSUFBSUMsR0FBUSxHQUFHQyxTQUFTO0lBQ3hCQyxzQkFBQSxDQUFzQkgsSUFBSSxFQUFFSixJQUFJLEVBQUU7TUFDaENRLEdBQUdBLENBQUEsRUFBRztRQUFBLElBQUFDLElBQUE7UUFDSkosR0FBRyxJQUFBSSxJQUFBLEdBQUdKLEdBQUcsY0FBQUksSUFBQSxjQUFBQSxJQUFBLEdBQUlSLE9BQU8sQ0FBQ0csSUFBSSxDQUFDO1FBQzFCLE9BQU9DLEdBQUc7TUFDWixDQUFDO01BQ0RLLFVBQVUsRUFBRSxJQUFJO01BQ2hCQyxZQUFZLEVBQUU7SUFDaEIsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0o7QUFFQSxNQUFNVCxPQUFPLEdBQUcsSUFBSVAsT0FBTyxDQUFDLENBQUM7QUFDN0IsZUFBZU8sT0FBTyJ9