import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import "core-js/modules/es.array.iterator";
import "core-js/modules/es.string.replace";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _reduceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reduce";
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source), true)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context4; _forEachInstanceProperty(_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * @file Represents stream that handles Salesforce record as stream data
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { Transform, PassThrough } from 'stream';
import { serializeCSVStream, parseCSVStream } from './csv';
import { concatStreamsAsDuplex } from './util/stream';

/**
 * type defs
 */

/**
 * @private
 */
function evalMapping(value, mapping) {
  if (typeof value === 'string') {
    const m = /^\$\{(\w+)\}$/.exec(value);
    if (m) {
      return mapping[m[1]];
    }
    return value.replace(/\$\{(\w+)\}/g, ($0, prop) => {
      const v = mapping[prop];
      return typeof v === 'undefined' || v === null ? '' : String(v);
    });
  }
  return value;
}

/**
 * @private
 */
function convertRecordForSerialization(record, options = {}) {
  var _context;
  return _reduceInstanceProperty(_context = _Object$keys(record)).call(_context, (rec, key) => {
    const value = rec[key];
    let urec;
    if (key === 'attributes') {
      // 'attributes' prop will be ignored
      urec = _objectSpread({}, rec);
      delete urec[key];
      return urec;
    } else if (options.nullValue && value === null) {
      return _objectSpread(_objectSpread({}, rec), {}, {
        [key]: options.nullValue
      });
    } else if (value !== null && typeof value === 'object') {
      var _context2;
      const precord = convertRecordForSerialization(value, options);
      return _reduceInstanceProperty(_context2 = _Object$keys(precord)).call(_context2, (prec, pkey) => {
        prec[`${key}.${pkey}`] = precord[pkey]; // eslint-disable-line no-param-reassign
        return prec;
      }, _objectSpread({}, rec));
    }
    return rec;
  }, record);
}

/**
 * @private
 */
function createPipelineStream(s1, s2) {
  s1.pipe(s2);
  return concatStreamsAsDuplex(s1, s2, {
    writableObjectMode: true
  });
}
/**
 * @private
 */
const CSVStreamConverter = {
  serialize(options = {}) {
    const {
        nullValue
      } = options,
      csvOpts = _objectWithoutProperties(options, ["nullValue"]);
    return createPipelineStream(
    // eslint-disable-next-line no-use-before-define
    _mapInstanceProperty(RecordStream).call(RecordStream, record => convertRecordForSerialization(record, options)), serializeCSVStream(csvOpts));
  },
  parse(options = {}) {
    return parseCSVStream(options);
  }
};

/**
 * @private
 */
const DataStreamConverters = {
  csv: CSVStreamConverter
};

/**
 * Class for Record Stream
 *
 * @class
 * @constructor
 * @extends stream.Transform
 */
export class RecordStream extends PassThrough {
  /**
   *
   */
  constructor() {
    super({
      objectMode: true
    });
    _defineProperty(this, "addListener", this.on);
  }

  /**
   * Get record stream of queried records applying the given mapping function
   */
  map(fn) {
    return this.pipe(_mapInstanceProperty(RecordStream).call(RecordStream, fn));
  }

  /**
   * Get record stream of queried records, applying the given filter function
   */
  filter(fn) {
    return this.pipe(_filterInstanceProperty(RecordStream).call(RecordStream, fn));
  }

  /* @override */
  on(ev, fn) {
    return super.on(ev === 'record' ? 'data' : ev, fn);
  }

  /* @override */

  /* --------------------------------------------------- */
  /**
   * Create a record stream which maps records and pass them to downstream
   */
  static map(fn) {
    const mapStream = new Transform({
      objectMode: true,
      transform(record, enc, callback) {
        const rec = fn(record) || record; // if not returned record, use same record
        mapStream.push(rec);
        callback();
      }
    });
    return mapStream;
  }

  /**
   * Create mapping stream using given record template
   */
  static recordMapStream(record, noeval) {
    return _mapInstanceProperty(RecordStream).call(RecordStream, rec => {
      const mapped = {
        Id: rec.Id
      };
      for (const prop of _Object$keys(record)) {
        mapped[prop] = noeval ? record[prop] : evalMapping(record[prop], rec);
      }
      return mapped;
    });
  }

  /**
   * Create a record stream which filters records and pass them to downstream
   *
   * @param {RecordFilterFunction} fn - Record filtering function
   * @returns {RecordStream.Serializable}
   */
  static filter(fn) {
    const filterStream = new Transform({
      objectMode: true,
      transform(record, enc, callback) {
        if (fn(record)) {
          filterStream.push(record);
        }
        callback();
      }
    });
    return filterStream;
  }
}

/**
 * @class RecordStream.Serializable
 * @extends {RecordStream}
 */
export class Serializable extends RecordStream {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "_dataStreams", {});
  }
  /**
   * Get readable data stream which emits serialized record data
   */
  stream(type = 'csv', options = {}) {
    if (this._dataStreams[type]) {
      return this._dataStreams[type];
    }
    const converter = DataStreamConverters[type];
    if (!converter) {
      throw new Error(`Converting [${type}] data stream is not supported.`);
    }
    const dataStream = new PassThrough();
    this.pipe(converter.serialize(options)).pipe(dataStream);
    this._dataStreams[type] = dataStream;
    return dataStream;
  }
}

/**
 * @class RecordStream.Parsable
 * @extends {RecordStream}
 */
export class Parsable extends RecordStream {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "_dataStreams", {});
    _defineProperty(this, "_execParse", false);
    _defineProperty(this, "_incomings", []);
    _defineProperty(this, "addListener", this.on);
  }
  /**
   * Get writable data stream which accepts serialized record data
   */
  stream(type = 'csv', options = {}) {
    if (this._dataStreams[type]) {
      return this._dataStreams[type];
    }
    const converter = DataStreamConverters[type];
    if (!converter) {
      throw new Error(`Converting [${type}] data stream is not supported.`);
    }
    const dataStream = new PassThrough();
    const parserStream = converter.parse(options);
    parserStream.on('error', err => this.emit('error', err));
    parserStream.pipe(this).pipe(new PassThrough({
      objectMode: true,
      highWaterMark: 500 * 1000
    }));
    if (this._execParse) {
      dataStream.pipe(parserStream);
    } else {
      this._incomings.push([dataStream, parserStream]);
    }
    this._dataStreams[type] = dataStream;
    return dataStream;
  }

  /* @override */
  on(ev, fn) {
    if (ev === 'readable' || ev === 'record') {
      if (!this._execParse) {
        this._execParse = true;
        for (const [dataStream, parserStream] of this._incomings) {
          dataStream.pipe(parserStream);
        }
      }
    }
    return super.on(ev, fn);
  }

  /* @override */
}

export default RecordStream;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,