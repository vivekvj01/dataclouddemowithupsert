import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import "core-js/modules/es.array.iterator";
import "core-js/modules/es.promise";
import _reduceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reduce";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _trimInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/trim";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _keysInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/keys";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source), true)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context4; _forEachInstanceProperty(_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
import { createHttpRequestHandlerStreams, executeWithTimeout, isRedirect, performRedirectRequest } from '../request-helper';
import { readAll } from '../util/stream';
/**
 * As the request streming is not yet supported on major browsers,
 * it is set to false for now.
 */
const supportsReadableStream = false;

/*
(async () => {
  try {
    if (
      typeof fetch === 'function' &&
      typeof Request === 'function' &&
      typeof ReadableStream === 'function'
    ) {
      // this feature detection requires dummy POST request
      const req = new Request('data:text/plain,', {
        method: 'POST',
        body: new ReadableStream(),
      });
      // if it has content-type header it doesn't regard body as stream
      if (req.headers.has('Content-Type')) {
        return false;
      }
      await (await fetch(req)).text();
      return true;
    }
  } catch (e) {
    // error might occur in env with CSP without connect-src data:
    return false;
  }
  return false;
})();
*/

/**
 *
 */
function toWhatwgReadableStream(ins) {
  return new ReadableStream({
    start(controller) {
      ins.on('data', chunk => controller.enqueue(chunk));
      ins.on('end', () => controller.close());
    }
  });
}

/**
 *
 */
async function readWhatwgReadableStream(rs, outs) {
  const reader = rs.getReader();
  async function readAndWrite() {
    const {
      done,
      value
    } = await reader.read();
    if (done) {
      outs.end();
      return false;
    }
    outs.write(value);
    return true;
  }
  while (await readAndWrite());
}

/**
 *
 */
async function startFetchRequest(request, options, input, output, emitter, counter = 0) {
  const {
    followRedirect
  } = options;
  const {
      url,
      body: reqBody
    } = request,
    rreq = _objectWithoutProperties(request, ["url", "body"]);
  const body = input && /^(post|put|patch)$/i.test(request.method) ? supportsReadableStream ? toWhatwgReadableStream(input) : await readAll(input) : undefined;
  const controller = typeof AbortController !== 'undefined' ? new AbortController() : undefined;
  const res = await executeWithTimeout(() => fetch(url, _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, rreq), body ? {
    body
  } : {}), {}, {
    redirect: 'manual'
  }, controller ? {
    signal: controller.signal
  } : {}), {
    allowHTTP1ForStreamingUpload: true
  })), options.timeout, () => controller === null || controller === void 0 ? void 0 : controller.abort());
  const headers = {};
  for (const headerName of _keysInstanceProperty(_context = res.headers).call(_context)) {
    var _context;
    headers[headerName.toLowerCase()] = res.headers.get(headerName);
  }
  const response = {
    statusCode: res.status,
    headers
  };
  if (followRedirect && isRedirect(response.statusCode)) {
    try {
      performRedirectRequest(request, response, followRedirect, counter, req => startFetchRequest(req, options, undefined, output, emitter, counter + 1));
    } catch (err) {
      emitter.emit('error', err);
    }
    return;
  }
  emitter.emit('response', response);
  if (res.body) {
    readWhatwgReadableStream(res.body, output);
  } else {
    output.end();
  }
}

/**
 *
 */
function getResponseHeaderNames(xhr) {
  var _context2;
  const headerLines = _filterInstanceProperty(_context2 = (xhr.getAllResponseHeaders() || '').split(/[\r\n]+/)).call(_context2, l => _trimInstanceProperty(l).call(l) !== '');
  return _mapInstanceProperty(headerLines).call(headerLines, headerLine => headerLine.split(/\s*:/)[0].toLowerCase());
}

/**
 *
 */
async function startXmlHttpRequest(request, options, input, output, emitter, counter = 0) {
  const {
    method,
    url,
    headers: reqHeaders
  } = request;
  const {
    followRedirect
  } = options;
  const reqBody = input && /^(post|put|patch)$/i.test(method) ? await readAll(input) : null;
  const xhr = new XMLHttpRequest();
  await executeWithTimeout(() => {
    xhr.open(method, url);
    if (reqHeaders) {
      for (const header in reqHeaders) {
        xhr.setRequestHeader(header, reqHeaders[header]);
      }
    }
    if (options.timeout) {
      xhr.timeout = options.timeout;
    }
    xhr.responseType = 'arraybuffer';
    xhr.send(reqBody);
    return new _Promise((resolve, reject) => {
      xhr.onload = () => resolve();
      xhr.onerror = reject;
      xhr.ontimeout = reject;
      xhr.onabort = reject;
    });
  }, options.timeout, () => xhr.abort());
  const headerNames = getResponseHeaderNames(xhr);
  const headers = _reduceInstanceProperty(headerNames).call(headerNames, (headers, headerName) => _objectSpread(_objectSpread({}, headers), {}, {
    [headerName]: xhr.getResponseHeader(headerName) || ''
  }), {});
  const response = {
    statusCode: xhr.status,
    headers: headers
  };
  if (followRedirect && isRedirect(response.statusCode)) {
    try {
      performRedirectRequest(request, response, followRedirect, counter, req => startXmlHttpRequest(req, options, undefined, output, emitter, counter + 1));
    } catch (err) {
      emitter.emit('error', err);
    }
    return;
  }
  let body;
  if (!response.statusCode) {
    response.statusCode = 400;
    body = Buffer.from('Access Declined');
  } else {
    body = Buffer.from(xhr.response);
  }
  emitter.emit('response', response);
  output.write(body);
  output.end();
}

/**
 *
 */
let defaults = {};

/**
 *
 */
export function setDefaults(defaults_) {
  defaults = defaults_;
}

/**
 *
 */
export default function request(req, options_ = {}) {
  const options = _objectSpread(_objectSpread({}, defaults), options_);
  const {
    input,
    output,
    stream
  } = createHttpRequestHandlerStreams(req, options);
  if (typeof window !== 'undefined' && typeof window.fetch === 'function') {
    startFetchRequest(req, options, input, output, stream);
  } else {
    startXmlHttpRequest(req, options, input, output, stream);
  }
  return stream;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVIdHRwUmVxdWVzdEhhbmRsZXJTdHJlYW1zIiwiZXhlY3V0ZVdpdGhUaW1lb3V0IiwiaXNSZWRpcmVjdCIsInBlcmZvcm1SZWRpcmVjdFJlcXVlc3QiLCJyZWFkQWxsIiwic3VwcG9ydHNSZWFkYWJsZVN0cmVhbSIsInRvV2hhdHdnUmVhZGFibGVTdHJlYW0iLCJpbnMiLCJSZWFkYWJsZVN0cmVhbSIsInN0YXJ0IiwiY29udHJvbGxlciIsIm9uIiwiY2h1bmsiLCJlbnF1ZXVlIiwiY2xvc2UiLCJyZWFkV2hhdHdnUmVhZGFibGVTdHJlYW0iLCJycyIsIm91dHMiLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJyZWFkQW5kV3JpdGUiLCJkb25lIiwidmFsdWUiLCJyZWFkIiwiZW5kIiwid3JpdGUiLCJzdGFydEZldGNoUmVxdWVzdCIsInJlcXVlc3QiLCJvcHRpb25zIiwiaW5wdXQiLCJvdXRwdXQiLCJlbWl0dGVyIiwiY291bnRlciIsImZvbGxvd1JlZGlyZWN0IiwidXJsIiwiYm9keSIsInJlcUJvZHkiLCJycmVxIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwidGVzdCIsIm1ldGhvZCIsInVuZGVmaW5lZCIsIkFib3J0Q29udHJvbGxlciIsInJlcyIsImZldGNoIiwiX29iamVjdFNwcmVhZCIsInJlZGlyZWN0Iiwic2lnbmFsIiwiYWxsb3dIVFRQMUZvclN0cmVhbWluZ1VwbG9hZCIsInRpbWVvdXQiLCJhYm9ydCIsImhlYWRlcnMiLCJoZWFkZXJOYW1lIiwiX2tleXNJbnN0YW5jZVByb3BlcnR5IiwiX2NvbnRleHQiLCJjYWxsIiwidG9Mb3dlckNhc2UiLCJnZXQiLCJyZXNwb25zZSIsInN0YXR1c0NvZGUiLCJzdGF0dXMiLCJyZXEiLCJlcnIiLCJlbWl0IiwiZ2V0UmVzcG9uc2VIZWFkZXJOYW1lcyIsInhociIsIl9jb250ZXh0MiIsImhlYWRlckxpbmVzIiwiX2ZpbHRlckluc3RhbmNlUHJvcGVydHkiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzcGxpdCIsImwiLCJfdHJpbUluc3RhbmNlUHJvcGVydHkiLCJfbWFwSW5zdGFuY2VQcm9wZXJ0eSIsImhlYWRlckxpbmUiLCJzdGFydFhtbEh0dHBSZXF1ZXN0IiwicmVxSGVhZGVycyIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsImhlYWRlciIsInNldFJlcXVlc3RIZWFkZXIiLCJyZXNwb25zZVR5cGUiLCJzZW5kIiwiX1Byb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwib25sb2FkIiwib25lcnJvciIsIm9udGltZW91dCIsIm9uYWJvcnQiLCJoZWFkZXJOYW1lcyIsIl9yZWR1Y2VJbnN0YW5jZVByb3BlcnR5IiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJCdWZmZXIiLCJmcm9tIiwiZGVmYXVsdHMiLCJzZXREZWZhdWx0cyIsImRlZmF1bHRzXyIsIm9wdGlvbnNfIiwic3RyZWFtIiwid2luZG93Il0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Jyb3dzZXIvcmVxdWVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xuaW1wb3J0IHsgUmVhZGFibGUsIFdyaXRhYmxlIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7XG4gIGNyZWF0ZUh0dHBSZXF1ZXN0SGFuZGxlclN0cmVhbXMsXG4gIGV4ZWN1dGVXaXRoVGltZW91dCxcbiAgaXNSZWRpcmVjdCxcbiAgcGVyZm9ybVJlZGlyZWN0UmVxdWVzdCxcbn0gZnJvbSAnLi4vcmVxdWVzdC1oZWxwZXInO1xuaW1wb3J0IHsgcmVhZEFsbCB9IGZyb20gJy4uL3V0aWwvc3RyZWFtJztcbmltcG9ydCB7IEh0dHBSZXF1ZXN0LCBIdHRwUmVxdWVzdE9wdGlvbnMgfSBmcm9tICcuLi90eXBlcyc7XG5cbi8qKlxuICogQXMgdGhlIHJlcXVlc3Qgc3RyZW1pbmcgaXMgbm90IHlldCBzdXBwb3J0ZWQgb24gbWFqb3IgYnJvd3NlcnMsXG4gKiBpdCBpcyBzZXQgdG8gZmFsc2UgZm9yIG5vdy5cbiAqL1xuY29uc3Qgc3VwcG9ydHNSZWFkYWJsZVN0cmVhbSA9IGZhbHNlO1xuXG4vKlxuKGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBpZiAoXG4gICAgICB0eXBlb2YgZmV0Y2ggPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIHR5cGVvZiBSZXF1ZXN0ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICB0eXBlb2YgUmVhZGFibGVTdHJlYW0gPT09ICdmdW5jdGlvbidcbiAgICApIHtcbiAgICAgIC8vIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gcmVxdWlyZXMgZHVtbXkgUE9TVCByZXF1ZXN0XG4gICAgICBjb25zdCByZXEgPSBuZXcgUmVxdWVzdCgnZGF0YTp0ZXh0L3BsYWluLCcsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IG5ldyBSZWFkYWJsZVN0cmVhbSgpLFxuICAgICAgfSk7XG4gICAgICAvLyBpZiBpdCBoYXMgY29udGVudC10eXBlIGhlYWRlciBpdCBkb2Vzbid0IHJlZ2FyZCBib2R5IGFzIHN0cmVhbVxuICAgICAgaWYgKHJlcS5oZWFkZXJzLmhhcygnQ29udGVudC1UeXBlJykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgYXdhaXQgKGF3YWl0IGZldGNoKHJlcSkpLnRleHQoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIGVycm9yIG1pZ2h0IG9jY3VyIGluIGVudiB3aXRoIENTUCB3aXRob3V0IGNvbm5lY3Qtc3JjIGRhdGE6XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0pKCk7XG4qL1xuXG4vKipcbiAqXG4gKi9cbmZ1bmN0aW9uIHRvV2hhdHdnUmVhZGFibGVTdHJlYW0oaW5zOiBSZWFkYWJsZSk6IFJlYWRhYmxlU3RyZWFtIHtcbiAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgc3RhcnQoY29udHJvbGxlcikge1xuICAgICAgaW5zLm9uKCdkYXRhJywgKGNodW5rKSA9PiBjb250cm9sbGVyLmVucXVldWUoY2h1bmspKTtcbiAgICAgIGlucy5vbignZW5kJywgKCkgPT4gY29udHJvbGxlci5jbG9zZSgpKTtcbiAgICB9LFxuICB9KTtcbn1cblxuLyoqXG4gKlxuICovXG5hc3luYyBmdW5jdGlvbiByZWFkV2hhdHdnUmVhZGFibGVTdHJlYW0ocnM6IFJlYWRhYmxlU3RyZWFtLCBvdXRzOiBXcml0YWJsZSkge1xuICBjb25zdCByZWFkZXIgPSBycy5nZXRSZWFkZXIoKTtcbiAgYXN5bmMgZnVuY3Rpb24gcmVhZEFuZFdyaXRlKCkge1xuICAgIGNvbnN0IHsgZG9uZSwgdmFsdWUgfSA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG4gICAgaWYgKGRvbmUpIHtcbiAgICAgIG91dHMuZW5kKCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG91dHMud3JpdGUodmFsdWUpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHdoaWxlIChhd2FpdCByZWFkQW5kV3JpdGUoKSk7XG59XG5cbi8qKlxuICpcbiAqL1xuYXN5bmMgZnVuY3Rpb24gc3RhcnRGZXRjaFJlcXVlc3QoXG4gIHJlcXVlc3Q6IEh0dHBSZXF1ZXN0LFxuICBvcHRpb25zOiBIdHRwUmVxdWVzdE9wdGlvbnMsXG4gIGlucHV0OiBSZWFkYWJsZSB8IHVuZGVmaW5lZCxcbiAgb3V0cHV0OiBXcml0YWJsZSxcbiAgZW1pdHRlcjogRXZlbnRFbWl0dGVyLFxuICBjb3VudGVyOiBudW1iZXIgPSAwLFxuKSB7XG4gIGNvbnN0IHsgZm9sbG93UmVkaXJlY3QgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHsgdXJsLCBib2R5OiByZXFCb2R5LCAuLi5ycmVxIH0gPSByZXF1ZXN0O1xuICBjb25zdCBib2R5ID1cbiAgICBpbnB1dCAmJiAvXihwb3N0fHB1dHxwYXRjaCkkL2kudGVzdChyZXF1ZXN0Lm1ldGhvZClcbiAgICAgID8gc3VwcG9ydHNSZWFkYWJsZVN0cmVhbVxuICAgICAgICA/IHRvV2hhdHdnUmVhZGFibGVTdHJlYW0oaW5wdXQpXG4gICAgICAgIDogYXdhaXQgcmVhZEFsbChpbnB1dClcbiAgICAgIDogdW5kZWZpbmVkO1xuICBjb25zdCBjb250cm9sbGVyID1cbiAgICB0eXBlb2YgQWJvcnRDb250cm9sbGVyICE9PSAndW5kZWZpbmVkJyA/IG5ldyBBYm9ydENvbnRyb2xsZXIoKSA6IHVuZGVmaW5lZDtcbiAgY29uc3QgcmVzID0gYXdhaXQgZXhlY3V0ZVdpdGhUaW1lb3V0KFxuICAgICgpID0+XG4gICAgICBmZXRjaCh1cmwsIHtcbiAgICAgICAgLi4ucnJlcSxcbiAgICAgICAgLi4uKGJvZHkgPyB7IGJvZHkgfSA6IHt9KSxcbiAgICAgICAgcmVkaXJlY3Q6ICdtYW51YWwnLFxuICAgICAgICAuLi4oY29udHJvbGxlciA/IHsgc2lnbmFsOiBjb250cm9sbGVyLnNpZ25hbCB9IDoge30pLFxuICAgICAgICAuLi4oeyBhbGxvd0hUVFAxRm9yU3RyZWFtaW5nVXBsb2FkOiB0cnVlIH0gYXMgYW55KSwgLy8gQ2hyb21lIGFsbG93cyByZXF1ZXN0IHN0cmVhbSBvbmx5IGluIEhUVFAyL1FVSUMgdW5sZXNzIHRoaXMgb3B0LWluIGZsYWdcbiAgICAgIH0pLFxuICAgIG9wdGlvbnMudGltZW91dCxcbiAgICAoKSA9PiBjb250cm9sbGVyPy5hYm9ydCgpLFxuICApO1xuICBjb25zdCBoZWFkZXJzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XG4gIGZvciAoY29uc3QgaGVhZGVyTmFtZSBvZiByZXMuaGVhZGVycy5rZXlzKCkpIHtcbiAgICBoZWFkZXJzW2hlYWRlck5hbWUudG9Mb3dlckNhc2UoKV0gPSByZXMuaGVhZGVycy5nZXQoaGVhZGVyTmFtZSk7XG4gIH1cbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgc3RhdHVzQ29kZTogcmVzLnN0YXR1cyxcbiAgICBoZWFkZXJzLFxuICB9O1xuICBpZiAoZm9sbG93UmVkaXJlY3QgJiYgaXNSZWRpcmVjdChyZXNwb25zZS5zdGF0dXNDb2RlKSkge1xuICAgIHRyeSB7XG4gICAgICBwZXJmb3JtUmVkaXJlY3RSZXF1ZXN0KFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICByZXNwb25zZSxcbiAgICAgICAgZm9sbG93UmVkaXJlY3QsXG4gICAgICAgIGNvdW50ZXIsXG4gICAgICAgIChyZXEpID0+XG4gICAgICAgICAgc3RhcnRGZXRjaFJlcXVlc3QoXG4gICAgICAgICAgICByZXEsXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3V0cHV0LFxuICAgICAgICAgICAgZW1pdHRlcixcbiAgICAgICAgICAgIGNvdW50ZXIgKyAxLFxuICAgICAgICAgICksXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgZW1pdHRlci5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBlbWl0dGVyLmVtaXQoJ3Jlc3BvbnNlJywgcmVzcG9uc2UpO1xuICBpZiAocmVzLmJvZHkpIHtcbiAgICByZWFkV2hhdHdnUmVhZGFibGVTdHJlYW0ocmVzLmJvZHksIG91dHB1dCk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0LmVuZCgpO1xuICB9XG59XG5cbi8qKlxuICpcbiAqL1xuZnVuY3Rpb24gZ2V0UmVzcG9uc2VIZWFkZXJOYW1lcyh4aHI6IFhNTEh0dHBSZXF1ZXN0KSB7XG4gIGNvbnN0IGhlYWRlckxpbmVzID0gKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAuc3BsaXQoL1tcXHJcXG5dKy8pXG4gICAgLmZpbHRlcigobCkgPT4gbC50cmltKCkgIT09ICcnKTtcbiAgcmV0dXJuIGhlYWRlckxpbmVzLm1hcCgoaGVhZGVyTGluZSkgPT5cbiAgICBoZWFkZXJMaW5lLnNwbGl0KC9cXHMqOi8pWzBdLnRvTG93ZXJDYXNlKCksXG4gICk7XG59XG5cbi8qKlxuICpcbiAqL1xuYXN5bmMgZnVuY3Rpb24gc3RhcnRYbWxIdHRwUmVxdWVzdChcbiAgcmVxdWVzdDogSHR0cFJlcXVlc3QsXG4gIG9wdGlvbnM6IEh0dHBSZXF1ZXN0T3B0aW9ucyxcbiAgaW5wdXQ6IFJlYWRhYmxlIHwgdW5kZWZpbmVkLFxuICBvdXRwdXQ6IFdyaXRhYmxlLFxuICBlbWl0dGVyOiBFdmVudEVtaXR0ZXIsXG4gIGNvdW50ZXI6IG51bWJlciA9IDAsXG4pIHtcbiAgY29uc3QgeyBtZXRob2QsIHVybCwgaGVhZGVyczogcmVxSGVhZGVycyB9ID0gcmVxdWVzdDtcbiAgY29uc3QgeyBmb2xsb3dSZWRpcmVjdCB9ID0gb3B0aW9ucztcbiAgY29uc3QgcmVxQm9keSA9XG4gICAgaW5wdXQgJiYgL14ocG9zdHxwdXR8cGF0Y2gpJC9pLnRlc3QobWV0aG9kKSA/IGF3YWl0IHJlYWRBbGwoaW5wdXQpIDogbnVsbDtcbiAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gIGF3YWl0IGV4ZWN1dGVXaXRoVGltZW91dChcbiAgICAoKSA9PiB7XG4gICAgICB4aHIub3BlbihtZXRob2QsIHVybCk7XG4gICAgICBpZiAocmVxSGVhZGVycykge1xuICAgICAgICBmb3IgKGNvbnN0IGhlYWRlciBpbiByZXFIZWFkZXJzKSB7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyLCByZXFIZWFkZXJzW2hlYWRlcl0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy50aW1lb3V0KSB7XG4gICAgICAgIHhoci50aW1lb3V0ID0gb3B0aW9ucy50aW1lb3V0O1xuICAgICAgfVxuICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gICAgICB4aHIuc2VuZChyZXFCb2R5KTtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHhoci5vbmxvYWQgPSAoKSA9PiByZXNvbHZlKCk7XG4gICAgICAgIHhoci5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgICB4aHIub250aW1lb3V0ID0gcmVqZWN0O1xuICAgICAgICB4aHIub25hYm9ydCA9IHJlamVjdDtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb3B0aW9ucy50aW1lb3V0LFxuICAgICgpID0+IHhoci5hYm9ydCgpLFxuICApO1xuICBjb25zdCBoZWFkZXJOYW1lcyA9IGdldFJlc3BvbnNlSGVhZGVyTmFtZXMoeGhyKTtcbiAgY29uc3QgaGVhZGVycyA9IGhlYWRlck5hbWVzLnJlZHVjZShcbiAgICAoaGVhZGVycywgaGVhZGVyTmFtZSkgPT4gKHtcbiAgICAgIC4uLmhlYWRlcnMsXG4gICAgICBbaGVhZGVyTmFtZV06IHhoci5nZXRSZXNwb25zZUhlYWRlcihoZWFkZXJOYW1lKSB8fCAnJyxcbiAgICB9KSxcbiAgICB7fSBhcyB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfSxcbiAgKTtcbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgc3RhdHVzQ29kZTogeGhyLnN0YXR1cyxcbiAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICB9O1xuICBpZiAoZm9sbG93UmVkaXJlY3QgJiYgaXNSZWRpcmVjdChyZXNwb25zZS5zdGF0dXNDb2RlKSkge1xuICAgIHRyeSB7XG4gICAgICBwZXJmb3JtUmVkaXJlY3RSZXF1ZXN0KFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICByZXNwb25zZSxcbiAgICAgICAgZm9sbG93UmVkaXJlY3QsXG4gICAgICAgIGNvdW50ZXIsXG4gICAgICAgIChyZXEpID0+XG4gICAgICAgICAgc3RhcnRYbWxIdHRwUmVxdWVzdChcbiAgICAgICAgICAgIHJlcSxcbiAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdXRwdXQsXG4gICAgICAgICAgICBlbWl0dGVyLFxuICAgICAgICAgICAgY291bnRlciArIDEsXG4gICAgICAgICAgKSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBlbWl0dGVyLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBib2R5OiBCdWZmZXI7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzQ29kZSkge1xuICAgIHJlc3BvbnNlLnN0YXR1c0NvZGUgPSA0MDA7XG4gICAgYm9keSA9IEJ1ZmZlci5mcm9tKCdBY2Nlc3MgRGVjbGluZWQnKTtcbiAgfSBlbHNlIHtcbiAgICBib2R5ID0gQnVmZmVyLmZyb20oeGhyLnJlc3BvbnNlKTtcbiAgfVxuICBlbWl0dGVyLmVtaXQoJ3Jlc3BvbnNlJywgcmVzcG9uc2UpO1xuICBvdXRwdXQud3JpdGUoYm9keSk7XG4gIG91dHB1dC5lbmQoKTtcbn1cblxuLyoqXG4gKlxuICovXG5sZXQgZGVmYXVsdHM6IEh0dHBSZXF1ZXN0T3B0aW9ucyA9IHt9O1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXREZWZhdWx0cyhkZWZhdWx0c186IEh0dHBSZXF1ZXN0T3B0aW9ucykge1xuICBkZWZhdWx0cyA9IGRlZmF1bHRzXztcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1ZXN0KFxuICByZXE6IEh0dHBSZXF1ZXN0LFxuICBvcHRpb25zXzogSHR0cFJlcXVlc3RPcHRpb25zID0ge30sXG4pIHtcbiAgY29uc3Qgb3B0aW9ucyA9IHsgLi4uZGVmYXVsdHMsIC4uLm9wdGlvbnNfIH07XG4gIGNvbnN0IHsgaW5wdXQsIG91dHB1dCwgc3RyZWFtIH0gPSBjcmVhdGVIdHRwUmVxdWVzdEhhbmRsZXJTdHJlYW1zKFxuICAgIHJlcSxcbiAgICBvcHRpb25zLFxuICApO1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5mZXRjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHN0YXJ0RmV0Y2hSZXF1ZXN0KHJlcSwgb3B0aW9ucywgaW5wdXQsIG91dHB1dCwgc3RyZWFtKTtcbiAgfSBlbHNlIHtcbiAgICBzdGFydFhtbEh0dHBSZXF1ZXN0KHJlcSwgb3B0aW9ucywgaW5wdXQsIG91dHB1dCwgc3RyZWFtKTtcbiAgfVxuICByZXR1cm4gc3RyZWFtO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsU0FDRUEsK0JBQStCLEVBQy9CQyxrQkFBa0IsRUFDbEJDLFVBQVUsRUFDVkMsc0JBQXNCLFFBQ2pCLG1CQUFtQjtBQUMxQixTQUFTQyxPQUFPLFFBQVEsZ0JBQWdCO0FBR3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsc0JBQXNCLEdBQUcsS0FBSzs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLHNCQUFzQkEsQ0FBQ0MsR0FBYSxFQUFrQjtFQUM3RCxPQUFPLElBQUlDLGNBQWMsQ0FBQztJQUN4QkMsS0FBS0EsQ0FBQ0MsVUFBVSxFQUFFO01BQ2hCSCxHQUFHLENBQUNJLEVBQUUsQ0FBQyxNQUFNLEVBQUdDLEtBQUssSUFBS0YsVUFBVSxDQUFDRyxPQUFPLENBQUNELEtBQUssQ0FBQyxDQUFDO01BQ3BETCxHQUFHLENBQUNJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBTUQsVUFBVSxDQUFDSSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3pDO0VBQ0YsQ0FBQyxDQUFDO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZUMsd0JBQXdCQSxDQUFDQyxFQUFrQixFQUFFQyxJQUFjLEVBQUU7RUFDMUUsTUFBTUMsTUFBTSxHQUFHRixFQUFFLENBQUNHLFNBQVMsQ0FBQyxDQUFDO0VBQzdCLGVBQWVDLFlBQVlBLENBQUEsRUFBRztJQUM1QixNQUFNO01BQUVDLElBQUk7TUFBRUM7SUFBTSxDQUFDLEdBQUcsTUFBTUosTUFBTSxDQUFDSyxJQUFJ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