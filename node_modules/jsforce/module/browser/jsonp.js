import "core-js/modules/es.promise";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
/**
 *
 */
import { Transform } from 'stream';
let _index = 0;
async function processJsonpRequest(params, jsonpParam, timeout) {
  if (params.method.toUpperCase() !== 'GET') {
    throw new Error('JSONP only supports GET request.');
  }
  _index += 1;
  const cbFuncName = `_jsforce_jsonpCallback_${_index}`;
  const callbacks = window;
  let url = params.url;
  url += _indexOfInstanceProperty(url).call(url, '?') > 0 ? '&' : '?';
  url += `${jsonpParam}=${cbFuncName}`;
  const script = document.createElement('script');
  script.type = 'text/javascript';
  script.src = url;
  if (document.documentElement) {
    document.documentElement.appendChild(script);
  }
  let pid;
  try {
    const res = await new _Promise((resolve, reject) => {
      pid = _setTimeout(() => {
        reject(new Error('JSONP call time out.'));
      }, timeout);
      callbacks[cbFuncName] = resolve;
    });
    return {
      statusCode: 200,
      headers: {
        'content-type': 'application/json'
      },
      body: _JSON$stringify(res)
    };
  } finally {
    clearTimeout(pid);
    if (document.documentElement) {
      document.documentElement.removeChild(script);
    }
    delete callbacks[cbFuncName];
  }
}
function createRequest(jsonpParam = 'callback', timeout = 10000) {
  return params => {
    const stream = new Transform({
      transform(chunk, encoding, callback) {
        callback();
      },
      flush() {
        (async () => {
          const response = await processJsonpRequest(params, jsonpParam, timeout);
          stream.emit('response', response);
          stream.emit('complete', response);
          stream.push(response.body);
          stream.push(null);
        })();
      }
    });
    stream.end();
    return stream;
  };
}
export default {
  supported: typeof window !== 'undefined' && typeof document !== 'undefined',
  createRequest
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUcmFuc2Zvcm0iLCJfaW5kZXgiLCJwcm9jZXNzSnNvbnBSZXF1ZXN0IiwicGFyYW1zIiwianNvbnBQYXJhbSIsInRpbWVvdXQiLCJtZXRob2QiLCJ0b1VwcGVyQ2FzZSIsIkVycm9yIiwiY2JGdW5jTmFtZSIsImNhbGxiYWNrcyIsIndpbmRvdyIsInVybCIsIl9pbmRleE9mSW5zdGFuY2VQcm9wZXJ0eSIsImNhbGwiLCJzY3JpcHQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwic3JjIiwiZG9jdW1lbnRFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJwaWQiLCJyZXMiLCJfUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJfc2V0VGltZW91dCIsInN0YXR1c0NvZGUiLCJoZWFkZXJzIiwiYm9keSIsIl9KU09OJHN0cmluZ2lmeSIsImNsZWFyVGltZW91dCIsInJlbW92ZUNoaWxkIiwiY3JlYXRlUmVxdWVzdCIsInN0cmVhbSIsInRyYW5zZm9ybSIsImNodW5rIiwiZW5jb2RpbmciLCJjYWxsYmFjayIsImZsdXNoIiwicmVzcG9uc2UiLCJlbWl0IiwicHVzaCIsImVuZCIsInN1cHBvcnRlZCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9icm93c2VyL2pzb25wLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqL1xuaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IEh0dHBSZXF1ZXN0IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5sZXQgX2luZGV4ID0gMDtcblxuYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0pzb25wUmVxdWVzdChcbiAgcGFyYW1zOiBIdHRwUmVxdWVzdCxcbiAganNvbnBQYXJhbTogc3RyaW5nLFxuICB0aW1lb3V0OiBudW1iZXIsXG4pIHtcbiAgaWYgKHBhcmFtcy5tZXRob2QudG9VcHBlckNhc2UoKSAhPT0gJ0dFVCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0pTT05QIG9ubHkgc3VwcG9ydHMgR0VUIHJlcXVlc3QuJyk7XG4gIH1cbiAgX2luZGV4ICs9IDE7XG4gIGNvbnN0IGNiRnVuY05hbWUgPSBgX2pzZm9yY2VfanNvbnBDYWxsYmFja18ke19pbmRleH1gO1xuICBjb25zdCBjYWxsYmFja3M6IGFueSA9IHdpbmRvdztcbiAgbGV0IHVybCA9IHBhcmFtcy51cmw7XG4gIHVybCArPSB1cmwuaW5kZXhPZignPycpID4gMCA/ICcmJyA6ICc/JztcbiAgdXJsICs9IGAke2pzb25wUGFyYW19PSR7Y2JGdW5jTmFtZX1gO1xuICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgc2NyaXB0LnNyYyA9IHVybDtcbiAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICB9XG4gIGxldCBwaWQ7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgcGlkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0pTT05QIGNhbGwgdGltZSBvdXQuJykpO1xuICAgICAgfSwgdGltZW91dCk7XG4gICAgICBjYWxsYmFja3NbY2JGdW5jTmFtZV0gPSByZXNvbHZlO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICBoZWFkZXJzOiB7ICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcyksXG4gICAgfTtcbiAgfSBmaW5hbGx5IHtcbiAgICBjbGVhclRpbWVvdXQocGlkKTtcbiAgICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICB9XG4gICAgZGVsZXRlIGNhbGxiYWNrc1tjYkZ1bmNOYW1lXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVSZXF1ZXN0KFxuICBqc29ucFBhcmFtOiBzdHJpbmcgPSAnY2FsbGJhY2snLFxuICB0aW1lb3V0OiBudW1iZXIgPSAxMDAwMCxcbikge1xuICByZXR1cm4gKHBhcmFtczogSHR0cFJlcXVlc3QpID0+IHtcbiAgICBjb25zdCBzdHJlYW0gPSBuZXcgVHJhbnNmb3JtKHtcbiAgICAgIHRyYW5zZm9ybShjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9LFxuICAgICAgZmx1c2goKSB7XG4gICAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBwcm9jZXNzSnNvbnBSZXF1ZXN0KFxuICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgICAganNvbnBQYXJhbSxcbiAgICAgICAgICAgIHRpbWVvdXQsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBzdHJlYW0uZW1pdCgncmVzcG9uc2UnLCByZXNwb25zZSk7XG4gICAgICAgICAgc3RyZWFtLmVtaXQoJ2NvbXBsZXRlJywgcmVzcG9uc2UpO1xuICAgICAgICAgIHN0cmVhbS5wdXNoKHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgIHN0cmVhbS5wdXNoKG51bGwpO1xuICAgICAgICB9KSgpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICBzdHJlYW0uZW5kKCk7XG4gICAgcmV0dXJuIHN0cmVhbTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBzdXBwb3J0ZWQ6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcsXG4gIGNyZWF0ZVJlcXVlc3QsXG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7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