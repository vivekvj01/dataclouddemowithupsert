import "core-js/modules/es.array.iterator";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
/**
 * @file Manages Tooling APIs
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { registerModule } from '../jsforce';
import Connection from '../connection';
import Cache from '../cache';

/**
 *
 */

/**
 *
 */
const {
  query,
  queryMore,
  _ensureVersion,
  create,
  _createSingle,
  _createMany,
  _createParallel,
  retrieve,
  _retrieveSingle,
  _retrieveParallel,
  _retrieveMany,
  update,
  _updateSingle,
  _updateParallel,
  _updateMany,
  upsert,
  destroy,
  _destroySingle,
  _destroyParallel,
  _destroyMany,
  describe,
  describeGlobal,
  sobject
} = Connection.prototype;
const describeCacheKey = type => type ? `describe.${type}` : 'describe';

/**
 * API class for Tooling API call
 */
export class Tooling {
  get version() {
    return this._conn.version;
  }

  /**
   * Execute query by using SOQL
   */

  /**
   * Query next record set by using query locator
   */

  /**
   * Create records
   */

  /**
   * Synonym of Tooling#create()
   */

  /**
   * Retrieve specified records
   */

  /**
   * Update records
   */

  /**
   * Upsert records
   */

  /**
   * Delete records
   */

  /**
   * Synonym of Tooling#destroy()
   */

  /**
   * Synonym of Tooling#destroy()
   */

  /**
   * Describe SObject metadata
   */

  /**
   * Synonym of Tooling#describe()
   */

  /**
   * Describe global SObjects
   */

  /**
   * Get SObject instance
   */

  /**
   *
   */
  constructor(conn) {
    _defineProperty(this, "_conn", void 0);
    _defineProperty(this, "query", query);
    _defineProperty(this, "queryMore", queryMore);
    _defineProperty(this, "_ensureVersion", _ensureVersion);
    _defineProperty(this, "create", create);
    _defineProperty(this, "_createSingle", _createSingle);
    _defineProperty(this, "_createParallel", _createParallel);
    _defineProperty(this, "_createMany", _createMany);
    _defineProperty(this, "insert", create);
    _defineProperty(this, "retrieve", retrieve);
    _defineProperty(this, "_retrieveSingle", _retrieveSingle);
    _defineProperty(this, "_retrieveParallel", _retrieveParallel);
    _defineProperty(this, "_retrieveMany", _retrieveMany);
    _defineProperty(this, "update", update);
    _defineProperty(this, "_updateSingle", _updateSingle);
    _defineProperty(this, "_updateParallel", _updateParallel);
    _defineProperty(this, "_updateMany", _updateMany);
    _defineProperty(this, "upsert", upsert);
    _defineProperty(this, "destroy", destroy);
    _defineProperty(this, "_destroySingle", _destroySingle);
    _defineProperty(this, "_destroyParallel", _destroyParallel);
    _defineProperty(this, "_destroyMany", _destroyMany);
    _defineProperty(this, "delete", destroy);
    _defineProperty(this, "del", destroy);
    _defineProperty(this, "cache", new Cache());
    _defineProperty(this, "describe", this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'NOCACHE'
    }));
    _defineProperty(this, "describe$", this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'HIT'
    }));
    _defineProperty(this, "describe$$", this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'IMMEDIATE'
    }));
    _defineProperty(this, "describeSObject", this.describe);
    _defineProperty(this, "describeSObject$", this.describe$);
    _defineProperty(this, "describeSObject$$", this.describe$$);
    _defineProperty(this, "describeGlobal", this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'NOCACHE'
    }));
    _defineProperty(this, "describeGlobal$", this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'HIT'
    }));
    _defineProperty(this, "describeGlobal$$", this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'IMMEDIATE'
    }));
    _defineProperty(this, "sobject", sobject);
    _defineProperty(this, "sobjects", {});
    this._conn = conn;
  }

  /**
   * @private
   */
  _establish() {
    this.sobjects = {};
    this.cache.clear();
    this.cache.get('describeGlobal').removeAllListeners('value');
    this.cache.get('describeGlobal').on('value', res => {
      if (res.result) {
        for (const {
          name: type
        } of res.result.sobjects) {
          this.sobject(type);
        }
      }
    });
  }

  /**
   * @private
   */
  _baseUrl() {
    return this._conn._baseUrl() + '/tooling';
  }

  /**
   * @private
   */
  _supports(feature) {
    return this._conn._supports(feature);
  }

  /**
   *
   */
  request(request, options) {
    return this._conn.request(request, options);
  }

  /**
   * Executes Apex code anonymously
   */
  executeAnonymous(body) {
    const url = this._baseUrl() + '/executeAnonymous?anonymousBody=' + encodeURIComponent(body);
    return this.request(url);
  }

  /**
   * Executes Apex tests asynchronously
   */
  runTestsAsynchronous(req) {
    const url = this._baseUrl() + '/runTestsAsynchronous/';
    return this._conn.requestPost(url, req);
  }

  /**
   * Executes Apex tests synchronously
   */
  runTestsSynchronous(req) {
    const url = this._baseUrl() + '/runTestsSynchronous/';
    return this._conn.requestPost(url, req);
  }

  /**
   * Retrieves available code completions of the referenced type
   */
  completions(type = 'apex') {
    const url = this._baseUrl() + '/completions?type=' + encodeURIComponent(type);
    return this.request({
      method: 'GET',
      url,
      headers: {
        Accept: 'application/json'
      }
    });
  }
}

/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
registerModule('tooling', conn => new Tooling(conn));
export default Tooling;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWdpc3Rlck1vZHVsZSIsIkNvbm5lY3Rpb24iLCJDYWNoZSIsInF1ZXJ5IiwicXVlcnlNb3JlIiwiX2Vuc3VyZVZlcnNpb24iLCJjcmVhdGUiLCJfY3JlYXRlU2luZ2xlIiwiX2NyZWF0ZU1hbnkiLCJfY3JlYXRlUGFyYWxsZWwiLCJyZXRyaWV2ZSIsIl9yZXRyaWV2ZVNpbmdsZSIsIl9yZXRyaWV2ZVBhcmFsbGVsIiwiX3JldHJpZXZlTWFueSIsInVwZGF0ZSIsIl91cGRhdGVTaW5nbGUiLCJfdXBkYXRlUGFyYWxsZWwiLCJfdXBkYXRlTWFueSIsInVwc2VydCIsImRlc3Ryb3kiLCJfZGVzdHJveVNpbmdsZSIsIl9kZXN0cm95UGFyYWxsZWwiLCJfZGVzdHJveU1hbnkiLCJkZXNjcmliZSIsImRlc2NyaWJlR2xvYmFsIiwic29iamVjdCIsInByb3RvdHlwZSIsImRlc2NyaWJlQ2FjaGVLZXkiLCJ0eXBlIiwiVG9vbGluZyIsInZlcnNpb24iLCJfY29ubiIsImNvbnN0cnVjdG9yIiwiY29ubiIsIl9kZWZpbmVQcm9wZXJ0eSIsImNhY2hlIiwiY3JlYXRlQ2FjaGVkRnVuY3Rpb24iLCJrZXkiLCJzdHJhdGVneSIsImRlc2NyaWJlJCIsImRlc2NyaWJlJCQiLCJfZXN0YWJsaXNoIiwic29iamVjdHMiLCJjbGVhciIsImdldCIsInJlbW92ZUFsbExpc3RlbmVycyIsIm9uIiwicmVzIiwicmVzdWx0IiwibmFtZSIsIl9iYXNlVXJsIiwiX3N1cHBvcnRzIiwiZmVhdHVyZSIsInJlcXVlc3QiLCJvcHRpb25zIiwiZXhlY3V0ZUFub255bW91cyIsImJvZHkiLCJ1cmwiLCJlbmNvZGVVUklDb21wb25lbnQiLCJydW5UZXN0c0FzeW5jaHJvbm91cyIsInJlcSIsInJlcXVlc3RQb3N0IiwicnVuVGVzdHNTeW5jaHJvbm91cyIsImNvbXBsZXRpb25zIiwibWV0aG9kIiwiaGVhZGVycyIsIkFjY2VwdCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvdG9vbGluZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIE1hbmFnZXMgVG9vbGluZyBBUElzXG4gKiBAYXV0aG9yIFNoaW5pY2hpIFRvbWl0YSA8c2hpbmljaGkudG9taXRhQGdtYWlsLmNvbT5cbiAqL1xuaW1wb3J0IHsgcmVnaXN0ZXJNb2R1bGUgfSBmcm9tICcuLi9qc2ZvcmNlJztcbmltcG9ydCBDb25uZWN0aW9uIGZyb20gJy4uL2Nvbm5lY3Rpb24nO1xuaW1wb3J0IENhY2hlLCB7IENhY2hlZEZ1bmN0aW9uIH0gZnJvbSAnLi4vY2FjaGUnO1xuaW1wb3J0IFNPYmplY3QgZnJvbSAnLi4vc29iamVjdCc7XG5pbXBvcnQge1xuICBEZXNjcmliZUdsb2JhbFJlc3VsdCxcbiAgRGVzY3JpYmVTT2JqZWN0UmVzdWx0LFxuICBIdHRwUmVxdWVzdCxcbiAgU2NoZW1hLFxuICBTT2JqZWN0TmFtZXMsXG59IGZyb20gJy4uL3R5cGVzJztcblxuLyoqXG4gKlxuICovXG5leHBvcnQgdHlwZSBFeGVjdXRlQW5vbnltb3VzUmVzdWx0ID0ge1xuICBjb21waWxlZDogYm9vbGVhbjtcbiAgY29tcGlsZVByb2JsZW06IHN0cmluZyB8IG51bGw7XG4gIHN1Y2Nlc3M6IGJvb2xlYW47XG4gIGxpbmU6IG51bWJlcjtcbiAgY29sdW1uOiBudW1iZXI7XG4gIGV4Y2VwdGlvbk1lc3NhZ2U6IHN0cmluZyB8IG51bGw7XG4gIGV4Y2VwdGlvblN0YWNrVHJhY2U6IHN0cmluZyB8IG51bGw7XG59O1xuXG5leHBvcnQgdHlwZSBSdW5UZXN0TGV2ZWwgPVxuICB8ICdSdW5TcGVjaWZpZWRUZXN0cydcbiAgfCAnUnVuTG9jYWxUZXN0cydcbiAgfCAnUnVuQWxsVGVzdHNJbk9yZyc7XG5cbnR5cGUgVGVzdHNOb2RlID1cbiAgfCB7XG4gICAgICBjbGFzc0lkOiBzdHJpbmc7XG4gICAgICB0ZXN0TWV0aG9kcz86IHN0cmluZ1tdO1xuICAgIH1cbiAgfCB7XG4gICAgICBjbGFzc05hbWU6IHN0cmluZztcbiAgICAgIHRlc3RNZXRob2RzPzogc3RyaW5nW107XG4gICAgfTtcblxuZXhwb3J0IHR5cGUgUnVuVGVzdHNSZXF1ZXN0ID0ge1xuICB0ZXN0czogVGVzdHNOb2RlW107XG4gIG1heEZhaWxlZFRlc3RzPzogbnVtYmVyO1xuICB0ZXN0TGV2ZWw/OiBSdW5UZXN0TGV2ZWw7XG4gIHNraXBDb2RlQ292ZXJhZ2U/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IHR5cGUgUnVuVGVzdHNBc3luY1JlcXVlc3QgPVxuICB8IHtcbiAgICAgIGNsYXNzaWRzPzogc3RyaW5nO1xuICAgICAgY2xhc3NOYW1lcz86IHN0cmluZztcbiAgICAgIHN1aXRlaWRzPzogc3RyaW5nO1xuICAgICAgc3VpdGVOYW1lcz86IHN0cmluZztcbiAgICAgIG1heEZhaWxlZFRlc3RzPzogbnVtYmVyO1xuICAgICAgdGVzdExldmVsPzogUnVuVGVzdExldmVsO1xuICAgICAgc2tpcENvZGVDb3ZlcmFnZT86IGJvb2xlYW47XG4gICAgfVxuICB8IHtcbiAgICAgIHRlc3RzOiBUZXN0c05vZGVbXTtcbiAgICAgIG1heEZhaWxlZFRlc3RzPzogbnVtYmVyO1xuICAgICAgdGVzdExldmVsPzogUnVuVGVzdExldmVsO1xuICAgICAgc2tpcENvZGVDb3ZlcmFnZT86IGJvb2xlYW47XG4gICAgfTtcblxudHlwZSBDb2RlQ292ZXJhZ2VSZXN1bHQgPSB7XG4gIGlkOiBzdHJpbmc7XG4gIGxvY2F0aW9uc05vdENvdmVyZWQ6IGFueVtdO1xuICBuYW1lOiBzdHJpbmc7XG4gIG5hbWVzcGFjZTogc3RyaW5nIHwgbnVsbDtcbiAgbnVtTG9jYXRpb25zOiBudW1iZXI7XG4gIG51bUxvY2F0aW9uc05vdENvdmVyZWQ6IG51bWJlcjtcbiAgdHlwZTogc3RyaW5nO1xufTtcblxudHlwZSBDb2RlQ292ZXJhZ2VXYXJuaW5nID0ge1xuICBpZDogc3RyaW5nO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZyB8IG51bGw7XG4gIG5hbWVzcGFjZTogc3RyaW5nIHwgbnVsbDtcbn07XG5cbnR5cGUgRmxvd0NvdmVyYWdlUmVzdWx0ID0ge1xuICBlbGVtZW50c05vdENvdmVyZWQ6IHN0cmluZ1tdO1xuICBmbG93SWQ6IHN0cmluZztcbiAgZmxvd05hbWU6IHN0cmluZztcbiAgZmxvd05hbWVzcGFjZTogc3RyaW5nIHwgbnVsbDtcbiAgbnVtRWxlbWVudHM6IG51bWJlcjtcbiAgbnVtRWxlbWVudHNOb3RDb3ZlcmVkOiBudW1iZXI7XG4gIHByb2Nlc3NUeXBlOiBzdHJpbmc7XG59O1xuXG50eXBlIEZsb3dDb3ZlcmFnZVdhcm5pbmcgPSB7XG4gIGZsb3dJZDogc3RyaW5nO1xuICBmbG93TmFtZTogc3RyaW5nO1xuICBmbG93TmFtZXNwYWNlOiBzdHJpbmcgfCBudWxsO1xuICBtZXNzYWdlOiBzdHJpbmc7XG59O1xuXG50eXBlIFJ1blRlc3RTdWNjZXNzID0ge1xuICBpZDogc3RyaW5nO1xuICBtZXRob2ROYW1lOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgbmFtZXNwYWNlOiBzdHJpbmcgfCBudWxsO1xuICBzZWVBbGxEYXRhOiBib29sZWFuO1xuICB0aW1lOiBudW1iZXI7XG59O1xuXG50eXBlIFJ1blRlc3RGYWlsdXJlID0ge1xuICBpZDogc3RyaW5nO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIG1ldGhvZE5hbWU6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBuYW1lc3BhY2U6IHN0cmluZyB8IG51bGw7XG4gIHNlZUFsbERhdGE6IGJvb2xlYW47XG4gIHN0YWNrVHJhY2U6IHN0cmluZztcbiAgdGltZTogbnVtYmVyO1xuICB0eXBlOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBSdW5UZXN0c1Jlc3VsdCA9IHtcbiAgYXBleExvZ0lkOiBzdHJpbmc7XG4gIGNvZGVDb3ZlcmFnZTogQ29kZUNvdmVyYWdlUmVzdWx0W107XG4gIGNvZGVDb3ZlcmFnZVdhcm5pbmdzOiBDb2RlQ292ZXJhZ2VXYXJuaW5nW107XG4gIGZsb3dDb3ZlcmFnZTogRmxvd0NvdmVyYWdlUmVzdWx0W107XG4gIGZsb3dDb3ZlcmFnZVdhcm5pbmdzOiBGbG93Q292ZXJhZ2VXYXJuaW5nW107XG4gIG51bUZhaWx1cmVzOiBudW1iZXI7XG4gIG51bVRlc3RzUnVuOiBudW1iZXI7XG4gIHN1Y2Nlc3NlczogUnVuVGVzdFN1Y2Nlc3NbXTtcbiAgZmFpbHVyZXM6IFJ1blRlc3RGYWlsdXJlW107XG4gIHRvdGFsVGltZTogbnVtYmVyO1xufTtcblxudHlwZSBDb25zdHJ1Y3RvckRlY2xhcmF0aW9uID0ge1xuICBtZXRob2REb2M6IHN0cmluZyB8IG51bGw7XG4gIG5hbWU6IHN0cmluZztcbiAgcGFyYW1ldGVyczogQXJyYXk8e1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB0eXBlOiBzdHJpbmc7XG4gIH0+O1xuICByZWZlcmVuY2VzOiBhbnlbXTtcbn07XG5cbnR5cGUgTWV0aG9kRGVjbGFyYXRpb24gPSB7XG4gIGFyZ1R5cGVzOiBzdHJpbmdbXTtcbiAgaXNTdGF0aWM6IGJvb2xlYW47XG4gIG1ldGhvZERvYzogc3RyaW5nIHwgbnVsbDtcbiAgbmFtZTogc3RyaW5nO1xuICBwYXJhbWV0ZXJzOiBBcnJheTx7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHR5cGU6IHN0cmluZztcbiAgfT47XG4gIHJlZmVyZW5jZXM6IGFueVtdO1xufTtcblxudHlwZSBQcm9wZXJ0eURlY2xhcmF0aW9uID0ge1xuICBuYW1lOiBzdHJpbmc7XG4gIHJlZmVyZW5jZXM6IGFueVtdO1xufTtcblxudHlwZSBDbGFzc0RlY2xhcmF0aW9uID0ge1xuICBjb25zdHJ1Y3RvcnM6IENvbnN0cnVjdG9yRGVjbGFyYXRpb25bXTtcbiAgbWV0aG9kczogTWV0aG9kRGVjbGFyYXRpb25bXTtcbiAgcHJvcGVydGllczogUHJvcGVydHlEZWNsYXJhdGlvbltdO1xufTtcblxuZXhwb3J0IHR5cGUgQ29tcGxldGlvbnNSZXN1bHQgPSB7XG4gIHB1YmxpY0RlY2xhcmF0aW9ucz86IHtcbiAgICBbbmFtZXNwYWNlOiBzdHJpbmddOiB7XG4gICAgICBbbmFtZTogc3RyaW5nXTogQ2xhc3NEZWNsYXJhdGlvbjtcbiAgICB9O1xuICB9O1xuICBjb21wbGV0aW9ucz86IHtcbiAgICBbY29tcG9uZW50OiBzdHJpbmddOiB7XG4gICAgICBzaW1wbGU6IGJvb2xlYW47XG4gICAgICBhdHRyaWJzOiB7XG4gICAgICAgIFthdHRyOiBzdHJpbmddOiB7fTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn07XG5cbi8qKlxuICpcbiAqL1xuY29uc3Qge1xuICBxdWVyeSxcbiAgcXVlcnlNb3JlLFxuICBfZW5zdXJlVmVyc2lvbixcbiAgY3JlYXRlLFxuICBfY3JlYXRlU2luZ2xlLFxuICBfY3JlYXRlTWFueSxcbiAgX2NyZWF0ZVBhcmFsbGVsLFxuICByZXRyaWV2ZSxcbiAgX3JldHJpZXZlU2luZ2xlLFxuICBfcmV0cmlldmVQYXJhbGxlbCxcbiAgX3JldHJpZXZlTWFueSxcbiAgdXBkYXRlLFxuICBfdXBkYXRlU2luZ2xlLFxuICBfdXBkYXRlUGFyYWxsZWwsXG4gIF91cGRhdGVNYW55LFxuICB1cHNlcnQsXG4gIGRlc3Ryb3ksXG4gIF9kZXN0cm95U2luZ2xlLFxuICBfZGVzdHJveVBhcmFsbGVsLFxuICBfZGVzdHJveU1hbnksXG4gIGRlc2NyaWJlLFxuICBkZXNjcmliZUdsb2JhbCxcbiAgc29iamVjdCxcbn0gPSBDb25uZWN0aW9uLnByb3RvdHlwZTtcblxuY29uc3QgZGVzY3JpYmVDYWNoZUtleSA9ICh0eXBlPzogc3RyaW5nKSA9PlxuICB0eXBlID8gYGRlc2NyaWJlLiR7dHlwZX1gIDogJ2Rlc2NyaWJlJztcblxuLyoqXG4gKiBBUEkgY2xhc3MgZm9yIFRvb2xpbmcgQVBJIGNhbGxcbiAqL1xuZXhwb3J0IGNsYXNzIFRvb2xpbmc8UyBleHRlbmRzIFNjaGVtYT4ge1xuICBfY29ubjogQ29ubmVjdGlvbjxTPjtcblxuICBnZXQgdmVyc2lvbigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9jb25uLnZlcnNpb247XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZSBxdWVyeSBieSB1c2luZyBTT1FMXG4gICAqL1xuICBxdWVyeTogQ29ubmVjdGlvbjxTPlsncXVlcnknXSA9IHF1ZXJ5O1xuXG4gIC8qKlxuICAgKiBRdWVyeSBuZXh0IHJlY29yZCBzZXQgYnkgdXNpbmcgcXVlcnkgbG9jYXRvclxuICAgKi9cbiAgcXVlcnlNb3JlOiBDb25uZWN0aW9uPFM+WydxdWVyeU1vcmUnXSA9IHF1ZXJ5TW9yZTtcblxuICBfZW5zdXJlVmVyc2lvbjogQ29ubmVjdGlvbjxTPlsnX2Vuc3VyZVZlcnNpb24nXSA9IF9lbnN1cmVWZXJzaW9uO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgcmVjb3Jkc1xuICAgKi9cbiAgY3JlYXRlOiBDb25uZWN0aW9uPFM+WydjcmVhdGUnXSA9IGNyZWF0ZTtcbiAgX2NyZWF0ZVNpbmdsZSA9IF9jcmVhdGVTaW5nbGU7XG4gIF9jcmVhdGVQYXJhbGxlbCA9IF9jcmVhdGVQYXJhbGxlbDtcbiAgX2NyZWF0ZU1hbnkgPSBfY3JlYXRlTWFueTtcblxuICAvKipcbiAgICogU3lub255bSBvZiBUb29saW5nI2NyZWF0ZSgpXG4gICAqL1xuICBpbnNlcnQgPSBjcmVhdGU7XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHNwZWNpZmllZCByZWNvcmRzXG4gICAqL1xuICByZXRyaWV2ZTogQ29ubmVjdGlvbjxTPlsncmV0cmlldmUnXSA9IHJldHJpZXZlO1xuICBfcmV0cmlldmVTaW5nbGUgPSBfcmV0cmlldmVTaW5nbGU7XG4gIF9yZXRyaWV2ZVBhcmFsbGVsID0gX3JldHJpZXZlUGFyYWxsZWw7XG4gIF9yZXRyaWV2ZU1hbnkgPSBfcmV0cmlldmVNYW55O1xuXG4gIC8qKlxuICAgKiBVcGRhdGUgcmVjb3Jkc1xuICAgKi9cbiAgdXBkYXRlOiBDb25uZWN0aW9uPFM+Wyd1cGRhdGUnXSA9IHVwZGF0ZTtcbiAgX3VwZGF0ZVNpbmdsZSA9IF91cGRhdGVTaW5nbGU7XG4gIF91cGRhdGVQYXJhbGxlbCA9IF91cGRhdGVQYXJhbGxlbDtcbiAgX3VwZGF0ZU1hbnkgPSBfdXBkYXRlTWFueTtcblxuICAvKipcbiAgICogVXBzZXJ0IHJlY29yZHNcbiAgICovXG4gIHVwc2VydDogQ29ubmVjdGlvbjxTPlsndXBzZXJ0J10gPSB1cHNlcnQ7XG5cbiAgLyoqXG4gICAqIERlbGV0ZSByZWNvcmRzXG4gICAqL1xuICBkZXN0cm95OiBDb25uZWN0aW9uPFM+WydkZXN0cm95J10gPSBkZXN0cm95O1xuICBfZGVzdHJveVNpbmdsZSA9IF9kZXN0cm95U2luZ2xlO1xuICBfZGVzdHJveVBhcmFsbGVsID0gX2Rlc3Ryb3lQYXJhbGxlbDtcbiAgX2Rlc3Ryb3lNYW55ID0gX2Rlc3Ryb3lNYW55O1xuXG4gIC8qKlxuICAgKiBTeW5vbnltIG9mIFRvb2xpbmcjZGVzdHJveSgpXG4gICAqL1xuICBkZWxldGUgPSBkZXN0cm95O1xuXG4gIC8qKlxuICAgKiBTeW5vbnltIG9mIFRvb2xpbmcjZGVzdHJveSgpXG4gICAqL1xuICBkZWwgPSBkZXN0cm95O1xuXG4gIGNhY2hlID0gbmV3IENhY2hlKCk7XG5cbiAgLyoqXG4gICAqIERlc2NyaWJlIFNPYmplY3QgbWV0YWRhdGFcbiAgICovXG4gIGRlc2NyaWJlID0gdGhpcy5jYWNoZS5jcmVhdGVDYWNoZWRGdW5jdGlvbihkZXNjcmliZSwgdGhpcywge1xuICAgIGtleTogZGVzY3JpYmVDYWNoZUtleSxcbiAgICBzdHJhdGVneTogJ05PQ0FDSEUnLFxuICB9KTtcbiAgZGVzY3JpYmUkID0gdGhpcy5jYWNoZS5jcmVhdGVDYWNoZWRGdW5jdGlvbihkZXNjcmliZSwgdGhpcywge1xuICAgIGtleTogZGVzY3JpYmVDYWNoZUtleSxcbiAgICBzdHJhdGVneTogJ0hJVCcsXG4gIH0pO1xuICBkZXNjcmliZSQkID0gKHRoaXMuY2FjaGUuY3JlYXRlQ2FjaGVkRnVuY3Rpb24oZGVzY3JpYmUsIHRoaXMsIHtcbiAgICBrZXk6IGRlc2NyaWJlQ2FjaGVLZXksXG4gICAgc3RyYXRlZ3k6ICdJTU1FRElBVEUnLFxuICB9KSBhcyB1bmtub3duKSBhcyBDYWNoZWRGdW5jdGlvbjwobmFtZTogc3RyaW5nKSA9PiBEZXNjcmliZVNPYmplY3RSZXN1bHQ+O1xuXG4gIC8qKlxuICAgKiBTeW5vbnltIG9mIFRvb2xpbmcjZGVzY3JpYmUoKVxuICAgKi9cbiAgZGVzY3JpYmVTT2JqZWN0ID0gdGhpcy5kZXNjcmliZTtcbiAgZGVzY3JpYmVTT2JqZWN0JCA9IHRoaXMuZGVzY3JpYmUkO1xuICBkZXNjcmliZVNPYmplY3QkJCA9IHRoaXMuZGVzY3JpYmUkJDtcblxuICAvKipcbiAgICogRGVzY3JpYmUgZ2xvYmFsIFNPYmplY3RzXG4gICAqL1xuICBkZXNjcmliZUdsb2JhbCA9IHRoaXMuY2FjaGUuY3JlYXRlQ2FjaGVkRnVuY3Rpb24oZGVzY3JpYmVHbG9iYWwsIHRoaXMsIHtcbiAgICBrZXk6ICdkZXNjcmliZUdsb2JhbCcsXG4gICAgc3RyYXRlZ3k6ICdOT0NBQ0hFJyxcbiAgfSk7XG4gIGRlc2NyaWJlR2xvYmFsJCA9IHRoaXMuY2FjaGUuY3JlYXRlQ2FjaGVkRnVuY3Rpb24oZGVzY3JpYmVHbG9iYWwsIHRoaXMsIHtcbiAgICBrZXk6ICdkZXNjcmliZUdsb2JhbCcsXG4gICAgc3RyYXRlZ3k6ICdISVQnLFxuICB9KTtcbiAgZGVzY3JpYmVHbG9iYWwkJCA9ICh0aGlzLmNhY2hlLmNyZWF0ZUNhY2hlZEZ1bmN0aW9uKGRlc2NyaWJlR2xvYmFsLCB0aGlzLCB7XG4gICAga2V5OiAnZGVzY3JpYmVHbG9iYWwnLFxuICAgIHN0cmF0ZWd5OiAnSU1NRURJQVRFJyxcbiAgfSkgYXMgdW5rbm93bikgYXMgQ2FjaGVkRnVuY3Rpb248KG5hbWU6IHN0cmluZykgPT4gRGVzY3JpYmVHbG9iYWxSZXN1bHQ+O1xuXG4gIC8qKlxuICAgKiBHZXQgU09iamVjdCBpbnN0YW5jZVxuICAgKi9cbiAgc29iamVjdDogQ29ubmVjdGlvbjxTPlsnc29iamVjdCddID0gc29iamVjdDtcblxuICBzb2JqZWN0czogeyBbTiBpbiBTT2JqZWN0TmFtZXM8Uz5dPzogU09iamVjdDxTLCBOPiB9ID0ge307XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25uOiBDb25uZWN0aW9uPFM+KSB7XG4gICAgdGhpcy5fY29ubiA9IGNvbm47XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9lc3RhYmxpc2goKSB7XG4gICAgdGhpcy5zb2JqZWN0cyA9IHt9O1xuICAgIHRoaXMuY2FjaGUuY2xlYXIoKTtcbiAgICB0aGlzLmNhY2hlLmdldCgnZGVzY3JpYmVHbG9iYWwnKS5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3ZhbHVlJyk7XG4gICAgdGhpcy5jYWNoZS5nZXQoJ2Rlc2NyaWJlR2xvYmFsJykub24oJ3ZhbHVlJywgKHJlcykgPT4ge1xuICAgICAgaWYgKHJlcy5yZXN1bHQpIHtcbiAgICAgICAgZm9yIChjb25zdCB7IG5hbWU6IHR5cGUgfSBvZiByZXMucmVzdWx0LnNvYmplY3RzKSB7XG4gICAgICAgICAgdGhpcy5zb2JqZWN0KHR5cGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9iYXNlVXJsKCkge1xuICAgIHJldHVybiB0aGlzLl9jb25uLl9iYXNlVXJsKCkgKyAnL3Rvb2xpbmcnO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc3VwcG9ydHMoZmVhdHVyZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Nvbm4uX3N1cHBvcnRzKGZlYXR1cmUpO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICByZXF1ZXN0PFIgPSB1bmtub3duPihyZXF1ZXN0OiBzdHJpbmcgfCBIdHRwUmVxdWVzdCwgb3B0aW9ucz86IE9iamVjdCkge1xuICAgIHJldHVybiB0aGlzLl9jb25uLnJlcXVlc3Q8Uj4ocmVxdWVzdCwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZXMgQXBleCBjb2RlIGFub255bW91c2x5XG4gICAqL1xuICBleGVjdXRlQW5vbnltb3VzKGJvZHk6IHN0cmluZykge1xuICAgIGNvbnN0IHVybCA9XG4gICAgICB0aGlzLl9iYXNlVXJsKCkgK1xuICAgICAgJy9leGVjdXRlQW5vbnltb3VzP2Fub255bW91c0JvZHk9JyArXG4gICAgICBlbmNvZGVVUklDb21wb25lbnQoYm9keSk7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdDxFeGVjdXRlQW5vbnltb3VzUmVzdWx0Pih1cmwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIEFwZXggdGVzdHMgYXN5bmNocm9ub3VzbHlcbiAgICovXG4gIHJ1blRlc3RzQXN5bmNocm9ub3VzKHJlcTogUnVuVGVzdHNBc3luY1JlcXVlc3QpIHtcbiAgICBjb25zdCB1cmwgPSB0aGlzLl9iYXNlVXJsKCkgKyAnL3J1blRlc3RzQXN5bmNocm9ub3VzLyc7XG4gICAgcmV0dXJuIHRoaXMuX2Nvbm4ucmVxdWVzdFBvc3Q8c3RyaW5nIHwgbnVsbD4odXJsLCByZXEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIEFwZXggdGVzdHMgc3luY2hyb25vdXNseVxuICAgKi9cbiAgcnVuVGVzdHNTeW5jaHJvbm91cyhyZXE6IFJ1blRlc3RzUmVxdWVzdCkge1xuICAgIGNvbnN0IHVybCA9IHRoaXMuX2Jhc2VVcmwoKSArICcvcnVuVGVzdHNTeW5jaHJvbm91cy8nO1xuICAgIHJldHVybiB0aGlzLl9jb25uLnJlcXVlc3RQb3N0PFJ1blRlc3RzUmVzdWx0IHwgbnVsbD4odXJsLCByZXEpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhdmFpbGFibGUgY29kZSBjb21wbGV0aW9ucyBvZiB0aGUgcmVmZXJlbmNlZCB0eXBlXG4gICAqL1xuICBjb21wbGV0aW9ucyh0eXBlOiAnYXBleCcgfCAndmlzdWFsZm9yY2UnID0gJ2FwZXgnKSB7XG4gICAgY29uc3QgdXJsID1cbiAgICAgIHRoaXMuX2Jhc2VVcmwoKSArICcvY29tcGxldGlvbnM/dHlwZT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHR5cGUpO1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3Q8Q29tcGxldGlvbnNSZXN1bHQ+KHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICB1cmwsXG4gICAgICBoZWFkZXJzOiB7IEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgfSk7XG4gIH1cbn1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKlxuICogUmVnaXN0ZXIgaG9vayBpbiBjb25uZWN0aW9uIGluc3RhbnRpYXRpb24gZm9yIGR5bmFtaWNhbGx5IGFkZGluZyB0aGlzIEFQSSBtb2R1bGUgZmVhdHVyZXNcbiAqL1xucmVnaXN0ZXJNb2R1bGUoJ3Rvb2xpbmcnLCAoY29ubikgPT4gbmV3IFRvb2xpbmcoY29ubikpO1xuXG5leHBvcnQgZGVmYXVsdCBUb29saW5nO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0EsY0FBYyxRQUFRLFlBQVk7QUFDM0MsT0FBT0MsVUFBVSxNQUFNLGVBQWU7QUFDdEMsT0FBT0MsS0FBSyxNQUEwQixVQUFVOztBQVVoRDtBQUNBO0FBQ0E7O0FBdUtBO0FBQ0E7QUFDQTtBQUNBLE1BQU07RUFDSkMsS0FBSztFQUNMQyxTQUFTO0VBQ1RDLGNBQWM7RUFDZEMsTUFBTTtFQUNOQyxhQUFhO0VBQ2JDLFdBQVc7RUFDWEMsZUFBZTtFQUNmQyxRQUFRO0VBQ1JDLGVBQWU7RUFDZkMsaUJBQWlCO0VBQ2pCQyxhQUFhO0VBQ2JDLE1BQU07RUFDTkMsYUFBYTtFQUNiQyxlQUFlO0VBQ2ZDLFdBQVc7RUFDWEMsTUFBTTtFQUNOQyxPQUFPO0VBQ1BDLGNBQWM7RUFDZEMsZ0JBQWdCO0VBQ2hCQyxZQUFZO0VBQ1pDLFFBQVE7RUFDUkMsY0FBYztFQUNkQztBQUNGLENBQUMsR0FBR3hCLFVBQVUsQ0FBQ3lCLFNBQVM7QUFFeEIsTUFBTUMsZ0JBQWdCLEdBQUlDLElBQWEsSUFDckNBLElBQUksR0FB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