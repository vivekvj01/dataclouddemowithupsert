import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import "core-js/modules/es.array.iterator";
import "core-js/modules/es.promise";
import _keysInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/keys";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source), true)).call(_context2, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source))).call(_context3, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
import fetch from 'node-fetch';
import AbortController from 'abort-controller';
import createHttpsProxyAgent from 'https-proxy-agent';
import { createHttpRequestHandlerStreams, executeWithTimeout, isRedirect, performRedirectRequest } from './request-helper';
/**
 *
 */
let defaults = {};

/**
 *
 */
export function setDefaults(defaults_) {
  defaults = defaults_;
}

/**
 *
 */
async function startFetchRequest(request, options, input, output, emitter, counter = 0) {
  const {
    httpProxy,
    followRedirect
  } = options;
  const agent = httpProxy ? createHttpsProxyAgent(httpProxy) : undefined;
  const {
      url,
      body
    } = request,
    rrequest = _objectWithoutProperties(request, ["url", "body"]);
  const controller = new AbortController();
  let res;
  try {
    res = await executeWithTimeout(() => fetch(url, _objectSpread(_objectSpread(_objectSpread({}, rrequest), input && /^(post|put|patch)$/i.test(request.method) ? {
      body: input
    } : {}), {}, {
      redirect: 'manual',
      signal: controller.signal,
      agent
    })), options.timeout, () => controller.abort());
  } catch (err) {
    emitter.emit('error', err);
    return;
  }
  const headers = {};
  for (const headerName of _keysInstanceProperty(_context = res.headers).call(_context)) {
    var _context;
    headers[headerName.toLowerCase()] = res.headers.get(headerName);
  }
  const response = {
    statusCode: res.status,
    headers
  };
  if (followRedirect && isRedirect(response.statusCode)) {
    try {
      performRedirectRequest(request, response, followRedirect, counter, req => startFetchRequest(req, options, undefined, output, emitter, counter + 1));
    } catch (err) {
      emitter.emit('error', err);
    }
    return;
  }
  emitter.emit('response', response);
  res.body.pipe(output);
}

/**
 *
 */
export default function request(req, options_ = {}) {
  const options = _objectSpread(_objectSpread({}, defaults), options_);
  const {
    input,
    output,
    stream
  } = createHttpRequestHandlerStreams(req, options);
  startFetchRequest(req, options, input, output, stream);
  return stream;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmZXRjaCIsIkFib3J0Q29udHJvbGxlciIsImNyZWF0ZUh0dHBzUHJveHlBZ2VudCIsImNyZWF0ZUh0dHBSZXF1ZXN0SGFuZGxlclN0cmVhbXMiLCJleGVjdXRlV2l0aFRpbWVvdXQiLCJpc1JlZGlyZWN0IiwicGVyZm9ybVJlZGlyZWN0UmVxdWVzdCIsImRlZmF1bHRzIiwic2V0RGVmYXVsdHMiLCJkZWZhdWx0c18iLCJzdGFydEZldGNoUmVxdWVzdCIsInJlcXVlc3QiLCJvcHRpb25zIiwiaW5wdXQiLCJvdXRwdXQiLCJlbWl0dGVyIiwiY291bnRlciIsImh0dHBQcm94eSIsImZvbGxvd1JlZGlyZWN0IiwiYWdlbnQiLCJ1bmRlZmluZWQiLCJ1cmwiLCJib2R5IiwicnJlcXVlc3QiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJjb250cm9sbGVyIiwicmVzIiwiX29iamVjdFNwcmVhZCIsInRlc3QiLCJtZXRob2QiLCJyZWRpcmVjdCIsInNpZ25hbCIsInRpbWVvdXQiLCJhYm9ydCIsImVyciIsImVtaXQiLCJoZWFkZXJzIiwiaGVhZGVyTmFtZSIsIl9rZXlzSW5zdGFuY2VQcm9wZXJ0eSIsIl9jb250ZXh0IiwiY2FsbCIsInRvTG93ZXJDYXNlIiwiZ2V0IiwicmVzcG9uc2UiLCJzdGF0dXNDb2RlIiwic3RhdHVzIiwicmVxIiwicGlwZSIsIm9wdGlvbnNfIiwic3RyZWFtIl0sInNvdXJjZXMiOlsiLi4vc3JjL3JlcXVlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7IER1cGxleCwgUmVhZGFibGUsIFdyaXRhYmxlIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCBmZXRjaCBmcm9tICdub2RlLWZldGNoJztcbmltcG9ydCBBYm9ydENvbnRyb2xsZXIgZnJvbSAnYWJvcnQtY29udHJvbGxlcic7XG5pbXBvcnQgY3JlYXRlSHR0cHNQcm94eUFnZW50IGZyb20gJ2h0dHBzLXByb3h5LWFnZW50JztcbmltcG9ydCB7XG4gIGNyZWF0ZUh0dHBSZXF1ZXN0SGFuZGxlclN0cmVhbXMsXG4gIGV4ZWN1dGVXaXRoVGltZW91dCxcbiAgaXNSZWRpcmVjdCxcbiAgcGVyZm9ybVJlZGlyZWN0UmVxdWVzdCxcbn0gZnJvbSAnLi9yZXF1ZXN0LWhlbHBlcic7XG5pbXBvcnQgeyBIdHRwUmVxdWVzdCwgSHR0cFJlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICpcbiAqL1xubGV0IGRlZmF1bHRzOiBIdHRwUmVxdWVzdE9wdGlvbnMgPSB7fTtcblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdHMoZGVmYXVsdHNfOiBIdHRwUmVxdWVzdE9wdGlvbnMpIHtcbiAgZGVmYXVsdHMgPSBkZWZhdWx0c187XG59XG5cbi8qKlxuICpcbiAqL1xuYXN5bmMgZnVuY3Rpb24gc3RhcnRGZXRjaFJlcXVlc3QoXG4gIHJlcXVlc3Q6IEh0dHBSZXF1ZXN0LFxuICBvcHRpb25zOiBIdHRwUmVxdWVzdE9wdGlvbnMsXG4gIGlucHV0OiBSZWFkYWJsZSB8IHVuZGVmaW5lZCxcbiAgb3V0cHV0OiBXcml0YWJsZSxcbiAgZW1pdHRlcjogRXZlbnRFbWl0dGVyLFxuICBjb3VudGVyOiBudW1iZXIgPSAwLFxuKSB7XG4gIGNvbnN0IHsgaHR0cFByb3h5LCBmb2xsb3dSZWRpcmVjdCB9ID0gb3B0aW9ucztcbiAgY29uc3QgYWdlbnQgPSBodHRwUHJveHkgPyBjcmVhdGVIdHRwc1Byb3h5QWdlbnQoaHR0cFByb3h5KSA6IHVuZGVmaW5lZDtcbiAgY29uc3QgeyB1cmwsIGJvZHksIC4uLnJyZXF1ZXN0IH0gPSByZXF1ZXN0O1xuICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICBsZXQgcmVzO1xuICB0cnkge1xuICAgIHJlcyA9IGF3YWl0IGV4ZWN1dGVXaXRoVGltZW91dChcbiAgICAgICgpID0+XG4gICAgICAgIGZldGNoKHVybCwge1xuICAgICAgICAgIC4uLnJyZXF1ZXN0LFxuICAgICAgICAgIC4uLihpbnB1dCAmJiAvXihwb3N0fHB1dHxwYXRjaCkkL2kudGVzdChyZXF1ZXN0Lm1ldGhvZClcbiAgICAgICAgICAgID8geyBib2R5OiBpbnB1dCB9XG4gICAgICAgICAgICA6IHt9KSxcbiAgICAgICAgICByZWRpcmVjdDogJ21hbnVhbCcsXG4gICAgICAgICAgc2lnbmFsOiBjb250cm9sbGVyLnNpZ25hbCxcbiAgICAgICAgICBhZ2VudCxcbiAgICAgICAgfSksXG4gICAgICBvcHRpb25zLnRpbWVvdXQsXG4gICAgICAoKSA9PiBjb250cm9sbGVyLmFib3J0KCksXG4gICAgKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZW1pdHRlci5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGhlYWRlcnM6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPSB7fTtcbiAgZm9yIChjb25zdCBoZWFkZXJOYW1lIG9mIHJlcy5oZWFkZXJzLmtleXMoKSkge1xuICAgIGhlYWRlcnNbaGVhZGVyTmFtZS50b0xvd2VyQ2FzZSgpXSA9IHJlcy5oZWFkZXJzLmdldChoZWFkZXJOYW1lKTtcbiAgfVxuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICBzdGF0dXNDb2RlOiByZXMuc3RhdHVzLFxuICAgIGhlYWRlcnMsXG4gIH07XG4gIGlmIChmb2xsb3dSZWRpcmVjdCAmJiBpc1JlZGlyZWN0KHJlc3BvbnNlLnN0YXR1c0NvZGUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIHBlcmZvcm1SZWRpcmVjdFJlcXVlc3QoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIHJlc3BvbnNlLFxuICAgICAgICBmb2xsb3dSZWRpcmVjdCxcbiAgICAgICAgY291bnRlcixcbiAgICAgICAgKHJlcSkgPT5cbiAgICAgICAgICBzdGFydEZldGNoUmVxdWVzdChcbiAgICAgICAgICAgIHJlcSxcbiAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdXRwdXQsXG4gICAgICAgICAgICBlbWl0dGVyLFxuICAgICAgICAgICAgY291bnRlciArIDEsXG4gICAgICAgICAgKSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBlbWl0dGVyLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGVtaXR0ZXIuZW1pdCgncmVzcG9uc2UnLCByZXNwb25zZSk7XG4gIHJlcy5ib2R5LnBpcGUob3V0cHV0KTtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1ZXN0KFxuICByZXE6IEh0dHBSZXF1ZXN0LFxuICBvcHRpb25zXzogSHR0cFJlcXVlc3RPcHRpb25zID0ge30sXG4pOiBEdXBsZXgge1xuICBjb25zdCBvcHRpb25zID0geyAuLi5kZWZhdWx0cywgLi4ub3B0aW9uc18gfTtcbiAgY29uc3QgeyBpbnB1dCwgb3V0cHV0LCBzdHJlYW0gfSA9IGNyZWF0ZUh0dHBSZXF1ZXN0SGFuZGxlclN0cmVhbXMoXG4gICAgcmVxLFxuICAgIG9wdGlvbnMsXG4gICk7XG4gIHN0YXJ0RmV0Y2hSZXF1ZXN0KHJlcSwgb3B0aW9ucywgaW5wdXQsIG91dHB1dCwgc3RyZWFtKTtcbiAgcmV0dXJuIHN0cmVhbTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLFlBQVk7QUFDOUIsT0FBT0MsZUFBZSxNQUFNLGtCQUFrQjtBQUM5QyxPQUFPQyxxQkFBcUIsTUFBTSxtQkFBbUI7QUFDckQsU0FDRUMsK0JBQStCLEVBQy9CQyxrQkFBa0IsRUFDbEJDLFVBQVUsRUFDVkMsc0JBQXNCLFFBQ2pCLGtCQUFrQjtBQUd6QjtBQUNBO0FBQ0E7QUFDQSxJQUFJQyxRQUE0QixHQUFHLENBQUMsQ0FBQzs7QUFFckM7QUFDQTtBQUNBO0FBQ0EsT0FBTyxTQUFTQyxXQUFXQSxDQUFDQyxTQUE2QixFQUFF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