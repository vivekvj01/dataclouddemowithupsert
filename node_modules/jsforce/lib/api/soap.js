"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _Object$defineProperties = require("@babel/runtime-corejs3/core-js-stable/object/define-properties");
var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors");
var _forEachInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/for-each");
var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");
var _filterInstanceProperty2 = require("@babel/runtime-corejs3/core-js-stable/instance/filter");
var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols");
var _Object$keys2 = require("@babel/runtime-corejs3/core-js-stable/object/keys");
require("core-js/modules/es.array.iterator");
require("core-js/modules/es.promise");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SoapApi = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));
var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));
var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/objectWithoutProperties"));
var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));
var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));
var _jsforce = require("../jsforce");
var _soap = _interopRequireDefault(require("../soap"));
var _schema = require("./soap/schema");
function ownKeys(object, enumerableOnly) { var keys = _Object$keys2(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty2(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source), true)).call(_context3, function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context4; _forEachInstanceProperty(_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; } /**
file Salesforce SOAP API
author Shinichi Tomita <shinichi.tomita@gmail.com>

/**
 *
 */
function toSoapRecord(records) {
  var _context;
  return (0, _map.default)(_context = (0, _isArray.default)(records) ? records : [records]).call(_context, record => {
    var _context2;
    const {
        type,
        attributes
      } = record,
      rec = (0, _objectWithoutProperties2.default)(record, ["type", "attributes"]);
    const t = type || (attributes === null || attributes === void 0 ? void 0 : attributes.type);
    if (!t) {
      throw new Error('Given record is not including sObject type information');
    }
    const fieldsToNull = (0, _filter.default)(_context2 = (0, _keys.default)(rec)).call(_context2, field => record[field] === null);
    for (const field of fieldsToNull) {
      delete rec[field];
    }
    return fieldsToNull.length > 0 ? _objectSpread({
      type: t,
      fieldsToNull
    }, rec) : _objectSpread({
      type: t
    }, rec);
  });
}

/**
 * API class for Partner SOAP call
 */
class SoapApi {
  constructor(conn) {
    (0, _defineProperty2.default)(this, "_conn", void 0);
    this._conn = conn;
  }

  /**
   * Call SOAP Api (Partner) endpoint
   * @private
   */
  async _invoke(method, message, schema) {
    const soapEndpoint = new _soap.default(this._conn, {
      xmlns: 'urn:partner.soap.sforce.com',
      endpointUrl: `${this._conn.instanceUrl}/services/Soap/u/${this._conn.version}`
    });
    const res = await soapEndpoint.invoke(method, message, schema ? {
      result: schema
    } : undefined, _schema.ApiSchemas);
    return res.result;
  }

  /**
   * Converts a Lead into an Account, Contact, or (optionally) an Opportunity.
   */

  async convertLead(leadConverts) {
    const schema = (0, _isArray.default)(leadConverts) ? [_schema.ApiSchemas.LeadConvertResult] : _schema.ApiSchemas.LeadConvertResult;
    return this._invoke('convertLead', {
      leadConverts
    }, schema);
  }

  /**
   * Merge up to three records into one
   */

  async merge(mergeRequests) {
    const schema = (0, _isArray.default)(mergeRequests) ? [_schema.ApiSchemas.MergeResult] : _schema.ApiSchemas.MergeResult;
    return this._invoke('merge', {
      mergeRequests
    }, schema);
  }

  /**
   * Delete records from the recycle bin immediately
   */
  async emptyRecycleBin(ids) {
    return this._invoke('emptyRecycleBin', {
      ids
    }, [_schema.ApiSchemas.EmptyRecycleBinResult]);
  }

  /**
   * Returns information about the standard and custom apps available to the logged-in user
   */
  async describeTabs() {
    return this._invoke('describeTabs', {}, [_schema.ApiSchemas.DescribeTabSetResult]);
  }

  /**
   * Retrieves the current system timestamp (Coordinated Universal Time (UTC) time zone) from the API
   */
  async getServerTimestamp() {
    return this._invoke('getServerTimestamp', {}, _schema.ApiSchemas.GetServerTimestampResult);
  }

  /**
   * Retrieves personal information for the user associated with the current session
   */
  async getUserInfo() {
    return this._invoke('getUserInfo', {}, _schema.ApiSchemas.GetUserInfoResult);
  }

  /**
   * Sets the specified user’s password to the specified value
   */
  setPassword(userId, password) {
    return this._invoke('setPassword', {
      userId,
      password
    }, 'string');
  }

  /**
   * Resets the specified user’s password
   */
  resetPassword(userId) {
    return this._invoke('resetPassword', {
      userId
    }, _schema.ApiSchemas.ResetPasswordResult);
  }

  /**
   * Adds one or more new records to your organization’s data
   */

  create(sObjects) {
    const schema = (0, _isArray.default)(sObjects) ? [_schema.ApiSchemas.SaveResult] : _schema.ApiSchemas.SaveResult;
    const args = {
      '@xmlns': 'urn:partner.soap.sforce.com',
      '@xmlns:ns1': 'sobject.partner.soap.sforce.com',
      'ns1:sObjects': toSoapRecord(sObjects)
    };
    return this._invoke('create', args, schema);
  }

  /**
   * Updates one or more existing records in your organization’s data.
   */

  update(sObjects) {
    const schema = (0, _isArray.default)(sObjects) ? [_schema.ApiSchemas.SaveResult] : _schema.ApiSchemas.SaveResult;
    const args = {
      '@xmlns': 'urn:partner.soap.sforce.com',
      '@xmlns:ns1': 'sobject.partner.soap.sforce.com',
      'ns1:sObjects': toSoapRecord(sObjects)
    };
    return this._invoke('update', args, schema);
  }

  /**
   * Creates new records and updates existing records in your organization’s data.
   */

  upsert(externalIdFieldName, sObjects) {
    const schema = (0, _isArray.default)(sObjects) ? [_schema.ApiSchemas.UpsertResult] : _schema.ApiSchemas.UpsertResult;
    const args = {
      '@xmlns': 'urn:partner.soap.sforce.com',
      '@xmlns:ns1': 'sobject.partner.soap.sforce.com',
      'ns1:externalIDFieldName': externalIdFieldName,
      'ns1:sObjects': toSoapRecord(sObjects)
    };
    return this._invoke('upsert', args, schema);
  }

  /**
   * Deletes one or more records from your organization’s data
   */

  delete(ids) {
    const schema = (0, _isArray.default)(ids) ? [_schema.ApiSchemas.DeleteResult] : _schema.ApiSchemas.DeleteResult;
    const args = {
      '@xmlns': 'urn:partner.soap.sforce.com',
      '@xmlns:ns1': 'sobject.partner.soap.sforce.com',
      'ns1:ids': ids
    };
    return this._invoke('delete', args, schema);
  }
}

/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
exports.SoapApi = SoapApi;
(0, _jsforce.registerModule)('soap', conn => new SoapApi(conn));
var _default = SoapApi;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,