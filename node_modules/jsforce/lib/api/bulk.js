"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _Object$defineProperties = require("@babel/runtime-corejs3/core-js-stable/object/define-properties");
var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors");
var _forEachInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/for-each");
var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");
var _filterInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/filter");
var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols");
var _Object$keys2 = require("@babel/runtime-corejs3/core-js-stable/object/keys");
require("core-js/modules/es.array.iterator");
require("core-js/modules/es.promise");
require("core-js/modules/es.string.replace");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IngestJobV2 = exports.QueryJobV2 = exports.BulkV2 = exports.Bulk = exports.Batch = exports.Job = void 0;
var _weakMap = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/weak-map"));
var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));
var _now = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/date/now"));
var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/json/stringify"));
var _classPrivateFieldGet3 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classPrivateFieldGet"));
var _classPrivateFieldSet2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classPrivateFieldSet"));
var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));
var _setTimeout2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set-timeout"));
var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/parse-int"));
var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/objectWithoutProperties"));
var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));
var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));
var _trim = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/trim"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));
var _events = require("events");
var _stream = require("stream");
var _multistream = _interopRequireDefault(require("multistream"));
var _recordStream = require("../record-stream");
var _httpApi = _interopRequireDefault(require("../http-api"));
var _jsforce = require("../jsforce");
var _stream2 = require("../util/stream");
var _function = require("../util/function");
function ownKeys(object, enumerableOnly) { var keys = _Object$keys2(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context5; _forEachInstanceProperty(_context5 = ownKeys(Object(source), true)).call(_context5, function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context6; _forEachInstanceProperty(_context6 = ownKeys(Object(source))).call(_context6, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; } /**
file Manages Salesforce Bulk API related operations
author Shinichi Tomita <shinichi.tomita@gmail.com>

/*--------------------------------------------*/

/**
 * Class for Bulk API Job
 */
class Job extends _events.EventEmitter {
  /**
   *
   */
  constructor(bulk, type, operation, options, jobId) {
    super();
    (0, _defineProperty2.default)(this, "type", void 0);
    (0, _defineProperty2.default)(this, "operation", void 0);
    (0, _defineProperty2.default)(this, "options", void 0);
    (0, _defineProperty2.default)(this, "id", void 0);
    (0, _defineProperty2.default)(this, "state", void 0);
    (0, _defineProperty2.default)(this, "_bulk", void 0);
    (0, _defineProperty2.default)(this, "_batches", void 0);
    (0, _defineProperty2.default)(this, "_jobInfo", void 0);
    (0, _defineProperty2.default)(this, "_error", void 0);
    this._bulk = bulk;
    this.type = type;
    this.operation = operation;
    this.options = options || {};
    this.id = jobId !== null && jobId !== void 0 ? jobId : null;
    this.state = this.id ? 'Open' : 'Unknown';
    this._batches = {};
    // default error handler to keep the latest error
    this.on('error', error => this._error = error);
  }

  /**
   * Return latest jobInfo from cache
   */
  info() {
    // if cache is not available, check the latest
    if (!this._jobInfo) {
      this._jobInfo = this.check();
    }
    return this._jobInfo;
  }

  /**
   * Open new job and get jobinfo
   */
  open() {
    const bulk = this._bulk;
    const options = this.options;

    // if sobject type / operation is not provided
    if (!this.type || !this.operation) {
      throw new Error('type / operation is required to open a new job');
    }

    // if not requested opening job
    if (!this._jobInfo) {
      var _context;
      let operation = this.operation.toLowerCase();
      if (operation === 'harddelete') {
        operation = 'hardDelete';
      }
      if (operation === 'queryall') {
        operation = 'queryAll';
      }
      const body = (0, _trim.default)(_context = `
<?xml version="1.0" encoding="UTF-8"?>
<jobInfo  xmlns="http://www.force.com/2009/06/asyncapi/dataload">
  <operation>${operation}</operation>
  <object>${this.type}</object>
  ${options.extIdField ? `<externalIdFieldName>${options.extIdField}</externalIdFieldName>` : ''}
  ${options.concurrencyMode ? `<concurrencyMode>${options.concurrencyMode}</concurrencyMode>` : ''}
  ${options.assignmentRuleId ? `<assignmentRuleId>${options.assignmentRuleId}</assignmentRuleId>` : ''}
  <contentType>CSV</contentType>
</jobInfo>
      `).call(_context);
      this._jobInfo = (async () => {
        try {
          const res = await bulk._request({
            method: 'POST',
            path: '/job',
            body,
            headers: {
              'Content-Type': 'application/xml; charset=utf-8'
            },
            responseType: 'application/xml'
          });
          this.emit('open', res.jobInfo);
          this.id = res.jobInfo.id;
          this.state = res.jobInfo.state;
          return res.jobInfo;
        } catch (err) {
          this.emit('error', err);
          throw err;
        }
      })();
    }
    return this._jobInfo;
  }

  /**
   * Create a new batch instance in the job
   */
  createBatch() {
    const batch = new Batch(this);
    batch.on('queue', () => {
      this._batches[batch.id] = batch;
    });
    return batch;
  }

  /**
   * Get a batch instance specified by given batch ID
   */
  batch(batchId) {
    let batch = this._batches[batchId];
    if (!batch) {
      batch = new Batch(this, batchId);
      this._batches[batchId] = batch;
    }
    return batch;
  }

  /**
   * Check the latest job status from server
   */
  check() {
    const bulk = this._bulk;
    const logger = bulk._logger;
    this._jobInfo = (async () => {
      const jobId = await this.ready();
      const res = await bulk._request({
        method: 'GET',
        path: '/job/' + jobId,
        responseType: 'application/xml'
      });
      logger.debug(res.jobInfo);
      this.id = res.jobInfo.id;
      this.type = res.jobInfo.object;
      this.operation = res.jobInfo.operation;
      this.state = res.jobInfo.state;
      return res.jobInfo;
    })();
    return this._jobInfo;
  }

  /**
   * Wait till the job is assigned to server
   */
  ready() {
    return this.id ? _promise.default.resolve(this.id) : this.open().then(({
      id
    }) => id);
  }

  /**
   * List all registered batch info in job
   */
  async list() {
    const bulk = this._bulk;
    const logger = bulk._logger;
    const jobId = await this.ready();
    const res = await bulk._request({
      method: 'GET',
      path: '/job/' + jobId + '/batch',
      responseType: 'application/xml'
    });
    logger.debug(res.batchInfoList.batchInfo);
    const batchInfoList = (0, _isArray.default)(res.batchInfoList.batchInfo) ? res.batchInfoList.batchInfo : [res.batchInfoList.batchInfo];
    return batchInfoList;
  }

  /**
   * Close opened job
   */
  async close() {
    if (!this.id) {
      return;
    }
    try {
      const jobInfo = await this._changeState('Closed');
      this.id = null;
      this.emit('close', jobInfo);
      return jobInfo;
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }

  /**
   * Set the status to abort
   */
  async abort() {
    if (!this.id) {
      return;
    }
    try {
      const jobInfo = await this._changeState('Aborted');
      this.id = null;
      this.emit('abort', jobInfo);
      return jobInfo;
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }

  /**
   * @private
   */
  async _changeState(state) {
    const bulk = this._bulk;
    const logger = bulk._logger;
    this._jobInfo = (async () => {
      var _context2;
      const jobId = await this.ready();
      const body = (0, _trim.default)(_context2 = ` 
<?xml version="1.0" encoding="UTF-8"?>
  <jobInfo xmlns="http://www.force.com/2009/06/asyncapi/dataload">
  <state>${state}</state>
</jobInfo>
      `).call(_context2);
      const res = await bulk._request({
        method: 'POST',
        path: '/job/' + jobId,
        body: body,
        headers: {
          'Content-Type': 'application/xml; charset=utf-8'
        },
        responseType: 'application/xml'
      });
      logger.debug(res.jobInfo);
      this.state = res.jobInfo.state;
      return res.jobInfo;
    })();
    return this._jobInfo;
  }
}

/*--------------------------------------------*/
exports.Job = Job;
class PollingTimeoutError extends Error {
  /**
   *
   */
  constructor(message, jobId, batchId) {
    super(message);
    (0, _defineProperty2.default)(this, "jobId", void 0);
    (0, _defineProperty2.default)(this, "batchId", void 0);
    this.name = 'PollingTimeout';
    this.jobId = jobId;
    this.batchId = batchId;
  }
}
class JobPollingTimeoutError extends Error {
  /**
   *
   */
  constructor(message, jobId) {
    super(message);
    (0, _defineProperty2.default)(this, "jobId", void 0);
    this.name = 'JobPollingTimeout';
    this.jobId = jobId;
  }
}

/*--------------------------------------------*/
/**
 * Batch (extends Writable)
 */
class Batch extends _stream.Writable {
  /**
   *
   */
  constructor(job, id) {
    super({
      objectMode: true
    });
    (0, _defineProperty2.default)(this, "job", void 0);
    (0, _defineProperty2.default)(this, "id", void 0);
    (0, _defineProperty2.default)(this, "_bulk", void 0);
    (0, _defineProperty2.default)(this, "_uploadStream", void 0);
    (0, _defineProperty2.default)(this, "_downloadStream", void 0);
    (0, _defineProperty2.default)(this, "_dataStream", void 0);
    (0, _defineProperty2.default)(this, "_result", void 0);
    (0, _defineProperty2.default)(this, "_error", void 0);
    (0, _defineProperty2.default)(this, "run", this.execute);
    (0, _defineProperty2.default)(this, "exec", this.execute);
    this.job = job;
    this.id = id;
    this._bulk = job._bulk;

    // default error handler to keep the latest error
    this.on('error', error => this._error = error);

    //
    // setup data streams
    //
    const converterOptions = {
      nullValue: '#N/A'
    };
    const uploadStream = this._uploadStream = new _recordStream.Serializable();
    const uploadDataStream = uploadStream.stream('csv', converterOptions);
    const downloadStream = this._downloadStream = new _recordStream.Parsable();
    const downloadDataStream = downloadStream.stream('csv', converterOptions);
    this.on('finish', () => uploadStream.end());
    uploadDataStream.once('readable', async () => {
      try {
        // ensure the job is opened in server or job id is already assigned
        await this.job.ready();
        // pipe upload data to batch API request stream
        uploadDataStream.pipe(this._createRequestStream());
      } catch (err) {
        this.emit('error', err);
      }
    });

    // duplex data stream, opened access to API programmers by Batch#stream()
    this._dataStream = (0, _stream2.concatStreamsAsDuplex)(uploadDataStream, downloadDataStream);
  }

  /**
   * Connect batch API and create stream instance of request/response
   *
   * @private
   */
  _createRequestStream() {
    const bulk = this._bulk;
    const logger = bulk._logger;
    const req = bulk._request({
      method: 'POST',
      path: '/job/' + this.job.id + '/batch',
      headers: {
        'Content-Type': 'text/csv'
      },
      responseType: 'application/xml'
    });
    (async () => {
      try {
        const res = await req;
        logger.debug(res.batchInfo);
        this.id = res.batchInfo.id;
        this.emit('queue', res.batchInfo);
      } catch (err) {
        this.emit('error', err);
      }
    })();
    return req.stream();
  }

  /**
   * Implementation of Writable
   */
  _write(record_, enc, cb) {
    const {
        Id,
        type,
        attributes
      } = record_,
      rrec = (0, _objectWithoutProperties2.default)(record_, ["Id", "type", "attributes"]);
    let record;
    switch (this.job.operation) {
      case 'insert':
        record = rrec;
        break;
      case 'delete':
      case 'hardDelete':
        record = {
          Id
        };
        break;
      default:
        record = _objectSpread({
          Id
        }, rrec);
    }
    this._uploadStream.write(record, enc, cb);
  }

  /**
   * Returns duplex stream which accepts CSV data input and batch result output
   */
  stream() {
    return this._dataStream;
  }

  /**
   * Execute batch operation
   */
  execute(input) {
    // if batch is already executed
    if (this._result) {
      throw new Error('Batch already executed.');
    }
    this._result = new _promise.default((resolve, reject) => {
      this.once('response', resolve);
      this.once('error', reject);
    });
    if ((0, _function.isObject)(input) && 'pipe' in input && (0, _function.isFunction)(input.pipe)) {
      // if input has stream.Readable interface
      input.pipe(this._dataStream);
    } else {
      if ((0, _isArray.default)(input)) {
        for (const record of input) {
          for (const key of (0, _keys.default)(record)) {
            if (typeof record[key] === 'boolean') {
              record[key] = String(record[key]);
            }
          }
          this.write(record);
        }
        this.end();
      } else if (typeof input === 'string') {
        this._dataStream.write(input, 'utf8');
        this._dataStream.end();
      }
    }

    // return Batch instance for chaining
    return this;
  }
  /**
   * Promise/A+ interface
   * Delegate to promise, return promise instance for batch result
   */
  then(onResolved, onReject) {
    if (!this._result) {
      this.execute();
    }
    return this._result.then(onResolved, onReject);
  }

  /**
   * Check the latest batch status in server
   */
  async check() {
    const bulk = this._bulk;
    const logger = bulk._logger;
    const jobId = this.job.id;
    const batchId = this.id;
    if (!jobId || !batchId) {
      throw new Error('Batch not started.');
    }
    const res = await bulk._request({
      method: 'GET',
      path: '/job/' + jobId + '/batch/' + batchId,
      responseType: 'application/xml'
    });
    logger.debug(res.batchInfo);
    return res.batchInfo;
  }

  /**
   * Polling the batch result and retrieve
   */
  poll(interval, timeout) {
    const jobId = this.job.id;
    const batchId = this.id;
    if (!jobId || !batchId) {
      throw new Error('Batch not started.');
    }
    const startTime = new Date().getTime();
    const poll = async () => {
      const now = new Date().getTime();
      if (startTime + timeout < now) {
        const err = new PollingTimeoutError('Polling time out. Job Id = ' + jobId + ' , batch Id = ' + batchId, jobId, batchId);
        this.emit('error', err);
        return;
      }
      let res;
      try {
        res = await this.check();
      } catch (err) {
        this.emit('error', err);
        return;
      }
      if (res.state === 'Failed') {
        if ((0, _parseInt2.default)(res.numberRecordsProcessed, 10) > 0) {
          this.retrieve();
        } else {
          this.emit('error', new Error(res.stateMessage));
        }
      } else if (res.state === 'Completed') {
        this.retrieve();
      } else {
        this.emit('progress', res);
        (0, _setTimeout2.default)(poll, interval);
      }
    };
    (0, _setTimeout2.default)(poll, interval);
  }

  /**
   * Retrieve batch result
   */
  async retrieve() {
    const bulk = this._bulk;
    const jobId = this.job.id;
    const job = this.job;
    const batchId = this.id;
    if (!jobId || !batchId) {
      throw new Error('Batch not started.');
    }
    try {
      const resp = await bulk._request({
        method: 'GET',
        path: '/job/' + jobId + '/batch/' + batchId + '/result'
      });
      let results;
      if (job.operation === 'query' || job.operation === 'queryAll') {
        var _context3;
        const res = resp;
        let resultId = res['result-list'].result;
        results = (0, _map.default)(_context3 = (0, _isArray.default)(resultId) ? resultId : [resultId]).call(_context3, id => ({
          id,
          batchId,
          jobId
        }));
      } else {
        const res = resp;
        results = (0, _map.default)(res).call(res, ret => ({
          id: ret.Id || null,
          success: ret.Success === 'true',
          errors: ret.Error ? [ret.Error] : []
        }));
      }
      this.emit('response', results);
      return results;
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }

  /**
   * Fetch query result as a record stream
   * @param {String} resultId - Result id
   * @returns {RecordStream} - Record stream, convertible to CSV data stream
   */
  result(resultId) {
    const jobId = this.job.id;
    const batchId = this.id;
    if (!jobId || !batchId) {
      throw new Error('Batch not started.');
    }
    const resultStream = new _recordStream.Parsable();
    const resultDataStream = resultStream.stream('csv');
    this._bulk._request({
      method: 'GET',
      path: '/job/' + jobId + '/batch/' + batchId + '/result/' + resultId,
      responseType: 'application/octet-stream'
    }).stream().pipe(resultDataStream);
    return resultStream;
  }
}

/*--------------------------------------------*/
/**
 *
 */
exports.Batch = Batch;
class BulkApi extends _httpApi.default {
  beforeSend(request) {
    var _this$_conn$accessTok;
    request.headers = _objectSpread(_objectSpread({}, request.headers), {}, {
      'X-SFDC-SESSION': (_this$_conn$accessTok = this._conn.accessToken) !== null && _this$_conn$accessTok !== void 0 ? _this$_conn$accessTok : ''
    });
  }
  isSessionExpired(response) {
    return response.statusCode === 400 && /<exceptionCode>InvalidSessionId<\/exceptionCode>/.test(response.body);
  }
  hasErrorInResponseBody(body) {
    return !!body.error;
  }
  parseError(body) {
    return {
      errorCode: body.error.exceptionCode,
      message: body.error.exceptionMessage
    };
  }
}
class BulkApiV2 extends _httpApi.default {
  hasErrorInResponseBody(body) {
    return (0, _isArray.default)(body) && typeof body[0] === 'object' && 'errorCode' in body[0];
  }
  isSessionExpired(response) {
    return response.statusCode === 401 && /INVALID_SESSION_ID/.test(response.body);
  }
  parseError(body) {
    return {
      errorCode: body[0].errorCode,
      message: body[0].message
    };
  }
}

/*--------------------------------------------*/

/**
 * Class for Bulk API
 *
 * @class
 */
class Bulk {
  /**
   * Polling interval in milliseconds
   */

  /**
   * Polling timeout in milliseconds
   * @type {Number}
   */

  /**
   *
   */
  constructor(conn) {
    (0, _defineProperty2.default)(this, "_conn", void 0);
    (0, _defineProperty2.default)(this, "_logger", void 0);
    (0, _defineProperty2.default)(this, "pollInterval", 1000);
    (0, _defineProperty2.default)(this, "pollTimeout", 10000);
    this._conn = conn;
    this._logger = conn._logger;
  }

  /**
   *
   */
  _request(request_) {
    const conn = this._conn;
    const {
        path,
        responseType
      } = request_,
      rreq = (0, _objectWithoutProperties2.default)(request_, ["path", "responseType"]);
    const baseUrl = [conn.instanceUrl, 'services/async', conn.version].join('/');
    const request = _objectSpread(_objectSpread({}, rreq), {}, {
      url: baseUrl + path
    });
    return new BulkApi(this._conn, {
      responseType
    }).request(request);
  }

  /**
   * Create and start bulkload job and batch
   */

  load(type, operation, optionsOrInput, input) {
    let options = {};
    if (typeof optionsOrInput === 'string' || (0, _isArray.default)(optionsOrInput) || (0, _function.isObject)(optionsOrInput) && 'pipe' in optionsOrInput && typeof optionsOrInput.pipe === 'function') {
      // when options is not plain hash object, it is omitted
      input = optionsOrInput;
    } else {
      options = optionsOrInput;
    }
    const job = this.createJob(type, operation, options);
    const batch = job.createBatch();
    const cleanup = () => job.close();
    const cleanupOnError = err => {
      if (err.name !== 'PollingTimeout') {
        cleanup();
      }
    };
    batch.on('response', cleanup);
    batch.on('error', cleanupOnError);
    batch.on('queue', () => {
      batch === null || batch === void 0 ? void 0 : batch.poll(this.pollInterval, this.pollTimeout);
    });
    return batch.execute(input);
  }

  /**
   * Execute bulk query and get record stream
   */
  query(soql) {
    const m = soql.replace(/\([\s\S]+\)/g, '').match(/FROM\s+(\w+)/i);
    if (!m) {
      throw new Error('No sobject type found in query, maybe caused by invalid SOQL.');
    }
    const type = m[1];
    const recordStream = new _recordStream.Parsable();
    const dataStream = recordStream.stream('csv');
    (async () => {
      try {
        const results = await this.load(type, 'query', soql);
        const streams = (0, _map.default)(results).call(results, result => this.job(result.jobId).batch(result.batchId).result(result.id).stream());
        (0, _multistream.default)(streams).pipe(dataStream);
      } catch (err) {
        recordStream.emit('error', err);
      }
    })();
    return recordStream;
  }

  /**
   * Create a new job instance
   */
  createJob(type, operation, options = {}) {
    return new Job(this, type, operation, options);
  }

  /**
   * Get a job instance specified by given job ID
   *
   * @param {String} jobId - Job ID
   * @returns {Bulk~Job}
   */
  job(jobId) {
    return new Job(this, null, null, null, jobId);
  }
}
exports.Bulk = Bulk;
var _connection = new _weakMap.default();
class BulkV2 {
  /**
   * Polling interval in milliseconds
   */

  /**
   * Polling timeout in milliseconds
   * @type {Number}
   */

  constructor(connection) {
    _connection.set(this, {
      writable: true,
      value: void 0
    });
    (0, _defineProperty2.default)(this, "pollInterval", 1000);
    (0, _defineProperty2.default)(this, "pollTimeout", 10000);
    (0, _classPrivateFieldSet2.default)(this, _connection, connection);
  }

  /**
   * Create an instance of an ingest job object.
   *
   * @params {NewIngestJobOptions} options object
   * @returns {IngestJobV2} An ingest job instance
   * @example
   * // Upsert records to the Account object.
   *
   * const job = connection.bulk2.createJob({
   *   operation: 'insert'
   *   object: 'Account',
   * });
   *
   * // create the job in the org
   * await job.open()
   *
   * // upload data
   * await job.uploadData(csvFile)
   *
   * // finished uploading data, mark it as ready for processing
   * await job.close()
   */
  createJob(options) {
    return new IngestJobV2({
      connection: (0, _classPrivateFieldGet3.default)(this, _connection),
      jobInfo: options,
      pollingOptions: this
    });
  }

  /**
   * Get a ingest job instance specified by a given job ID
   *
   * @param options Options object with a job ID
   * @returns IngestJobV2 An ingest job
   */
  job(options) {
    return new IngestJobV2({
      connection: (0, _classPrivateFieldGet3.default)(this, _connection),
      jobInfo: options,
      pollingOptions: this
    });
  }

  /**
   * Create, upload, and start bulkload job
   */
  async loadAndWaitForResults(options) {
    if (!options.pollTimeout) options.pollTimeout = this.pollTimeout;
    if (!options.pollInterval) options.pollInterval = this.pollInterval;
    const job = this.createJob(options);
    try {
      await job.open();
      await job.uploadData(options.input);
      await job.close();
      await job.poll(options.pollInterval, options.pollTimeout);
      return await job.getAllResults();
    } catch (err) {
      if (err.name !== 'JobPollingTimeoutError') {
        // fires off one last attempt to clean up and ignores the result | error
        job.delete().catch(ignored => ignored);
      }
      throw err;
    }
  }

  /**
   * Execute bulk query and get records
   *
   * Default timeout: 10000ms
   *
   * @param soql SOQL query
   * @param BulkV2PollingOptions options object
   *
   * @returns Record[]
   */
  async query(soql, options) {
    const queryJob = new QueryJobV2({
      connection: (0, _classPrivateFieldGet3.default)(this, _connection),
      operation: options !== null && options !== void 0 && options.scanAll ? 'queryAll' : 'query',
      query: soql,
      pollingOptions: this
    });
    try {
      await queryJob.open();
      await queryJob.poll(options === null || options === void 0 ? void 0 : options.pollInterval, options === null || options === void 0 ? void 0 : options.pollTimeout);
      return await queryJob.getResults();
    } catch (err) {
      if (err.name !== 'JobPollingTimeoutError') {
        // fires off one last attempt to clean up and ignores the result | error
        queryJob.delete().catch(ignored => ignored);
      }
      throw err;
    }
  }
}
exports.BulkV2 = BulkV2;
var _connection2 = new _weakMap.default();
var _operation = new _weakMap.default();
var _query = new _weakMap.default();
var _pollingOptions = new _weakMap.default();
var _queryResults = new _weakMap.default();
var _error = new _weakMap.default();
class QueryJobV2 extends _events.EventEmitter {
  constructor(options) {
    super();
    _connection2.set(this, {
      writable: true,
      value: void 0
    });
    _operation.set(this, {
      writable: true,
      value: void 0
    });
    _query.set(this, {
      writable: true,
      value: void 0
    });
    _pollingOptions.set(this, {
      writable: true,
      value: void 0
    });
    _queryResults.set(this, {
      writable: true,
      value: void 0
    });
    _error.set(this, {
      writable: true,
      value: void 0
    });
    (0, _defineProperty2.default)(this, "jobInfo", void 0);
    (0, _defineProperty2.default)(this, "locator", void 0);
    (0, _defineProperty2.default)(this, "finished", false);
    (0, _classPrivateFieldSet2.default)(this, _connection2, options.connection);
    (0, _classPrivateFieldSet2.default)(this, _operation, options.operation);
    (0, _classPrivateFieldSet2.default)(this, _query, options.query);
    (0, _classPrivateFieldSet2.default)(this, _pollingOptions, options.pollingOptions);
    // default error handler to keep the latest error
    this.on('error', error => (0, _classPrivateFieldSet2.default)(this, _error, error));
  }

  /**
   * Creates a query job
   */
  async open() {
    try {
      this.jobInfo = await this.createQueryRequest({
        method: 'POST',
        path: '',
        body: (0, _stringify.default)({
          operation: (0, _classPrivateFieldGet3.default)(this, _operation),
          query: (0, _classPrivateFieldGet3.default)(this, _query)
        }),
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        responseType: 'application/json'
      });
      this.emit('open');
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }

  /**
   * Set the status to abort
   */
  async abort() {
    try {
      var _this$jobInfo;
      const state = 'Aborted';
      this.jobInfo = await this.createQueryRequest({
        method: 'PATCH',
        path: `/${(_this$jobInfo = this.jobInfo) === null || _this$jobInfo === void 0 ? void 0 : _this$jobInfo.id}`,
        body: (0, _stringify.default)({
          state
        }),
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        responseType: 'application/json'
      });
      this.emit('aborted');
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }

  /**
   * Poll for the state of the processing for the job.
   *
   * This method will only throw after a timeout. To capture a
   * job failure while polling you must set a listener for the
   * `failed` event before calling it:
   *
   * job.on('failed', (err) => console.error(err))
   * await job.poll()
   *
   * @param interval Polling interval in milliseconds
   * @param timeout Polling timeout in milliseconds
   * @returns {Promise<Record[]>} A promise that resolves to an array of records
   */
  async poll(interval = (0, _classPrivateFieldGet3.default)(this, _pollingOptions).pollInterval, timeout = (0, _classPrivateFieldGet3.default)(this, _pollingOptions).pollTimeout) {
    const jobId = getJobIdOrError(this.jobInfo);
    const startTime = (0, _now.default)();
    while (startTime + timeout > (0, _now.default)()) {
      try {
        const res = await this.check();
        switch (res.state) {
          case 'Open':
            throw new Error('Job has not been started');
          case 'Aborted':
            throw new Error('Job has been aborted');
          case 'UploadComplete':
          case 'InProgress':
            await delay(interval);
            break;
          case 'Failed':
            // unlike ingest jobs, the API doesn't return an error msg:
            // https://developer.salesforce.com/docs/atlas.en-us.api_asynch.meta/api_asynch/query_get_one_job.htm
            this.emit('failed', new Error('Query job failed to complete.'));
            return;
          case 'JobComplete':
            this.emit('jobcomplete');
            return;
        }
      } catch (err) {
        this.emit('error', err);
        throw err;
      }
    }
    const timeoutError = new JobPollingTimeoutError(`Polling timed out after ${timeout}ms. Job Id = ${jobId}`, jobId);
    this.emit('error', timeoutError);
    throw timeoutError;
  }

  /**
   * Check the latest batch status in server
   */
  async check() {
    try {
      const jobInfo = await this.createQueryRequest({
        method: 'GET',
        path: `/${getJobIdOrError(this.jobInfo)}`,
        responseType: 'application/json'
      });
      this.jobInfo = jobInfo;
      return jobInfo;
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }
  request(request, options = {}) {
    // if request is simple string, regard it as url in GET method
    let request_ = typeof request === 'string' ? {
      method: 'GET',
      url: request
    } : request;
    const httpApi = new _httpApi.default((0, _classPrivateFieldGet3.default)(this, _connection2), options);
    httpApi.on('response', response => {
      this.locator = response.headers['sforce-locator'];
    });
    return httpApi.request(request_);
  }
  getResultsUrl() {
    const url = `${(0, _classPrivateFieldGet3.default)(this, _connection2).instanceUrl}/services/data/v${(0, _classPrivateFieldGet3.default)(this, _connection2).version}/jobs/query/${getJobIdOrError(this.jobInfo)}/results`;
    return this.locator ? `${url}?locator=${this.locator}` : url;
  }

  /**
   * Get the results for a query job.
   *
   * @returns {Promise<Record[]>} A promise that resolves to an array of records
   */
  async getResults() {
    if (this.finished && (0, _classPrivateFieldGet3.default)(this, _queryResults)) {
      return (0, _classPrivateFieldGet3.default)(this, _queryResults);
    }
    (0, _classPrivateFieldSet2.default)(this, _queryResults, []);
    while (this.locator !== 'null') {
      var _context4;
      const nextResults = await this.request({
        method: 'GET',
        url: this.getResultsUrl(),
        headers: {
          Accept: 'text/csv'
        }
      });
      (0, _classPrivateFieldSet2.default)(this, _queryResults, (0, _concat.default)(_context4 = (0, _classPrivateFieldGet3.default)(this, _queryResults)).call(_context4, nextResults));
    }
    this.finished = true;
    return (0, _classPrivateFieldGet3.default)(this, _queryResults);
  }

  /**
   * Deletes a query job.
   */
  async delete() {
    return this.createQueryRequest({
      method: 'DELETE',
      path: `/${getJobIdOrError(this.jobInfo)}`
    });
  }
  createQueryRequest(request) {
    const {
      path,
      responseType
    } = request;
    const baseUrl = [(0, _classPrivateFieldGet3.default)(this, _connection2).instanceUrl, 'services/data', `v${(0, _classPrivateFieldGet3.default)(this, _connection2).version}`, 'jobs/query'].join('/');
    return new BulkApiV2((0, _classPrivateFieldGet3.default)(this, _connection2), {
      responseType
    }).request(_objectSpread(_objectSpread({}, request), {}, {
      url: baseUrl + path
    }));
  }
}

/**
 * Class for Bulk API V2 Ingest Job
 */
exports.QueryJobV2 = QueryJobV2;
var _connection3 = new _weakMap.default();
var _pollingOptions2 = new _weakMap.default();
var _jobData = new _weakMap.default();
var _bulkJobSuccessfulResults = new _weakMap.default();
var _bulkJobFailedResults = new _weakMap.default();
var _bulkJobUnprocessedRecords = new _weakMap.default();
var _error2 = new _weakMap.default();
class IngestJobV2 extends _events.EventEmitter {
  /**
   *
   */
  constructor(options) {
    super();
    _connection3.set(this, {
      writable: true,
      value: void 0
    });
    _pollingOptions2.set(this, {
      writable: true,
      value: void 0
    });
    _jobData.set(this, {
      writable: true,
      value: void 0
    });
    _bulkJobSuccessfulResults.set(this, {
      writable: true,
      value: void 0
    });
    _bulkJobFailedResults.set(this, {
      writable: true,
      value: void 0
    });
    _bulkJobUnprocessedRecords.set(this, {
      writable: true,
      value: void 0
    });
    _error2.set(this, {
      writable: true,
      value: void 0
    });
    (0, _defineProperty2.default)(this, "jobInfo", void 0);
    (0, _classPrivateFieldSet2.default)(this, _connection3, options.connection);
    (0, _classPrivateFieldSet2.default)(this, _pollingOptions2, options.pollingOptions);
    this.jobInfo = options.jobInfo;
    (0, _classPrivateFieldSet2.default)(this, _jobData, new JobDataV2({
      createRequest: request => this.createIngestRequest(request),
      job: this
    }));
    // default error handler to keep the latest error
    this.on('error', error => (0, _classPrivateFieldSet2.default)(this, _error2, error));
  }
  get id() {
    return this.jobInfo.id;
  }

  /**
   * Create a job representing a bulk operation in the org
   */
  async open() {
    try {
      var _this$jobInfo2, _this$jobInfo3, _this$jobInfo4, _this$jobInfo5, _this$jobInfo6;
      this.jobInfo = await this.createIngestRequest({
        method: 'POST',
        path: '',
        body: (0, _stringify.default)({
          assignmentRuleId: (_this$jobInfo2 = this.jobInfo) === null || _this$jobInfo2 === void 0 ? void 0 : _this$jobInfo2.assignmentRuleId,
          externalIdFieldName: (_this$jobInfo3 = this.jobInfo) === null || _this$jobInfo3 === void 0 ? void 0 : _this$jobInfo3.externalIdFieldName,
          object: (_this$jobInfo4 = this.jobInfo) === null || _this$jobInfo4 === void 0 ? void 0 : _this$jobInfo4.object,
          operation: (_this$jobInfo5 = this.jobInfo) === null || _this$jobInfo5 === void 0 ? void 0 : _this$jobInfo5.operation,
          lineEnding: (_this$jobInfo6 = this.jobInfo) === null || _this$jobInfo6 === void 0 ? void 0 : _this$jobInfo6.lineEnding
        }),
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        responseType: 'application/json'
      });
      this.emit('open');
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }

  /** Upload data for a job in CSV format
   *
   *  @param input CSV as a string, or array of records or readable stream
   */
  async uploadData(input) {
    await (0, _classPrivateFieldGet3.default)(this, _jobData).execute(input);
  }
  async getAllResults() {
    const [successfulResults, failedResults, unprocessedRecords] = await _promise.default.all([this.getSuccessfulResults(), this.getFailedResults(), this.getUnprocessedRecords()]);
    return {
      successfulResults,
      failedResults,
      unprocessedRecords
    };
  }

  /**
   * Close opened job
   */
  async close() {
    try {
      const state = 'UploadComplete';
      this.jobInfo = await this.createIngestRequest({
        method: 'PATCH',
        path: `/${this.jobInfo.id}`,
        body: (0, _stringify.default)({
          state
        }),
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        responseType: 'application/json'
      });
      this.emit('uploadcomplete');
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }

  /**
   * Set the status to abort
   */
  async abort() {
    try {
      const state = 'Aborted';
      this.jobInfo = await this.createIngestRequest({
        method: 'PATCH',
        path: `/${this.jobInfo.id}`,
        body: (0, _stringify.default)({
          state
        }),
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        responseType: 'application/json'
      });
      this.emit('aborted');
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }

  /**
   * Poll for the state of the processing for the job.
   *
   * This method will only throw after a timeout. To capture a
   * job failure while polling you must set a listener for the
   * `failed` event before calling it:
   *
   * job.on('failed', (err) => console.error(err))
   * await job.poll()
   *
   * @param interval Polling interval in milliseconds
   * @param timeout Polling timeout in milliseconds
   * @returns {Promise<void>} A promise that resolves when the job finishes successfully
   */
  async poll(interval = (0, _classPrivateFieldGet3.default)(this, _pollingOptions2).pollInterval, timeout = (0, _classPrivateFieldGet3.default)(this, _pollingOptions2).pollTimeout) {
    const jobId = getJobIdOrError(this.jobInfo);
    const startTime = (0, _now.default)();
    while (startTime + timeout > (0, _now.default)()) {
      try {
        const res = await this.check();
        switch (res.state) {
          case 'Open':
            throw new Error('Job has not been started');
          case 'Aborted':
            throw new Error('Job has been aborted');
          case 'UploadComplete':
          case 'InProgress':
            await delay(interval);
            break;
          case 'Failed':
            this.emit('failed', new Error('Ingest job failed to complete.'));
            return;
          case 'JobComplete':
            this.emit('jobcomplete');
            return;
        }
      } catch (err) {
        this.emit('error', err);
        throw err;
      }
    }
    const timeoutError = new JobPollingTimeoutError(`Polling timed out after ${timeout}ms. Job Id = ${jobId}`, jobId);
    this.emit('error', timeoutError);
    throw timeoutError;
  }

  /**
   * Check the latest batch status in server
   */
  async check() {
    try {
      const jobInfo = await this.createIngestRequest({
        method: 'GET',
        path: `/${getJobIdOrError(this.jobInfo)}`,
        responseType: 'application/json'
      });
      this.jobInfo = jobInfo;
      return jobInfo;
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }
  async getSuccessfulResults() {
    if ((0, _classPrivateFieldGet3.default)(this, _bulkJobSuccessfulResults)) {
      return (0, _classPrivateFieldGet3.default)(this, _bulkJobSuccessfulResults);
    }
    const results = await this.createIngestRequest({
      method: 'GET',
      path: `/${getJobIdOrError(this.jobInfo)}/successfulResults`,
      responseType: 'text/csv'
    });
    (0, _classPrivateFieldSet2.default)(this, _bulkJobSuccessfulResults, results !== null && results !== void 0 ? results : []);
    return (0, _classPrivateFieldGet3.default)(this, _bulkJobSuccessfulResults);
  }
  async getFailedResults() {
    if ((0, _classPrivateFieldGet3.default)(this, _bulkJobFailedResults)) {
      return (0, _classPrivateFieldGet3.default)(this, _bulkJobFailedResults);
    }
    const results = await this.createIngestRequest({
      method: 'GET',
      path: `/${getJobIdOrError(this.jobInfo)}/failedResults`,
      responseType: 'text/csv'
    });
    (0, _classPrivateFieldSet2.default)(this, _bulkJobFailedResults, results !== null && results !== void 0 ? results : []);
    return (0, _classPrivateFieldGet3.default)(this, _bulkJobFailedResults);
  }
  async getUnprocessedRecords() {
    if ((0, _classPrivateFieldGet3.default)(this, _bulkJobUnprocessedRecords)) {
      return (0, _classPrivateFieldGet3.default)(this, _bulkJobUnprocessedRecords);
    }
    const results = await this.createIngestRequest({
      method: 'GET',
      path: `/${getJobIdOrError(this.jobInfo)}/unprocessedrecords`,
      responseType: 'text/csv'
    });
    (0, _classPrivateFieldSet2.default)(this, _bulkJobUnprocessedRecords, results !== null && results !== void 0 ? results : []);
    return (0, _classPrivateFieldGet3.default)(this, _bulkJobUnprocessedRecords);
  }

  /**
   * Deletes an ingest job.
   */
  async delete() {
    return this.createIngestRequest({
      method: 'DELETE',
      path: `/${getJobIdOrError(this.jobInfo)}`
    });
  }
  createIngestRequest(request) {
    const {
      path,
      responseType
    } = request;
    const baseUrl = [(0, _classPrivateFieldGet3.default)(this, _connection3).instanceUrl, 'services/data', `v${(0, _classPrivateFieldGet3.default)(this, _connection3).version}`, 'jobs/ingest'].join('/');
    return new BulkApiV2((0, _classPrivateFieldGet3.default)(this, _connection3), {
      responseType
    }).request(_objectSpread(_objectSpread({}, request), {}, {
      url: baseUrl + path
    }));
  }
}
exports.IngestJobV2 = IngestJobV2;
var _job = new _weakMap.default();
var _uploadStream = new _weakMap.default();
var _downloadStream = new _weakMap.default();
var _dataStream = new _weakMap.default();
var _result = new _weakMap.default();
class JobDataV2 extends _stream.Writable {
  /**
   *
   */
  constructor(options) {
    super({
      objectMode: true
    });
    _job.set(this, {
      writable: true,
      value: void 0
    });
    _uploadStream.set(this, {
      writable: true,
      value: void 0
    });
    _downloadStream.set(this, {
      writable: true,
      value: void 0
    });
    _dataStream.set(this, {
      writable: true,
      value: void 0
    });
    _result.set(this, {
      writable: true,
      value: void 0
    });
    const createRequest = options.createRequest;
    (0, _classPrivateFieldSet2.default)(this, _job, options.job);
    (0, _classPrivateFieldSet2.default)(this, _uploadStream, new _recordStream.Serializable());
    (0, _classPrivateFieldSet2.default)(this, _downloadStream, new _recordStream.Parsable());
    const converterOptions = {
      nullValue: '#N/A'
    };
    const uploadDataStream = (0, _classPrivateFieldGet3.default)(this, _uploadStream).stream('csv', converterOptions);
    const downloadDataStream = (0, _classPrivateFieldGet3.default)(this, _downloadStream).stream('csv', converterOptions);
    (0, _classPrivateFieldSet2.default)(this, _dataStream, (0, _stream2.concatStreamsAsDuplex)(uploadDataStream, downloadDataStream));
    this.on('finish', () => (0, _classPrivateFieldGet3.default)(this, _uploadStream).end());
    uploadDataStream.once('readable', () => {
      try {
        var _classPrivateFieldGet2;
        // pipe upload data to batch API request stream
        const req = createRequest({
          method: 'PUT',
          path: `/${(_classPrivateFieldGet2 = (0, _classPrivateFieldGet3.default)(this, _job).jobInfo) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.id}/batches`,
          headers: {
            'Content-Type': 'text/csv'
          },
          responseType: 'application/json'
        });
        (async () => {
          try {
            const res = await req;
            this.emit('response', res);
          } catch (err) {
            this.emit('error', err);
          }
        })();
        uploadDataStream.pipe(req.stream());
      } catch (err) {
        this.emit('error', err);
      }
    });
  }
  _write(record_, enc, cb) {
    const {
        Id,
        type,
        attributes
      } = record_,
      rrec = (0, _objectWithoutProperties2.default)(record_, ["Id", "type", "attributes"]);
    let record;
    switch ((0, _classPrivateFieldGet3.default)(this, _job).jobInfo.operation) {
      case 'insert':
        record = rrec;
        break;
      case 'delete':
      case 'hardDelete':
        record = {
          Id
        };
        break;
      default:
        record = _objectSpread({
          Id
        }, rrec);
    }
    (0, _classPrivateFieldGet3.default)(this, _uploadStream).write(record, enc, cb);
  }

  /**
   * Returns duplex stream which accepts CSV data input and batch result output
   */
  stream() {
    return (0, _classPrivateFieldGet3.default)(this, _dataStream);
  }

  /**
   * Execute batch operation
   */
  execute(input) {
    if ((0, _classPrivateFieldGet3.default)(this, _result)) {
      throw new Error('Data can only be uploaded to a job once.');
    }
    (0, _classPrivateFieldSet2.default)(this, _result, new _promise.default((resolve, reject) => {
      this.once('response', () => resolve());
      this.once('error', reject);
    }));
    if ((0, _function.isObject)(input) && 'pipe' in input && (0, _function.isFunction)(input.pipe)) {
      // if input has stream.Readable interface
      input.pipe((0, _classPrivateFieldGet3.default)(this, _dataStream));
    } else {
      if ((0, _isArray.default)(input)) {
        for (const record of input) {
          for (const key of (0, _keys.default)(record)) {
            if (typeof record[key] === 'boolean') {
              record[key] = String(record[key]);
            }
          }
          this.write(record);
        }
        this.end();
      } else if (typeof input === 'string') {
        (0, _classPrivateFieldGet3.default)(this, _dataStream).write(input, 'utf8');
        (0, _classPrivateFieldGet3.default)(this, _dataStream).end();
      }
    }
    return this;
  }

  /**
   * Promise/A+ interface
   * Delegate to promise, return promise instance for batch result
   */
  then(onResolved, onReject) {
    if ((0, _classPrivateFieldGet3.default)(this, _result) === undefined) {
      this.execute();
    }
    return (0, _classPrivateFieldGet3.default)(this, _result).then(onResolved, onReject);
  }
}
function getJobIdOrError(jobInfo) {
  const jobId = jobInfo === null || jobInfo === void 0 ? void 0 : jobInfo.id;
  if (jobId === undefined) {
    throw new Error('No job id, maybe you need to call `job.open()` first.');
  }
  return jobId;
}
function delay(ms) {
  return new _promise.default(resolve => (0, _setTimeout2.default)(resolve, ms));
}

/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
(0, _jsforce.registerModule)('bulk', conn => new Bulk(conn));
(0, _jsforce.registerModule)('bulk2', conn => new BulkV2(conn));
var _default = Bulk;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,