"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
require("core-js/modules/es.array.iterator");
require("core-js/modules/es.promise");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.SfdxRegistry = void 0;
var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));
var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));
var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));
var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));
var _child_process = require("child_process");
var _stripAnsi = _interopRequireDefault(require("strip-ansi"));
var _connection = _interopRequireDefault(require("../connection"));
function isNotNullOrUndefined(v) {
  return v != null;
}

/**
 *
 */
class SfdxRegistry {
  constructor({
    cliPath
  }) {
    (0, _defineProperty2.default)(this, "_cliPath", void 0);
    (0, _defineProperty2.default)(this, "_orgList", void 0);
    (0, _defineProperty2.default)(this, "_orgInfoMap", {});
    (0, _defineProperty2.default)(this, "_defaultOrgInfo", void 0);
    this._cliPath = cliPath;
  }
  _createCommand(command, options = {}, args = []) {
    var _context;
    return `${this._cliPath ? this._cliPath + '/' : ''}sfdx ${command} ${(0, _map.default)(_context = (0, _keys.default)(options)).call(_context, option => `${option.length > 1 ? '--' : '-'}${option}${options[option] != null ? ' ' + options[option] : ''}`).join(' ')} --json ${args.join(' ')}`;
  }
  async _execCommand(command, options = {}, args = []) {
    const cmd = this._createCommand(command, options, args);
    const buf = await new _promise.default((resolve, reject) => {
      (0, _child_process.exec)(cmd, (err, ret) => {
        if (err && !ret) {
          reject(err);
        } else {
          resolve(ret);
        }
      });
    });
    const body = (0, _stripAnsi.default)(buf.toString());
    let ret;
    try {
      ret = JSON.parse(body);
    } catch (e) {
      throw new Error(`Unexpectedd output from Sfdx cli: ${body}`);
    }
    if (ret.status === 0 && ret.result) {
      return ret.result;
    } else {
      const err = new Error(ret.message);
      err.name = ret.name;
      throw err;
    }
  }
  async _getOrgList() {
    if (!this._orgList) {
      this._orgList = this._execCommand('force:org:list');
    }
    return this._orgList;
  }
  async getConnectionNames() {
    var _context2, _context3;
    const {
      nonScratchOrgs,
      scratchOrgs
    } = await this._getOrgList();
    return [...(0, _filter.default)(_context2 = (0, _map.default)(nonScratchOrgs).call(nonScratchOrgs, o => o.alias)).call(_context2, isNotNullOrUndefined), ...(0, _filter.default)(_context3 = (0, _map.default)(scratchOrgs).call(scratchOrgs, o => o.alias)).call(_context3, isNotNullOrUndefined), ...(0, _map.default)(nonScratchOrgs).call(nonScratchOrgs, o => o.username), ...(0, _map.default)(scratchOrgs).call(scratchOrgs, o => o.username)];
  }
  async getConnection(name) {
    const config = await this.getConnectionConfig(name);
    return config ? new _connection.default(config) : null;
  }
  async _getOrgInfo(username) {
    const options = username ? {
      u: username
    } : {};
    if (!username || !this._orgInfoMap[username]) {
      const pOrgInfo = this._execCommand('force:org:display', options);
      this._memoOrgInfo(pOrgInfo, username);
    }
    const orgInfo = username ? this._orgInfoMap[username] : this._defaultOrgInfo;
    if (!orgInfo) {
      throw new Error('no orginfo found');
    }
    return orgInfo;
  }
  _memoOrgInfo(pOrgInfo, username) {
    const pOrgInfo_ = pOrgInfo.then(orgInfo => {
      this._orgInfoMap[orgInfo.username] = pOrgInfo_;
      if (orgInfo.alias) {
        this._orgInfoMap[orgInfo.alias] = pOrgInfo_;
      }
      return orgInfo;
    });
    if (username) {
      this._orgInfoMap[username] = pOrgInfo_;
    } else {
      this._defaultOrgInfo = pOrgInfo_;
    }
  }
  async getConnectionConfig(name) {
    const orgInfo = await this._getOrgInfo(name);
    if (!orgInfo) {
      return null;
    }
    const {
      accessToken,
      instanceUrl,
      loginUrl
    } = orgInfo;
    return {
      accessToken,
      instanceUrl,
      loginUrl
    };
  }
  async saveConnectionConfig(_name, _connConfig) {
    // nothing to do
  }
  async setDefaultConnection(_name) {
    // nothing to do
  }
  async removeConnectionConfig(name) {
    await this._execCommand('force:org:delete', {
      u: name
    });
  }
  async getClientConfig(_name) {
    return null;
  }
  async getClientNames() {
    return [];
  }
  async registerClientConfig(_name, _clientConfig) {
    // nothing to do
  }
}
exports.SfdxRegistry = SfdxRegistry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,