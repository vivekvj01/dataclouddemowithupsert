"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard");
var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _Object$defineProperties = require("@babel/runtime-corejs3/core-js-stable/object/define-properties");
var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors");
var _forEachInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/for-each");
var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");
var _filterInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/filter");
var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols");
var _Object$keys2 = require("@babel/runtime-corejs3/core-js-stable/object/keys");
require("core-js/modules/es.array.iterator");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.HttpProxyTransport = exports.XdProxyTransport = exports.CanvasTransport = exports.JsonpTransport = exports.Transport = void 0;
var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/objectWithoutProperties"));
var _now = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/date/now"));
var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));
var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));
var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/parse-int"));
var _request = _interopRequireWildcard(require("./request"));
var _promise2 = require("./util/promise");
var _jsonp = _interopRequireDefault(require("./browser/jsonp"));
var _canvas = _interopRequireDefault(require("./browser/canvas"));
var _ref, _process$env$HTTPS_PR;
/**
 *
 */
function ownKeys(object, enumerableOnly) { var keys = _Object$keys2(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; _forEachInstanceProperty(_context = ownKeys(Object(source), true)).call(_context, function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * Normarize Salesforce API host name
 * @private
 */
function normalizeApiHost(apiHost) {
  const m = /(\w+)\.(visual\.force|salesforce)\.com$/.exec(apiHost);
  if (m) {
    return `${m[1]}.salesforce.com`;
  }
  return apiHost;
}
(0, _request.setDefaults)({
  httpProxy: (_ref = (_process$env$HTTPS_PR = process.env.HTTPS_PROXY) !== null && _process$env$HTTPS_PR !== void 0 ? _process$env$HTTPS_PR : process.env.HTTP_PROXY) !== null && _ref !== void 0 ? _ref : undefined,
  timeout: process.env.HTTP_TIMEOUT ? (0, _parseInt2.default)(process.env.HTTP_TIMEOUT, 10) : undefined,
  followRedirect: true
});
const baseUrl = typeof window !== 'undefined' && window.location && window.location.host ? `https://${normalizeApiHost(window.location.host)}` : process.env.LOCATION_BASE_URL || '';

/**
 * Class for HTTP request transport
 *
 * @class
 * @protected
 */
class Transport {
  /**
   */
  httpRequest(req, options = {}) {
    return _promise2.StreamPromise.create(() => {
      const createStream = this.getRequestStreamCreator();
      const stream = createStream(req, options);
      const promise = new _promise.default((resolve, reject) => {
        stream.on('complete', res => resolve(res)).on('error', reject);
      });
      return {
        stream,
        promise
      };
    });
  }

  /**
   * @protected
   */
  getRequestStreamCreator() {
    return _request.default;
  }
}

/**
 * Class for JSONP request transport
 */
exports.Transport = Transport;
class JsonpTransport extends Transport {
  constructor(jsonpParam) {
    super();
    (0, _defineProperty2.default)(this, "_jsonpParam", void 0);
    this._jsonpParam = jsonpParam;
  }
  getRequestStreamCreator() {
    const jsonpRequest = _jsonp.default.createRequest(this._jsonpParam);
    return params => jsonpRequest(params);
  }
}

/**
 * Class for Sfdc Canvas request transport
 */
exports.JsonpTransport = JsonpTransport;
(0, _defineProperty2.default)(JsonpTransport, "supprted", _jsonp.default.supported);
class CanvasTransport extends Transport {
  constructor(signedRequest) {
    super();
    (0, _defineProperty2.default)(this, "_signedRequest", void 0);
    this._signedRequest = signedRequest;
  }
  getRequestStreamCreator() {
    const canvasRequest = _canvas.default.createRequest(this._signedRequest);
    return params => canvasRequest(params);
  }
}

/* @private */
exports.CanvasTransport = CanvasTransport;
(0, _defineProperty2.default)(CanvasTransport, "supported", _canvas.default.supported);
function createXdProxyRequest(req, proxyUrl) {
  const headers = {
    'salesforceproxy-endpoint': req.url
  };
  if (req.headers) {
    for (const name of (0, _keys.default)(req.headers)) {
      headers[name] = req.headers[name];
    }
  }
  const nocache = `${(0, _now.default)()}.${String(Math.random()).substring(2)}`;
  return _objectSpread({
    method: req.method,
    url: `${proxyUrl}?${nocache}`,
    headers
  }, req.body != null ? {
    body: req.body
  } : {});
}

/**
 * Class for HTTP request transport using cross-domain AJAX proxy service
 */
class XdProxyTransport extends Transport {
  constructor(xdProxyUrl) {
    super();
    (0, _defineProperty2.default)(this, "_xdProxyUrl", void 0);
    this._xdProxyUrl = xdProxyUrl;
  }

  /**
   * Make HTTP request via AJAX proxy
   */
  httpRequest(req, _options = {}) {
    const xdProxyUrl = this._xdProxyUrl;
    const {
        url,
        body
      } = req,
      rreq = (0, _objectWithoutProperties2.default)(req, ["url", "body"]);
    const canonicalUrl = (0, _indexOf.default)(url).call(url, '/') === 0 ? baseUrl + url : url;
    const xdProxyReq = createXdProxyRequest(_objectSpread(_objectSpread({}, rreq), {}, {
      url: canonicalUrl,
      body
    }), xdProxyUrl);
    return super.httpRequest(xdProxyReq, {
      followRedirect: redirectUrl => createXdProxyRequest(_objectSpread(_objectSpread({}, rreq), {}, {
        method: 'GET',
        url: redirectUrl
      }), xdProxyUrl)
    });
  }
}

/**
 * Class for HTTP request transport using a proxy server
 */
exports.XdProxyTransport = XdProxyTransport;
class HttpProxyTransport extends Transport {
  constructor(httpProxy) {
    super();
    (0, _defineProperty2.default)(this, "_httpProxy", void 0);
    this._httpProxy = httpProxy;
  }

  /**
   * Make HTTP request via proxy server
   */
  httpRequest(req, options_ = {}) {
    const options = _objectSpread(_objectSpread({}, options_), {}, {
      httpProxy: this._httpProxy
    });
    return super.httpRequest(req, options);
  }
}
exports.HttpProxyTransport = HttpProxyTransport;
var _default = Transport;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,