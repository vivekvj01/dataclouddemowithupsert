"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _Object$defineProperties = require("@babel/runtime-corejs3/core-js-stable/object/define-properties");
var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors");
var _forEachInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/for-each");
var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");
var _filterInstanceProperty2 = require("@babel/runtime-corejs3/core-js-stable/instance/filter");
var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols");
var _Object$keys = require("@babel/runtime-corejs3/core-js-stable/object/keys");
require("core-js/modules/es.array.iterator");
require("core-js/modules/es.promise");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.setDefaults = setDefaults;
exports.default = request;
var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reduce"));
var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));
var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));
var _trim = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/trim"));
var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));
var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/keys"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/objectWithoutProperties"));
var _requestHelper = require("../request-helper");
var _stream = require("../util/stream");
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty2(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source), true)).call(_context3, function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context4; _forEachInstanceProperty(_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * As the request streming is not yet supported on major browsers,
 * it is set to false for now.
 */
const supportsReadableStream = false;

/*
(async () => {
  try {
    if (
      typeof fetch === 'function' &&
      typeof Request === 'function' &&
      typeof ReadableStream === 'function'
    ) {
      // this feature detection requires dummy POST request
      const req = new Request('data:text/plain,', {
        method: 'POST',
        body: new ReadableStream(),
      });
      // if it has content-type header it doesn't regard body as stream
      if (req.headers.has('Content-Type')) {
        return false;
      }
      await (await fetch(req)).text();
      return true;
    }
  } catch (e) {
    // error might occur in env with CSP without connect-src data:
    return false;
  }
  return false;
})();
*/

/**
 *
 */
function toWhatwgReadableStream(ins) {
  return new ReadableStream({
    start(controller) {
      ins.on('data', chunk => controller.enqueue(chunk));
      ins.on('end', () => controller.close());
    }
  });
}

/**
 *
 */
async function readWhatwgReadableStream(rs, outs) {
  const reader = rs.getReader();
  async function readAndWrite() {
    const {
      done,
      value
    } = await reader.read();
    if (done) {
      outs.end();
      return false;
    }
    outs.write(value);
    return true;
  }
  while (await readAndWrite());
}

/**
 *
 */
async function startFetchRequest(request, options, input, output, emitter, counter = 0) {
  const {
    followRedirect
  } = options;
  const {
      url,
      body: reqBody
    } = request,
    rreq = (0, _objectWithoutProperties2.default)(request, ["url", "body"]);
  const body = input && /^(post|put|patch)$/i.test(request.method) ? supportsReadableStream ? toWhatwgReadableStream(input) : await (0, _stream.readAll)(input) : undefined;
  const controller = typeof AbortController !== 'undefined' ? new AbortController() : undefined;
  const res = await (0, _requestHelper.executeWithTimeout)(() => fetch(url, _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, rreq), body ? {
    body
  } : {}), {}, {
    redirect: 'manual'
  }, controller ? {
    signal: controller.signal
  } : {}), {
    allowHTTP1ForStreamingUpload: true
  })), options.timeout, () => controller === null || controller === void 0 ? void 0 : controller.abort());
  const headers = {};
  for (const headerName of (0, _keys.default)(_context = res.headers).call(_context)) {
    var _context;
    headers[headerName.toLowerCase()] = res.headers.get(headerName);
  }
  const response = {
    statusCode: res.status,
    headers
  };
  if (followRedirect && (0, _requestHelper.isRedirect)(response.statusCode)) {
    try {
      (0, _requestHelper.performRedirectRequest)(request, response, followRedirect, counter, req => startFetchRequest(req, options, undefined, output, emitter, counter + 1));
    } catch (err) {
      emitter.emit('error', err);
    }
    return;
  }
  emitter.emit('response', response);
  if (res.body) {
    readWhatwgReadableStream(res.body, output);
  } else {
    output.end();
  }
}

/**
 *
 */
function getResponseHeaderNames(xhr) {
  var _context2;
  const headerLines = (0, _filter.default)(_context2 = (xhr.getAllResponseHeaders() || '').split(/[\r\n]+/)).call(_context2, l => (0, _trim.default)(l).call(l) !== '');
  return (0, _map.default)(headerLines).call(headerLines, headerLine => headerLine.split(/\s*:/)[0].toLowerCase());
}

/**
 *
 */
async function startXmlHttpRequest(request, options, input, output, emitter, counter = 0) {
  const {
    method,
    url,
    headers: reqHeaders
  } = request;
  const {
    followRedirect
  } = options;
  const reqBody = input && /^(post|put|patch)$/i.test(method) ? await (0, _stream.readAll)(input) : null;
  const xhr = new XMLHttpRequest();
  await (0, _requestHelper.executeWithTimeout)(() => {
    xhr.open(method, url);
    if (reqHeaders) {
      for (const header in reqHeaders) {
        xhr.setRequestHeader(header, reqHeaders[header]);
      }
    }
    if (options.timeout) {
      xhr.timeout = options.timeout;
    }
    xhr.responseType = 'arraybuffer';
    xhr.send(reqBody);
    return new _promise.default((resolve, reject) => {
      xhr.onload = () => resolve();
      xhr.onerror = reject;
      xhr.ontimeout = reject;
      xhr.onabort = reject;
    });
  }, options.timeout, () => xhr.abort());
  const headerNames = getResponseHeaderNames(xhr);
  const headers = (0, _reduce.default)(headerNames).call(headerNames, (headers, headerName) => _objectSpread(_objectSpread({}, headers), {}, {
    [headerName]: xhr.getResponseHeader(headerName) || ''
  }), {});
  const response = {
    statusCode: xhr.status,
    headers: headers
  };
  if (followRedirect && (0, _requestHelper.isRedirect)(response.statusCode)) {
    try {
      (0, _requestHelper.performRedirectRequest)(request, response, followRedirect, counter, req => startXmlHttpRequest(req, options, undefined, output, emitter, counter + 1));
    } catch (err) {
      emitter.emit('error', err);
    }
    return;
  }
  let body;
  if (!response.statusCode) {
    response.statusCode = 400;
    body = Buffer.from('Access Declined');
  } else {
    body = Buffer.from(xhr.response);
  }
  emitter.emit('response', response);
  output.write(body);
  output.end();
}

/**
 *
 */
let defaults = {};

/**
 *
 */
function setDefaults(defaults_) {
  defaults = defaults_;
}

/**
 *
 */
function request(req, options_ = {}) {
  const options = _objectSpread(_objectSpread({}, defaults), options_);
  const {
    input,
    output,
    stream
  } = (0, _requestHelper.createHttpRequestHandlerStreams)(req, options);
  if (typeof window !== 'undefined' && typeof window.fetch === 'function') {
    startFetchRequest(req, options, input, output, stream);
  } else {
    startXmlHttpRequest(req, options, input, output, stream);
  }
  return stream;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,