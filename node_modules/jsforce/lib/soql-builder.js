"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
require("core-js/modules/es.array.iterator");
require("core-js/modules/es.string.replace");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.createSOQL = createSOQL;
var _sort2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/sort"));
var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/includes"));
var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));
var _entries = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/entries"));
var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));
var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));
var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));
var _values = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/values"));
var _date = _interopRequireDefault(require("./date"));
/**
 * @file Create and build SOQL string from configuration
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

/** @private **/
function escapeSOQLString(str) {
  return String(str || '').replace(/'/g, "\\'");
}

/** @private **/
function createFieldsClause(fields, childQueries = {}) {
  const cqueries = (0, _values.default)(childQueries);
  // eslint-disable-next-line no-use-before-define
  return [...(fields || ['Id']), ...(0, _map.default)(cqueries).call(cqueries, cquery => `(${createSOQL(cquery)})`)].join(', ');
}

/** @private **/
function createValueExpression(value) {
  if ((0, _isArray.default)(value)) {
    return value.length > 0 ? `(${(0, _map.default)(value).call(value, createValueExpression).join(', ')})` : undefined;
  }
  if (value instanceof _date.default) {
    return value.toString();
  }
  if (typeof value === 'string') {
    return `'${escapeSOQLString(value)}'`;
  }
  if (typeof value === 'number') {
    return value.toString();
  }
  if (value === null) {
    return 'null';
  }
  return value;
}
const opMap = {
  '=': '=',
  $eq: '=',
  '!=': '!=',
  $ne: '!=',
  '>': '>',
  $gt: '>',
  '<': '<',
  $lt: '<',
  '>=': '>=',
  $gte: '>=',
  '<=': '<=',
  $lte: '<=',
  $like: 'LIKE',
  $nlike: 'NOT LIKE',
  $in: 'IN',
  $nin: 'NOT IN',
  $includes: 'INCLUDES',
  $excludes: 'EXCLUDES',
  $exists: 'EXISTS'
};

/** @private **/
function createFieldExpression(field, value) {
  let op = '$eq';
  let _value = value;

  // Assume the `$in` operator if value is an array and none was supplied.
  if ((0, _isArray.default)(value)) {
    op = '$in';
  } else if (typeof value === 'object' && value !== null) {
    // Otherwise, if an object was passed then process the supplied ops.
    for (const k of (0, _keys.default)(value)) {
      if (k[0] === '$') {
        op = k;
        _value = value[k];
        break;
      }
    }
  }
  const sfop = opMap[op];
  if (!sfop || typeof _value === 'undefined') {
    return null;
  }
  const valueExpr = createValueExpression(_value);
  if (typeof valueExpr === 'undefined') {
    return null;
  }
  switch (sfop) {
    case 'NOT LIKE':
      return `(${['NOT', field, 'LIKE', valueExpr].join(' ')})`;
    case 'EXISTS':
      return [field, _value ? '!=' : '=', 'null'].join(' ');
    default:
      return [field, sfop, valueExpr].join(' ');
  }
}

/** @private **/
function createOrderByClause(sort = []) {
  let _sort = [];
  if (typeof sort === 'string') {
    var _context;
    if (/,|\s+(asc|desc)\s*$/.test(sort)) {
      // must be specified in pure "order by" clause. Return raw config.
      return sort;
    }
    // sort order in mongoose-style expression.
    // e.g. "FieldA -FieldB" => "ORDER BY FieldA ASC, FieldB DESC"
    _sort = (0, _map.default)(_context = sort.split(/\s+/)).call(_context, field => {
      let dir = 'ASC'; // ascending
      const flag = field[0];
      if (flag === '-') {
        dir = 'DESC';
        field = field.substring(1); // eslint-disable-line no-param-reassign
      } else if (flag === '+') {
        field = field.substring(1); // eslint-disable-line no-param-reassign
      }

      return [field, dir];
    });
  } else if ((0, _isArray.default)(sort)) {
    _sort = sort;
  } else {
    var _context2;
    _sort = (0, _map.default)(_context2 = (0, _entries.default)(sort)).call(_context2, ([field, dir]) => [field, dir]);
  }
  return (0, _map.default)(_sort).call(_sort, ([field, dir]) => {
    /* eslint-disable no-param-reassign */
    switch (String(dir)) {
      case 'DESC':
      case 'desc':
      case 'descending':
      case '-':
      case '-1':
        dir = 'DESC';
        break;
      default:
        dir = 'ASC';
    }
    return `${field} ${dir}`;
  }).join(', ');
}
/** @private **/
function createConditionClause(conditions = {}, operator = 'AND', depth = 0) {
  var _context5;
  if (typeof conditions === 'string') {
    return conditions;
  }
  let conditionList = [];
  if (!(0, _isArray.default)(conditions)) {
    var _context3;
    // if passed in hash object
    const conditionsMap = conditions;
    conditionList = (0, _map.default)(_context3 = (0, _keys.default)(conditionsMap)).call(_context3, key => ({
      key,
      value: conditionsMap[key]
    }));
  } else {
    conditionList = (0, _map.default)(conditions).call(conditions, cond => {
      var _context4;
      const conds = (0, _map.default)(_context4 = (0, _keys.default)(cond)).call(_context4, key => ({
        key,
        value: cond[key]
      }));
      return conds.length > 1 ? {
        key: '$and',
        value: (0, _map.default)(conds).call(conds, c => ({
          [c.key]: c.value
        }))
      } : conds[0];
    });
  }
  const conditionClauses = (0, _filter.default)(_context5 = (0, _map.default)(conditionList).call(conditionList, cond => {
    let d = depth + 1;
    let op;
    switch (cond.key) {
      case '$or':
      case '$and':
      case '$not':
        if (operator !== 'NOT' && conditionList.length === 1) {
          d = depth; // not change tree depth
        }

        op = cond.key === '$or' ? 'OR' : cond.key === '$and' ? 'AND' : 'NOT';
        return createConditionClause(cond.value, op, d);
      default:
        return createFieldExpression(cond.key, cond.value);
    }
  })).call(_context5, expr => expr);
  let hasParen;
  if (operator === 'NOT') {
    hasParen = depth > 0;
    return `${hasParen ? '(' : ''}NOT ${conditionClauses[0]}${hasParen ? ')' : ''}`;
  }
  hasParen = depth > 0 && conditionClauses.length > 1;
  return (hasParen ? '(' : '') + conditionClauses.join(` ${operator} `) + (hasParen ? ')' : '');
}

/**
 * Create SOQL
 * @private
 */
function createSOQL(query) {
  let soql = ['SELECT ', createFieldsClause(query.fields, (0, _includes.default)(query)), ' FROM ', query.table].join('');
  const cond = createConditionClause(query.conditions);
  if (cond) {
    soql += ` WHERE ${cond}`;
  }
  const orderby = createOrderByClause((0, _sort2.default)(query));
  if (orderby) {
    soql += ` ORDER BY ${orderby}`;
  }
  if (query.limit) {
    soql += ` LIMIT ${query.limit}`;
  }
  if (query.offset) {
    soql += ` OFFSET ${query.offset}`;
  }
  return soql;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZGF0ZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiZXNjYXBlU09RTFN0cmluZyIsInN0ciIsIlN0cmluZyIsInJlcGxhY2UiLCJjcmVhdGVGaWVsZHNDbGF1c2UiLCJmaWVsZHMiLCJjaGlsZFF1ZXJpZXMiLCJjcXVlcmllcyIsIl92YWx1ZXMiLCJkZWZhdWx0IiwiX21hcCIsImNhbGwiLCJjcXVlcnkiLCJjcmVhdGVTT1FMIiwiam9pbiIsImNyZWF0ZVZhbHVlRXhwcmVzc2lvbiIsInZhbHVlIiwiX2lzQXJyYXkiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJTZkRhdGUiLCJ0b1N0cmluZyIsIm9wTWFwIiwiJGVxIiwiJG5lIiwiJGd0IiwiJGx0IiwiJGd0ZSIsIiRsdGUiLCIkbGlrZSIsIiRubGlrZSIsIiRpbiIsIiRuaW4iLCIkaW5jbHVkZXMiLCIkZXhjbHVkZXMiLCIkZXhpc3RzIiwiY3JlYXRlRmllbGRFeHByZXNzaW9uIiwiZmllbGQiLCJvcCIsIl92YWx1ZSIsImsiLCJfa2V5cyIsInNmb3AiLCJ2YWx1ZUV4cHIiLCJjcmVhdGVPcmRlckJ5Q2xhdXNlIiwic29ydCIsIl9zb3J0IiwiX2NvbnRleHQiLCJ0ZXN0Iiwic3BsaXQiLCJkaXIiLCJmbGFnIiwic3Vic3RyaW5nIiwiX2NvbnRleHQyIiwiX2VudHJpZXMiLCJjcmVhdGVDb25kaXRpb25DbGF1c2UiLCJjb25kaXRpb25zIiwib3BlcmF0b3IiLCJkZXB0aCIsIl9jb250ZXh0NSIsImNvbmRpdGlvbkxpc3QiLCJfY29udGV4dDMiLCJjb25kaXRpb25zTWFwIiwia2V5IiwiY29uZCIsIl9jb250ZXh0NCIsImNvbmRzIiwiYyIsImNvbmRpdGlvbkNsYXVzZXMiLCJfZmlsdGVyIiwiZCIsImV4cHIiLCJoYXNQYXJlbiIsInF1ZXJ5Iiwic29xbCIsIl9pbmNsdWRlcyIsInRhYmxlIiwib3JkZXJieSIsIl9zb3J0MiIsImxpbWl0Iiwib2Zmc2V0Il0sInNvdXJjZXMiOlsiLi4vc3JjL3NvcWwtYnVpbGRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIENyZWF0ZSBhbmQgYnVpbGQgU09RTCBzdHJpbmcgZnJvbSBjb25maWd1cmF0aW9uXG4gKiBAYXV0aG9yIFNoaW5pY2hpIFRvbWl0YSA8c2hpbmljaGkudG9taXRhQGdtYWlsLmNvbT5cbiAqL1xuaW1wb3J0IFNmRGF0ZSBmcm9tICcuL2RhdGUnO1xuaW1wb3J0IHsgT3B0aW9uYWwgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IHR5cGUgQ29uZGl0aW9uID1cbiAgfCBzdHJpbmdcbiAgfCB7IFtmaWVsZDogc3RyaW5nXTogYW55IH1cbiAgfCBBcnJheTx7IFtmaWVsZDogc3RyaW5nXTogYW55IH0+O1xuXG5leHBvcnQgdHlwZSBTb3J0RGlyID0gJ0FTQycgfCAnREVTQycgfCAnYXNjJyB8ICdkZXNjJyB8IDEgfCAtMTtcblxuZXhwb3J0IHR5cGUgU29ydCA9XG4gIHwgc3RyaW5nXG4gIHwgQXJyYXk8W3N0cmluZywgU29ydERpcl0+XG4gIHwgeyBbZmllbGQ6IHN0cmluZ106IFNvcnREaXIgfTtcblxuZXhwb3J0IHR5cGUgUXVlcnlDb25maWcgPSB7XG4gIGZpZWxkcz86IHN0cmluZ1tdO1xuICBpbmNsdWRlcz86IHsgW2ZpZWxkOiBzdHJpbmddOiBRdWVyeUNvbmZpZyB9O1xuICB0YWJsZT86IHN0cmluZztcbiAgY29uZGl0aW9ucz86IENvbmRpdGlvbjtcbiAgc29ydD86IFNvcnQ7XG4gIGxpbWl0PzogbnVtYmVyO1xuICBvZmZzZXQ/OiBudW1iZXI7XG59O1xuXG4vKiogQHByaXZhdGUgKiovXG5mdW5jdGlvbiBlc2NhcGVTT1FMU3RyaW5nKHN0cjogT3B0aW9uYWw8c3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbj4pIHtcbiAgcmV0dXJuIFN0cmluZyhzdHIgfHwgJycpLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKTtcbn1cblxuLyoqIEBwcml2YXRlICoqL1xuZnVuY3Rpb24gY3JlYXRlRmllbGRzQ2xhdXNlKFxuICBmaWVsZHM/OiBzdHJpbmdbXSxcbiAgY2hpbGRRdWVyaWVzOiB7IFtuYW1lOiBzdHJpbmddOiBRdWVyeUNvbmZpZyB9ID0ge30sXG4pOiBzdHJpbmcge1xuICBjb25zdCBjcXVlcmllczogUXVlcnlDb25maWdbXSA9IChPYmplY3QudmFsdWVzKFxuICAgIGNoaWxkUXVlcmllcyxcbiAgKSBhcyBhbnkpIGFzIFF1ZXJ5Q29uZmlnW107XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICByZXR1cm4gW1xuICAgIC4uLihmaWVsZHMgfHwgWydJZCddKSxcbiAgICAuLi5jcXVlcmllcy5tYXAoKGNxdWVyeSkgPT4gYCgke2NyZWF0ZVNPUUwoY3F1ZXJ5KX0pYCksXG4gIF0uam9pbignLCAnKTtcbn1cblxuLyoqIEBwcml2YXRlICoqL1xuZnVuY3Rpb24gY3JlYXRlVmFsdWVFeHByZXNzaW9uKHZhbHVlOiBhbnkpOiBPcHRpb25hbDxzdHJpbmc+IHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlLmxlbmd0aCA+IDBcbiAgICAgID8gYCgke3ZhbHVlLm1hcChjcmVhdGVWYWx1ZUV4cHJlc3Npb24pLmpvaW4oJywgJyl9KWBcbiAgICAgIDogdW5kZWZpbmVkO1xuICB9XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFNmRGF0ZSkge1xuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGAnJHtlc2NhcGVTT1FMU3RyaW5nKHZhbHVlKX0nYDtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICB9XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiAnbnVsbCc7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5jb25zdCBvcE1hcDogeyBbb3A6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICAnPSc6ICc9JyxcbiAgJGVxOiAnPScsXG4gICchPSc6ICchPScsXG4gICRuZTogJyE9JyxcbiAgJz4nOiAnPicsXG4gICRndDogJz4nLFxuICAnPCc6ICc8JyxcbiAgJGx0OiAnPCcsXG4gICc+PSc6ICc+PScsXG4gICRndGU6ICc+PScsXG4gICc8PSc6ICc8PScsXG4gICRsdGU6ICc8PScsXG4gICRsaWtlOiAnTElLRScsXG4gICRubGlrZTogJ05PVCBMSUtFJyxcbiAgJGluOiAnSU4nLFxuICAkbmluOiAnTk9UIElOJyxcbiAgJGluY2x1ZGVzOiAnSU5DTFVERVMnLFxuICAkZXhjbHVkZXM6ICdFWENMVURFUycsXG4gICRleGlzdHM6ICdFWElTVFMnLFxufTtcblxuLyoqIEBwcml2YXRlICoqL1xuZnVuY3Rpb24gY3JlYXRlRmllbGRFeHByZXNzaW9uKGZpZWxkOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBPcHRpb25hbDxzdHJpbmc+IHtcbiAgbGV0IG9wID0gJyRlcSc7XG4gIGxldCBfdmFsdWUgPSB2YWx1ZTtcblxuICAvLyBBc3N1bWUgdGhlIGAkaW5gIG9wZXJhdG9yIGlmIHZhbHVlIGlzIGFuIGFycmF5IGFuZCBub25lIHdhcyBzdXBwbGllZC5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgb3AgPSAnJGluJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgLy8gT3RoZXJ3aXNlLCBpZiBhbiBvYmplY3Qgd2FzIHBhc3NlZCB0aGVuIHByb2Nlc3MgdGhlIHN1cHBsaWVkIG9wcy5cbiAgICBmb3IgKGNvbnN0IGsgb2YgT2JqZWN0LmtleXModmFsdWUpKSB7XG4gICAgICBpZiAoa1swXSA9PT0gJyQnKSB7XG4gICAgICAgIG9wID0gaztcbiAgICAgICAgX3ZhbHVlID0gdmFsdWVba107XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25zdCBzZm9wID0gb3BNYXBbb3BdO1xuICBpZiAoIXNmb3AgfHwgdHlwZW9mIF92YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCB2YWx1ZUV4cHIgPSBjcmVhdGVWYWx1ZUV4cHJlc3Npb24oX3ZhbHVlKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZUV4cHIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgc3dpdGNoIChzZm9wKSB7XG4gICAgY2FzZSAnTk9UIExJS0UnOlxuICAgICAgcmV0dXJuIGAoJHtbJ05PVCcsIGZpZWxkLCAnTElLRScsIHZhbHVlRXhwcl0uam9pbignICcpfSlgO1xuICAgIGNhc2UgJ0VYSVNUUyc6XG4gICAgICByZXR1cm4gW2ZpZWxkLCBfdmFsdWUgPyAnIT0nIDogJz0nLCAnbnVsbCddLmpvaW4oJyAnKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFtmaWVsZCwgc2ZvcCwgdmFsdWVFeHByXS5qb2luKCcgJyk7XG4gIH1cbn1cblxuLyoqIEBwcml2YXRlICoqL1xuZnVuY3Rpb24gY3JlYXRlT3JkZXJCeUNsYXVzZShzb3J0OiBTb3J0ID0gW10pOiBzdHJpbmcge1xuICBsZXQgX3NvcnQ6IEFycmF5PFtzdHJpbmcsIFNvcnREaXJdPiA9IFtdO1xuICBpZiAodHlwZW9mIHNvcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKC8sfFxccysoYXNjfGRlc2MpXFxzKiQvLnRlc3Qoc29ydCkpIHtcbiAgICAgIC8vIG11c3QgYmUgc3BlY2lmaWVkIGluIHB1cmUgXCJvcmRlciBieVwiIGNsYXVzZS4gUmV0dXJuIHJhdyBjb25maWcuXG4gICAgICByZXR1cm4gc29ydDtcbiAgICB9XG4gICAgLy8gc29ydCBvcmRlciBpbiBtb25nb29zZS1zdHlsZSBleHByZXNzaW9uLlxuICAgIC8vIGUuZy4gXCJGaWVsZEEgLUZpZWxkQlwiID0+IFwiT1JERVIgQlkgRmllbGRBIEFTQywgRmllbGRCIERFU0NcIlxuICAgIF9zb3J0ID0gc29ydC5zcGxpdCgvXFxzKy8pLm1hcCgoZmllbGQpID0+IHtcbiAgICAgIGxldCBkaXI6IFNvcnREaXIgPSAnQVNDJzsgLy8gYXNjZW5kaW5nXG4gICAgICBjb25zdCBmbGFnID0gZmllbGRbMF07XG4gICAgICBpZiAoZmxhZyA9PT0gJy0nKSB7XG4gICAgICAgIGRpciA9ICdERVNDJztcbiAgICAgICAgZmllbGQgPSBmaWVsZC5zdWJzdHJpbmcoMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIH0gZWxzZSBpZiAoZmxhZyA9PT0gJysnKSB7XG4gICAgICAgIGZpZWxkID0gZmllbGQuc3Vic3RyaW5nKDEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICB9XG4gICAgICByZXR1cm4gW2ZpZWxkLCBkaXJdIGFzIFtzdHJpbmcsIFNvcnREaXJdO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoc29ydCkpIHtcbiAgICBfc29ydCA9IHNvcnQ7XG4gIH0gZWxzZSB7XG4gICAgX3NvcnQgPSBPYmplY3QuZW50cmllcyhzb3J0KS5tYXAoXG4gICAgICAoW2ZpZWxkLCBkaXJdKSA9PiBbZmllbGQsIGRpcl0gYXMgW3N0cmluZywgU29ydERpcl0sXG4gICAgKTtcbiAgfVxuICByZXR1cm4gX3NvcnRcbiAgICAubWFwKChbZmllbGQsIGRpcl0pID0+IHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4gICAgICBzd2l0Y2ggKFN0cmluZyhkaXIpKSB7XG4gICAgICAgIGNhc2UgJ0RFU0MnOlxuICAgICAgICBjYXNlICdkZXNjJzpcbiAgICAgICAgY2FzZSAnZGVzY2VuZGluZyc6XG4gICAgICAgIGNhc2UgJy0nOlxuICAgICAgICBjYXNlICctMSc6XG4gICAgICAgICAgZGlyID0gJ0RFU0MnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGRpciA9ICdBU0MnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGAke2ZpZWxkfSAke2Rpcn1gO1xuICAgIH0pXG4gICAgLmpvaW4oJywgJyk7XG59XG5cbnR5cGUgTG9naWNhbE9wZXJhdG9yID0gJ0FORCcgfCAnT1InIHwgJ05PVCc7XG5cbi8qKiBAcHJpdmF0ZSAqKi9cbmZ1bmN0aW9uIGNyZWF0ZUNvbmRpdGlvbkNsYXVzZShcbiAgY29uZGl0aW9uczogQ29uZGl0aW9uID0ge30sXG4gIG9wZXJhdG9yOiBMb2dpY2FsT3BlcmF0b3IgPSAnQU5EJyxcbiAgZGVwdGg6IG51bWJlciA9IDAsXG4pOiBzdHJpbmcge1xuICBpZiAodHlwZW9mIGNvbmRpdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGNvbmRpdGlvbnM7XG4gIH1cbiAgbGV0IGNvbmRpdGlvbkxpc3Q6IEFycmF5PHsga2V5OiBzdHJpbmc7IHZhbHVlOiBDb25kaXRpb24gfT4gPSBbXTtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGNvbmRpdGlvbnMpKSB7XG4gICAgLy8gaWYgcGFzc2VkIGluIGhhc2ggb2JqZWN0XG4gICAgY29uc3QgY29uZGl0aW9uc01hcCA9IGNvbmRpdGlvbnM7XG4gICAgY29uZGl0aW9uTGlzdCA9IE9iamVjdC5rZXlzKGNvbmRpdGlvbnNNYXApLm1hcCgoa2V5KSA9PiAoe1xuICAgICAga2V5LFxuICAgICAgdmFsdWU6IGNvbmRpdGlvbnNNYXBba2V5XSxcbiAgICB9KSk7XG4gIH0gZWxzZSB7XG4gICAgY29uZGl0aW9uTGlzdCA9IGNvbmRpdGlvbnMubWFwKChjb25kKSA9PiB7XG4gICAgICBjb25zdCBjb25kcyA9IE9iamVjdC5rZXlzKGNvbmQpLm1hcCgoa2V5KSA9PiAoeyBrZXksIHZhbHVlOiBjb25kW2tleV0gfSkpO1xuICAgICAgcmV0dXJuIGNvbmRzLmxlbmd0aCA+IDFcbiAgICAgICAgPyB7IGtleTogJyRhbmQnLCB2YWx1ZTogY29uZHMubWFwKChjKSA9PiAoeyBbYy5rZXldOiBjLnZhbHVlIH0pKSB9XG4gICAgICAgIDogY29uZHNbMF07XG4gICAgfSk7XG4gIH1cbiAgY29uc3QgY29uZGl0aW9uQ2xhdXNlcyA9IChjb25kaXRpb25MaXN0XG4gICAgLm1hcCgoY29uZCkgPT4ge1xuICAgICAgbGV0IGQgPSBkZXB0aCArIDE7XG4gICAgICBsZXQgb3A6IE9wdGlvbmFsPExvZ2ljYWxPcGVyYXRvcj47XG4gICAgICBzd2l0Y2ggKGNvbmQua2V5KSB7XG4gICAgICAgIGNhc2UgJyRvcic6XG4gICAgICAgIGNhc2UgJyRhbmQnOlxuICAgICAgICBjYXNlICckbm90JzpcbiAgICAgICAgICBpZiAob3BlcmF0b3IgIT09ICdOT1QnICYmIGNvbmRpdGlvbkxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBkID0gZGVwdGg7IC8vIG5vdCBjaGFuZ2UgdHJlZSBkZXB0aFxuICAgICAgICAgIH1cbiAgICAgICAgICBvcCA9IGNvbmQua2V5ID09PSAnJG9yJyA/ICdPUicgOiBjb25kLmtleSA9PT0gJyRhbmQnID8gJ0FORCcgOiAnTk9UJztcbiAgICAgICAgICByZXR1cm4gY3JlYXRlQ29uZGl0aW9uQ2xhdXNlKGNvbmQudmFsdWUsIG9wLCBkKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gY3JlYXRlRmllbGRFeHByZXNzaW9uKGNvbmQua2V5LCBjb25kLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9KVxuICAgIC5maWx0ZXIoKGV4cHIpID0+IGV4cHIpIGFzIGFueSkgYXMgc3RyaW5nW107XG5cbiAgbGV0IGhhc1BhcmVuOiBib29sZWFuO1xuICBpZiAob3BlcmF0b3IgPT09ICdOT1QnKSB7XG4gICAgaGFzUGFyZW4gPSBkZXB0aCA+IDA7XG4gICAgcmV0dXJuIGAke2hhc1BhcmVuID8gJygnIDogJyd9Tk9UICR7Y29uZGl0aW9uQ2xhdXNlc1swXX0ke1xuICAgICAgaGFzUGFyZW4gPyAnKScgOiAnJ1xuICAgIH1gO1xuICB9XG4gIGhhc1BhcmVuID0gZGVwdGggPiAwICYmIGNvbmRpdGlvbkNsYXVzZXMubGVuZ3RoID4gMTtcbiAgcmV0dXJuIChcbiAgICAoaGFzUGFyZW4gPyAnKCcgOiAnJykgK1xuICAgIGNvbmRpdGlvbkNsYXVzZXMuam9pbihgICR7b3BlcmF0b3J9IGApICtcbiAgICAoaGFzUGFyZW4gPyAnKScgOiAnJylcbiAgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgU09RTFxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNPUUwocXVlcnk6IFF1ZXJ5Q29uZmlnKTogc3RyaW5nIHtcbiAgbGV0IHNvcWwgPSBbXG4gICAgJ1NFTEVDVCAnLFxuICAgIGNyZWF0ZUZpZWxkc0NsYXVzZShxdWVyeS5maWVsZHMsIHF1ZXJ5LmluY2x1ZGVzKSxcbiAgICAnIEZST00gJyxcbiAgICBxdWVyeS50YWJsZSxcbiAgXS5qb2luKCcnKTtcbiAgY29uc3QgY29uZCA9IGNyZWF0ZUNvbmRpdGlvbkNsYXVzZShxdWVyeS5jb25kaXRpb25zKTtcbiAgaWYgKGNvbmQpIHtcbiAgICBzb3FsICs9IGAgV0hFUkUgJHtjb25kfWA7XG4gIH1cbiAgY29uc3Qgb3JkZXJieSA9IGNyZWF0ZU9yZGVyQnlDbGF1c2UocXVlcnkuc29ydCk7XG4gIGlmIChvcmRlcmJ5KSB7XG4gICAgc29xbCArPSBgIE9SREVSIEJZICR7b3JkZXJieX1gO1xuICB9XG4gIGlmIChxdWVyeS5saW1pdCkge1xuICAgIHNvcWwgKz0gYCBMSU1JVCAke3F1ZXJ5LmxpbWl0fWA7XG4gIH1cbiAgaWYgKHF1ZXJ5Lm9mZnNldCkge1xuICAgIHNvcWwgKz0gYCBPRkZTRVQgJHtxdWVyeS5vZmZzZXR9YDtcbiAgfVxuICByZXR1cm4gc29xbDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSUEsSUFBQUEsS0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBSkE7QUFDQTtBQUNBO0FBQ0E7O0FBMEJBO0FBQ0EsU0FB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