"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _Object$defineProperties = require("@babel/runtime-corejs3/core-js-stable/object/define-properties");
var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors");
var _forEachInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/for-each");
var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");
var _filterInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/filter");
var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols");
var _Object$keys2 = require("@babel/runtime-corejs3/core-js-stable/object/keys");
require("core-js/modules/es.array.iterator");
require("core-js/modules/es.promise");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Cli = void 0;
var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));
var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reduce"));
var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));
var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));
var _http = _interopRequireDefault(require("http"));
var _url = _interopRequireDefault(require("url"));
var _crypto = _interopRequireDefault(require("crypto"));
var _open = _interopRequireDefault(require("open"));
var _commander = require("commander");
var _inquirer = _interopRequireDefault(require("inquirer"));
var _request = _interopRequireDefault(require("../request"));
var _base64url = _interopRequireDefault(require("base64url"));
var _repl = _interopRequireDefault(require("./repl"));
var _ = _interopRequireWildcard(require(".."));
var _VERSION = _interopRequireDefault(require("../VERSION"));
function ownKeys(object, enumerableOnly) { var keys = _Object$keys2(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source), true)).call(_context2, function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source))).call(_context3, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; } /**
file Command line interface for JSforce
author Shinichi Tomita <shinichi.tomita@gmail.com>

const registry = _.default.registry;
/**
 *
 */
class Cli {
  constructor() {
    (0, _defineProperty2.default)(this, "_repl", new _repl.default(this));
    (0, _defineProperty2.default)(this, "_conn", new _.Connection());
    (0, _defineProperty2.default)(this, "_connName", undefined);
    (0, _defineProperty2.default)(this, "_outputEnabled", true);
    (0, _defineProperty2.default)(this, "_defaultLoginUrl", undefined);
  }
  /**
   *
   */
  readCommand() {
    return new _commander.Command().option('-u, --username [username]', 'Salesforce username').option('-p, --password [password]', 'Salesforce password (and security token, if available)').option('-c, --connection [connection]', 'Connection name stored in connection registry').option('-l, --loginUrl [loginUrl]', 'Salesforce login url').option('--sandbox', 'Login to Salesforce sandbox').option('-e, --evalScript [evalScript]', 'Script to evaluate').version(_VERSION.default).parse(process.argv);
  }
  async start() {
    const program = this.readCommand();
    this._outputEnabled = !program.evalScript;
    try {
      await this.connect(program);
      if (program.evalScript) {
        this._repl.start({
          interactive: false,
          evalScript: program.evalScript
        });
      } else {
        this._repl.start();
      }
    } catch (err) {
      console.error(err);
      process.exit();
    }
  }
  getCurrentConnection() {
    return this._conn;
  }
  print(...args) {
    if (this._outputEnabled) {
      console.log(...args);
    }
  }
  saveCurrentConnection() {
    if (this._connName) {
      const conn = this._conn;
      const connName = this._connName;
      const connConfig = {
        oauth2: conn.oauth2 ? {
          clientId: conn.oauth2.clientId || undefined,
          clientSecret: conn.oauth2.clientSecret || undefined,
          redirectUri: conn.oauth2.redirectUri || undefined,
          loginUrl: conn.oauth2.loginUrl || undefined
        } : undefined,
        accessToken: conn.accessToken || undefined,
        instanceUrl: conn.instanceUrl || undefined,
        refreshToken: conn.refreshToken || undefined
      };
      registry.saveConnectionConfig(connName, connConfig);
    }
  }
  setLoginServer(loginServer) {
    if (!loginServer) {
      return;
    }
    if (loginServer === 'production') {
      this._defaultLoginUrl = 'https://login.salesforce.com';
    } else if (loginServer === 'sandbox') {
      this._defaultLoginUrl = 'https://test.salesforce.com';
    } else if ((0, _indexOf.default)(loginServer).call(loginServer, 'https://') !== 0) {
      this._defaultLoginUrl = 'https://' + loginServer;
    } else {
      this._defaultLoginUrl = loginServer;
    }
    this.print(`Using "${this._defaultLoginUrl}" as default login URL.`);
  }

  /**
   *
   */
  async connect(options) {
    const loginServer = options.loginUrl ? options.loginUrl : options.sandbox ? 'sandbox' : null;
    this.setLoginServer(loginServer);
    this._connName = options.connection;
    let connConfig = await registry.getConnectionConfig(options.connection);
    let username = options.username;
    if (!connConfig) {
      connConfig = {};
      if (this._defaultLoginUrl) {
        connConfig.loginUrl = this._defaultLoginUrl;
      }
      username = username || options.connection;
    }
    this._conn = new _.Connection(connConfig);
    const password = options.password;
    if (username) {
      await this.startPasswordAuth(username, password);
      this.saveCurrentConnection();
    } else {
      if (this._connName && this._conn.accessToken) {
        this._conn.on('refresh', () => {
          this.print('Refreshing access token ... ');
          this.saveCurrentConnection();
        });
        try {
          const identity = await this._conn.identity();
          this.print(`Logged in as : ${identity.username}`);
        } catch (err) {
          if (err instanceof Error) {
            this.print(err.message);
          }
          if (this._conn.oauth2) {
            throw new Error('Please re-authorize connection.');
          } else {
            await this.startPasswordAuth(this._connName);
          }
        }
      }
    }
  }

  /**
   *
   */
  async startPasswordAuth(username, password) {
    try {
      await this.loginByPassword(username, password, 2);
    } catch (err) {
      if (err instanceof Error && err.message === 'canceled') {
        console.error('Password authentication canceled: Not logged in');
      } else {
        throw err;
      }
    }
  }

  /**
   *
   */
  async loginByPassword(username, password, retryCount) {
    if (password === '') {
      throw new Error('canceled');
    }
    if (password == null) {
      const pass = await this.promptPassword('Password: ');
      return this.loginByPassword(username, pass, retryCount);
    }
    try {
      const result = await this._conn.login(username, password);
      this.print(`Logged in as : ${username}`);
      return result;
    } catch (err) {
      if (err instanceof Error) {
        console.error(err.message);
      }
      if (retryCount > 0) {
        return this.loginByPassword(username, undefined, retryCount - 1);
      } else {
        throw new Error('canceled');
      }
    }
  }

  /**
   *
   */
  disconnect(connName) {
    const name = connName || this._connName;
    if (name && registry.getConnectionConfig(name)) {
      registry.removeConnectionConfig(name);
      this.print(`Disconnect connection '${name}'`);
    }
    this._connName = undefined;
    this._conn = new _.Connection();
  }

  /**
   *
   */
  async authorize(clientName) {
    const name = clientName || 'default';
    var oauth2Config = await registry.getClientConfig(name);
    if (!oauth2Config || !oauth2Config.clientId) {
      if (name === 'default' || name === 'sandbox') {
        this.print('No client information registered. Downloading JSforce default client information...');
        return this.downloadDefaultClientInfo(name);
      }
      throw new Error(`No OAuth2 client information registered : '${name}'. Please register client info first.`);
    }
    const oauth2 = new _.OAuth2(oauth2Config);
    const verifier = _base64url.default.encode(_crypto.default.randomBytes(32));
    const challenge = _base64url.default.encode(_crypto.default.createHash('sha256').update(verifier).digest());
    const state = _base64url.default.encode(_crypto.default.randomBytes(32));
    const authzUrl = oauth2.getAuthorizationUrl({
      code_challenge: challenge,
      state
    });
    this.print('Opening authorization page in browser...');
    this.print(`URL: ${authzUrl}`);
    this.openUrl(authzUrl);
    const params = await this.waitCallback(oauth2Config.redirectUri, state);
    if (!params.code) {
      throw new Error('No authorization code returned.');
    }
    if (params.state !== state) {
      throw new Error('Invalid state parameter returned.');
    }
    this._conn = new _.Connection({
      oauth2
    });
    this.print('Received authorization code. Please close the opened browser window.');
    await this._conn.authorize(params.code, {
      code_verifier: verifier
    });
    this.print('Authorized. Fetching user info...');
    const identity = await this._conn.identity();
    this.print(`Logged in as : ${identity.username}`);
    this._connName = identity.username;
    this.saveCurrentConnection();
  }

  /**
   *
   */
  async downloadDefaultClientInfo(clientName) {
    const configUrl = 'https://jsforce.github.io/client-config/default.json';
    const res = await new _promise.default((resolve, reject) => {
      (0, _request.default)({
        method: 'GET',
        url: configUrl
      }).on('complete', resolve).on('error', reject);
    });
    const clientConfig = JSON.parse(res.body);
    if (clientName === 'sandbox') {
      clientConfig.loginUrl = 'https://test.salesforce.com';
    }
    await registry.registerClientConfig(clientName, clientConfig);
    this.print('Client information downloaded successfully.');
    return this.authorize(clientName);
  }
  async waitCallback(serverUrl, state) {
    if (serverUrl && (0, _indexOf.default)(serverUrl).call(serverUrl, 'http://localhost:') === 0) {
      return new _promise.default((resolve, reject) => {
        const server = _http.default.createServer((req, res) => {
          if (!req.url) {
            return;
          }
          const qparams = _url.default.parse(req.url, true).query;
          res.writeHead(200, {
            'Content-Type': 'text/html'
          });
          res.write('<html><script>location.href="about:blank";</script></html>');
          res.end();
          if (qparams.error) {
            reject(new Error(qparams.error));
          } else {
            resolve(qparams);
          }
          server.close();
          req.connection.end();
          req.connection.destroy();
        });
        const port = Number(_url.default.parse(serverUrl).port);
        server.listen(port, 'localhost');
      });
    } else {
      const code = await this.promptMessage('Copy & paste authz code passed in redirected URL: ');
      return {
        code: decodeURIComponent(code),
        state
      };
    }
  }

  /**
   *
   */
  async register(clientName, clientConfig) {
    var _context;
    const name = clientName || 'default';
    const prompts = {
      clientId: 'Input client ID : ',
      clientSecret: 'Input client secret (optional) : ',
      redirectUri: 'Input redirect URI : ',
      loginUrl: 'Input login URL (default is https://login.salesforce.com) : '
    };
    const registered = await registry.getClientConfig(name);
    if (registered) {
      const msg = `Client '${name}' is already registered. Are you sure you want to override ? [yN] : `;
      const ok = await this.promptConfirm(msg);
      if (!ok) {
        throw new Error('Registration canceled.');
      }
    }
    clientConfig = await (0, _reduce.default)(_context = (0, _keys.default)(prompts)).call(_context, async (promise, name) => {
      const cconfig = await promise;
      const promptName = name;
      const message = prompts[promptName];
      if (!cconfig[promptName]) {
        const value = await this.promptMessage(message);
        if (value) {
          return _objectSpread(_objectSpread({}, cconfig), {}, {
            [promptName]: value
          });
        }
      }
      return cconfig;
    }, _promise.default.resolve(clientConfig));
    await registry.registerClientConfig(name, clientConfig);
    this.print('Client registered successfully.');
  }

  /**
   *
   */
  async listConnections() {
    const names = await registry.getConnectionNames();
    for (var i = 0; i < names.length; i++) {
      var name = names[i];
      this.print((name === this._connName ? '* ' : '  ') + name);
    }
  }

  /**
   *
   */
  async getConnectionNames() {
    return registry.getConnectionNames();
  }

  /**
   *
   */
  async getClientNames() {
    return registry.getClientNames();
  }

  /**
   *
   */
  async prompt(type, message) {
    this._repl.pause();
    const answer = await _inquirer.default.prompt([{
      type,
      name: 'value',
      message
    }]);
    this._repl.resume();
    return answer.value;
  }

  /**
   *
   */
  async promptMessage(message) {
    return this.prompt('input', message);
  }
  async promptPassword(message) {
    return this.prompt('password', message);
  }

  /**
   *
   */
  async promptConfirm(message) {
    return this.prompt('confirm', message);
  }

  /**
   *
   */
  openUrl(url) {
    (0, _open.default)(url);
  }

  /**
   *
   */
  openUrlUsingSession(url) {
    let frontdoorUrl = `${this._conn.instanceUrl}/secur/frontdoor.jsp?sid=${this._conn.accessToken}`;
    if (url) {
      frontdoorUrl += '&retURL=' + encodeURIComponent(url);
    }
    this.openUrl(frontdoorUrl);
  }
}

/* ------------------------------------------------------------------------- */
exports.Cli = Cli;
const cli = new Cli();
var _default = cli;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,