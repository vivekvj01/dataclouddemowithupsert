"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _Object$defineProperties = require("@babel/runtime-corejs3/core-js-stable/object/define-properties");
var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors");
var _forEachInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/for-each");
var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");
var _filterInstanceProperty2 = require("@babel/runtime-corejs3/core-js-stable/instance/filter");
var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols");
var _Object$keys2 = require("@babel/runtime-corejs3/core-js-stable/object/keys");
require("core-js/modules/es.array.iterator");
require("core-js/modules/es.string.replace");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Parsable = exports.Serializable = exports.RecordStream = void 0;
var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));
var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/objectWithoutProperties"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));
var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));
var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reduce"));
var _stream = require("stream");
var _csv = require("./csv");
var _stream2 = require("./util/stream");
function ownKeys(object, enumerableOnly) { var keys = _Object$keys2(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty2(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source), true)).call(_context3, function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context4; _forEachInstanceProperty(_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; } /**
file Represents stream that handles Salesforce record as stream data
author Shinichi Tomita <shinichi.tomita@gmail.com>

/**
 * type defs
 */

/**
 * @private
 */
function evalMapping(value, mapping) {
  if (typeof value === 'string') {
    const m = /^\$\{(\w+)\}$/.exec(value);
    if (m) {
      return mapping[m[1]];
    }
    return value.replace(/\$\{(\w+)\}/g, ($0, prop) => {
      const v = mapping[prop];
      return typeof v === 'undefined' || v === null ? '' : String(v);
    });
  }
  return value;
}

/**
 * @private
 */
function convertRecordForSerialization(record, options = {}) {
  var _context;
  return (0, _reduce.default)(_context = (0, _keys.default)(record)).call(_context, (rec, key) => {
    const value = rec[key];
    let urec;
    if (key === 'attributes') {
      // 'attributes' prop will be ignored
      urec = _objectSpread({}, rec);
      delete urec[key];
      return urec;
    } else if (options.nullValue && value === null) {
      return _objectSpread(_objectSpread({}, rec), {}, {
        [key]: options.nullValue
      });
    } else if (value !== null && typeof value === 'object') {
      var _context2;
      const precord = convertRecordForSerialization(value, options);
      return (0, _reduce.default)(_context2 = (0, _keys.default)(precord)).call(_context2, (prec, pkey) => {
        prec[`${key}.${pkey}`] = precord[pkey]; // eslint-disable-line no-param-reassign
        return prec;
      }, _objectSpread({}, rec));
    }
    return rec;
  }, record);
}

/**
 * @private
 */
function createPipelineStream(s1, s2) {
  s1.pipe(s2);
  return (0, _stream2.concatStreamsAsDuplex)(s1, s2, {
    writableObjectMode: true
  });
}
/**
 * @private
 */
const CSVStreamConverter = {
  serialize(options = {}) {
    const {
        nullValue
      } = options,
      csvOpts = (0, _objectWithoutProperties2.default)(options, ["nullValue"]);
    return createPipelineStream(
    // eslint-disable-next-line no-use-before-define
    (0, _map.default)(RecordStream).call(RecordStream, record => convertRecordForSerialization(record, options)), (0, _csv.serializeCSVStream)(csvOpts));
  },
  parse(options = {}) {
    return (0, _csv.parseCSVStream)(options);
  }
};

/**
 * @private
 */
const DataStreamConverters = {
  csv: CSVStreamConverter
};

/**
 * Class for Record Stream
 *
 * @class
 * @constructor
 * @extends stream.Transform
 */
class RecordStream extends _stream.PassThrough {
  /**
   *
   */
  constructor() {
    super({
      objectMode: true
    });
    (0, _defineProperty2.default)(this, "addListener", this.on);
  }

  /**
   * Get record stream of queried records applying the given mapping function
   */
  map(fn) {
    return this.pipe((0, _map.default)(RecordStream).call(RecordStream, fn));
  }

  /**
   * Get record stream of queried records, applying the given filter function
   */
  filter(fn) {
    return this.pipe((0, _filter.default)(RecordStream).call(RecordStream, fn));
  }

  /* @override */
  on(ev, fn) {
    return super.on(ev === 'record' ? 'data' : ev, fn);
  }

  /* @override */

  /* --------------------------------------------------- */
  /**
   * Create a record stream which maps records and pass them to downstream
   */
  static map(fn) {
    const mapStream = new _stream.Transform({
      objectMode: true,
      transform(record, enc, callback) {
        const rec = fn(record) || record; // if not returned record, use same record
        mapStream.push(rec);
        callback();
      }
    });
    return mapStream;
  }

  /**
   * Create mapping stream using given record template
   */
  static recordMapStream(record, noeval) {
    return (0, _map.default)(RecordStream).call(RecordStream, rec => {
      const mapped = {
        Id: rec.Id
      };
      for (const prop of (0, _keys.default)(record)) {
        mapped[prop] = noeval ? record[prop] : evalMapping(record[prop], rec);
      }
      return mapped;
    });
  }

  /**
   * Create a record stream which filters records and pass them to downstream
   *
   * @param {RecordFilterFunction} fn - Record filtering function
   * @returns {RecordStream.Serializable}
   */
  static filter(fn) {
    const filterStream = new _stream.Transform({
      objectMode: true,
      transform(record, enc, callback) {
        if (fn(record)) {
          filterStream.push(record);
        }
        callback();
      }
    });
    return filterStream;
  }
}

/**
 * @class RecordStream.Serializable
 * @extends {RecordStream}
 */
exports.RecordStream = RecordStream;
class Serializable extends RecordStream {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "_dataStreams", {});
  }
  /**
   * Get readable data stream which emits serialized record data
   */
  stream(type = 'csv', options = {}) {
    if (this._dataStreams[type]) {
      return this._dataStreams[type];
    }
    const converter = DataStreamConverters[type];
    if (!converter) {
      throw new Error(`Converting [${type}] data stream is not supported.`);
    }
    const dataStream = new _stream.PassThrough();
    this.pipe(converter.serialize(options)).pipe(dataStream);
    this._dataStreams[type] = dataStream;
    return dataStream;
  }
}

/**
 * @class RecordStream.Parsable
 * @extends {RecordStream}
 */
exports.Serializable = Serializable;
class Parsable extends RecordStream {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "_dataStreams", {});
    (0, _defineProperty2.default)(this, "_execParse", false);
    (0, _defineProperty2.default)(this, "_incomings", []);
    (0, _defineProperty2.default)(this, "addListener", this.on);
  }
  /**
   * Get writable data stream which accepts serialized record data
   */
  stream(type = 'csv', options = {}) {
    if (this._dataStreams[type]) {
      return this._dataStreams[type];
    }
    const converter = DataStreamConverters[type];
    if (!converter) {
      throw new Error(`Converting [${type}] data stream is not supported.`);
    }
    const dataStream = new _stream.PassThrough();
    const parserStream = converter.parse(options);
    parserStream.on('error', err => this.emit('error', err));
    parserStream.pipe(this).pipe(new _stream.PassThrough({
      objectMode: true,
      highWaterMark: 500 * 1000
    }));
    if (this._execParse) {
      dataStream.pipe(parserStream);
    } else {
      this._incomings.push([dataStream, parserStream]);
    }
    this._dataStreams[type] = dataStream;
    return dataStream;
  }

  /* @override */
  on(ev, fn) {
    if (ev === 'readable' || ev === 'record') {
      if (!this._execParse) {
        this._execParse = true;
        for (const [dataStream, parserStream] of this._incomings) {
          dataStream.pipe(parserStream);
        }
      }
    }
    return super.on(ev, fn);
  }

  /* @override */
}
exports.Parsable = Parsable;
var _default = RecordStream;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,