"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _Object$defineProperties = require("@babel/runtime-corejs3/core-js-stable/object/define-properties");
var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors");
var _forEachInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/for-each");
var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");
var _filterInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/filter");
var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols");
var _Object$keys2 = require("@babel/runtime-corejs3/core-js-stable/object/keys");
require("core-js/modules/es.array.iterator");
require("core-js/modules/es.promise");
require("core-js/modules/es.string.replace");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.castTypeUsingSchema = castTypeUsingSchema;
exports.default = exports.SOAP = void 0;
var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));
var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reduce"));
var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));
var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));
var _httpApi = _interopRequireDefault(require("./http-api"));
var _function = require("./util/function");
function ownKeys(object, enumerableOnly) { var keys = _Object$keys2(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source), true)).call(_context3, function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context4; _forEachInstanceProperty(_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; } /**
file Manages method call to SOAP endpoint
author Shinichi Tomita <shinichi.tomita@gmail.com>

/**
 *
 */
function getPropsSchema(schema, schemaDict) {
  if (schema.extends && schemaDict[schema.extends]) {
    const extendSchema = schemaDict[schema.extends];
    return _objectSpread(_objectSpread({}, getPropsSchema(extendSchema, schemaDict)), schema.props);
  }
  return schema.props;
}
function isNillValue(value) {
  return value == null || (0, _function.isMapObject)(value) && (0, _function.isMapObject)(value.$) && value.$['xsi:nil'] === 'true';
}

/**
 *
 */
function castTypeUsingSchema(value, schema, schemaDict = {}) {
  if ((0, _isArray.default)(schema)) {
    var _context;
    const nillable = schema.length === 2 && schema[0] === '?';
    const schema_ = nillable ? schema[1] : schema[0];
    if (value == null) {
      return nillable ? null : [];
    }
    return (0, _map.default)(_context = (0, _isArray.default)(value) ? value : [value]).call(_context, v => castTypeUsingSchema(v, schema_, schemaDict));
  } else if ((0, _function.isMapObject)(schema)) {
    var _context2;
    // if schema is Schema Definition, not schema element
    if ('type' in schema && 'props' in schema && (0, _function.isMapObject)(schema.props)) {
      const props = getPropsSchema(schema, schemaDict);
      return castTypeUsingSchema(value, props, schemaDict);
    }
    const nillable = ('?' in schema);
    const schema_ = '?' in schema ? schema['?'] : schema;
    if (nillable && isNillValue(value)) {
      return null;
    }
    const obj = (0, _function.isMapObject)(value) ? value : {};
    return (0, _reduce.default)(_context2 = (0, _keys.default)(schema_)).call(_context2, (o, k) => {
      const s = schema_[k];
      const v = obj[k];
      const nillable = (0, _isArray.default)(s) && s.length === 2 && s[0] === '?' || (0, _function.isMapObject)(s) && '?' in s || typeof s === 'string' && s[0] === '?';
      if (typeof v === 'undefined' && nillable) {
        return o;
      }
      return _objectSpread(_objectSpread({}, o), {}, {
        [k]: castTypeUsingSchema(v, s, schemaDict)
      });
    }, obj);
  } else {
    const nillable = typeof schema === 'string' && schema[0] === '?';
    const type = typeof schema === 'string' ? nillable ? schema.substring(1) : schema : 'any';
    switch (type) {
      case 'string':
        return isNillValue(value) ? nillable ? null : '' : String(value);
      case 'number':
        return isNillValue(value) ? nillable ? null : 0 : Number(value);
      case 'boolean':
        return isNillValue(value) ? nillable ? null : false : value === 'true';
      case 'null':
        return null;
      default:
        {
          if (schemaDict[type]) {
            const cvalue = castTypeUsingSchema(value, schemaDict[type], schemaDict);
            const isEmpty = (0, _function.isMapObject)(cvalue) && (0, _keys.default)(cvalue).length === 0;
            return isEmpty && nillable ? null : cvalue;
          }
          return value;
        }
    }
  }
}

/**
 * @private
 */
function lookupValue(obj, propRegExps) {
  const regexp = propRegExps.shift();
  if (!regexp) {
    return obj;
  }
  if ((0, _function.isMapObject)(obj)) {
    for (const prop of (0, _keys.default)(obj)) {
      if (regexp.test(prop)) {
        return lookupValue(obj[prop], propRegExps);
      }
    }
    return null;
  }
}

/**
 * @private
 */
function toXML(name, value) {
  if ((0, _function.isObject)(name)) {
    value = name;
    name = null;
  }
  if ((0, _isArray.default)(value)) {
    return (0, _map.default)(value).call(value, v => toXML(name, v)).join('');
  } else {
    const attrs = [];
    const elems = [];
    if ((0, _function.isMapObject)(value)) {
      for (const k of (0, _keys.default)(value)) {
        const v = value[k];
        if (k[0] === '@') {
          const kk = k.substring(1);
          attrs.push(kk + '="' + v + '"');
        } else {
          elems.push(toXML(k, v));
        }
      }
      value = elems.join('');
    } else {
      value = String(value).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');
    }
    const startTag = name ? '<' + name + (attrs.length > 0 ? ' ' + attrs.join(' ') : '') + '>' : '';
    const endTag = name ? '</' + name + '>' : '';
    return startTag + value + endTag;
  }
}

/**
 *
 */

/**
 * Class for SOAP endpoint of Salesforce
 *
 * @protected
 * @class
 * @constructor
 * @param {Connection} conn - Connection instance
 * @param {Object} options - SOAP endpoint setting options
 * @param {String} options.endpointUrl - SOAP endpoint URL
 * @param {String} [options.xmlns] - XML namespace for method call (default is "urn:partner.soap.sforce.com")
 */
class SOAP extends _httpApi.default {
  constructor(conn, options) {
    super(conn, options);
    (0, _defineProperty2.default)(this, "_endpointUrl", void 0);
    (0, _defineProperty2.default)(this, "_xmlns", void 0);
    this._endpointUrl = options.endpointUrl;
    this._xmlns = options.xmlns || 'urn:partner.soap.sforce.com';
  }

  /**
   * Invoke SOAP call using method and arguments
   */
  async invoke(method, args, schema, schemaDict) {
    const res = await this.request({
      method: 'POST',
      url: this._endpointUrl,
      headers: {
        'Content-Type': 'text/xml',
        SOAPAction: '""'
      },
      _message: {
        [method]: args
      }
    });
    return schema ? castTypeUsingSchema(res, schema, schemaDict) : res;
  }

  /** @override */
  beforeSend(request) {
    request.body = this._createEnvelope(request._message);
  }

  /** @override **/
  isSessionExpired(response) {
    return response.statusCode === 500 && /<faultcode>[a-zA-Z]+:INVALID_SESSION_ID<\/faultcode>/.test(response.body);
  }

  /** @override **/
  parseError(body) {
    const error = lookupValue(body, [/:Envelope$/, /:Body$/, /:Fault$/]);
    return {
      errorCode: error.faultcode,
      message: error.faultstring
    };
  }

  /** @override **/
  async getResponseBody(response) {
    const body = await super.getResponseBody(response);
    return lookupValue(body, [/:Envelope$/, /:Body$/, /.+/]);
  }

  /**
   * @private
   */
  _createEnvelope(message) {
    const header = {};
    const conn = this._conn;
    if (conn.accessToken) {
      header.SessionHeader = {
        sessionId: conn.accessToken
      };
    }
    if (conn._callOptions) {
      header.CallOptions = conn._callOptions;
    }
    return ['<?xml version="1.0" encoding="UTF-8"?>', '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"', ' xmlns:xsd="http://www.w3.org/2001/XMLSchema"', ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">', '<soapenv:Header xmlns="' + this._xmlns + '">', toXML(header), '</soapenv:Header>', '<soapenv:Body xmlns="' + this._xmlns + '">', toXML(message), '</soapenv:Body>', '</soapenv:Envelope>'].join('');
  }
}
exports.SOAP = SOAP;
var _default = SOAP;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,