import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _Set from "@babel/runtime-corejs3/core-js-stable/set";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source), true)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context4; _forEachInstanceProperty(_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
import { PassThrough } from 'stream';
import { concatStreamsAsDuplex, readAll } from './util/stream';
import FormData from 'form-data';

/**
 *
 */
export function createHttpRequestHandlerStreams(req) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var reqBody = req.body;
  var input = new PassThrough();
  var output = new PassThrough();
  var duplex = concatStreamsAsDuplex(input, output);
  if (typeof reqBody !== 'undefined') {
    _setTimeout(function () {
      if (reqBody instanceof FormData) {
        duplex.end(reqBody.getBuffer());
      } else {
        duplex.end(reqBody, 'utf8');
      }
    }, 0);
  }
  duplex.on('response', /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(res) {
      var resBody;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(duplex.listenerCount('complete') > 0)) {
                _context.next = 5;
                break;
              }
              _context.next = 3;
              return readAll(duplex, options.encoding);
            case 3:
              resBody = _context.sent;
              duplex.emit('complete', _objectSpread(_objectSpread({}, res), {}, {
                body: resBody
              }));
            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
  return {
    input: input,
    output: output,
    stream: duplex
  };
}
var redirectStatuses = new _Set([301, 302, 303, 307, 308]);

/**
 *
 */
export function isRedirect(status) {
  return redirectStatuses.has(status);
}

/**
 *
 */
var MAX_REDIRECT_COUNT = 10;

/**
 *
 */
export function performRedirectRequest(req, res, followRedirect, counter, redirectCallback) {
  if (counter >= MAX_REDIRECT_COUNT) {
    throw new Error('Reached to maximum redirect count');
  }
  var redirectUrl = res.headers['location'];
  if (!redirectUrl) {
    throw new Error('No redirect URI found');
  }
  var getRedirectRequest = typeof followRedirect === 'function' ? followRedirect : function () {
    return {
      method: 'GET',
      url: redirectUrl,
      headers: req.headers
    };
  };
  var nextReqParams = getRedirectRequest(redirectUrl);
  if (!nextReqParams) {
    throw new Error('Cannot handle redirect for ' + redirectUrl);
  }
  redirectCallback(nextReqParams);
}

/**
 *
 */
export function executeWithTimeout(_x2, _x3, _x4) {
  return _executeWithTimeout.apply(this, arguments);
}
function _executeWithTimeout() {
  _executeWithTimeout = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(execFn, msec, cancelCallback) {
    var timeout, pid, res;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            timeout = false;
            pid = msec != null ? _setTimeout(function () {
              timeout = true;
              cancelCallback === null || cancelCallback === void 0 ? void 0 : cancelCallback();
            }, msec) : undefined;
            _context2.prev = 2;
            _context2.next = 5;
            return execFn();
          case 5:
            res = _context2.sent;
          case 6:
            _context2.prev = 6;
            if (pid) {
              clearTimeout(pid);
            }
            return _context2.finish(6);
          case 9:
            if (!timeout) {
              _context2.next = 11;
              break;
            }
            throw new Error('Request Timeout');
          case 11:
            return _context2.abrupt("return", res);
          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[2,, 6, 9]]);
  }));
  return _executeWithTimeout.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,