import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import "core-js/modules/es.object.to-string";
import "core-js/modules/es.regexp.to-string";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _toConsumableArray from "@babel/runtime-corejs3/helpers/toConsumableArray";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _assertThisInitialized from "@babel/runtime-corejs3/helpers/assertThisInitialized";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }
import { Duplex, PassThrough, Writable } from 'stream';
export function createLazyStream() {
  var ins = new PassThrough();
  var outs = new PassThrough();
  var stream = concatStreamsAsDuplex(ins, outs);
  var piped = false;
  var setStream = function setStream(str) {
    if (piped) {
      throw new Error('stream is already piped to actual stream');
    }
    piped = true;
    ins.pipe(str).pipe(outs);
  };
  return {
    stream: stream,
    setStream: setStream
  };
}
var MemoryWriteStream = /*#__PURE__*/function (_Writable) {
  _inherits(MemoryWriteStream, _Writable);
  var _super = _createSuper(MemoryWriteStream);
  function MemoryWriteStream() {
    var _this;
    _classCallCheck(this, MemoryWriteStream);
    _this = _super.call(this);
    _defineProperty(_assertThisInitialized(_this), "_buf", void 0);
    _this._buf = Buffer.alloc(0);
    return _this;
  }
  _createClass(MemoryWriteStream, [{
    key: "_write",
    value: function _write(chunk, encoding, callback) {
      this._buf = _concatInstanceProperty(Buffer).call(Buffer, [this._buf, chunk]);
      callback();
    }
  }, {
    key: "_writev",
    value: function _writev(data, callback) {
      var _context;
      this._buf = _concatInstanceProperty(Buffer).call(Buffer, _concatInstanceProperty(_context = [this._buf]).call(_context, _toConsumableArray(_mapInstanceProperty(data).call(data, function (_ref) {
        var chunk = _ref.chunk;
        return chunk;
      }))));
      callback();
    }
  }, {
    key: "toString",
    value: function toString() {
      var encoding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'utf-8';
      return this._buf.toString(encoding);
    }
  }]);
  return MemoryWriteStream;
}(Writable);
export function readAll(_x) {
  return _readAll.apply(this, arguments);
}
function _readAll() {
  _readAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(rs) {
    var encoding,
      _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            encoding = _args.length > 1 && _args[1] !== undefined ? _args[1] : 'utf-8';
            return _context2.abrupt("return", new _Promise(function (resolve, reject) {
              var ws = new MemoryWriteStream();
              rs.on('error', reject).pipe(ws).on('finish', function () {
                return resolve(ws.toString(encoding));
              });
            }));
          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee);
  }));
  return _readAll.apply(this, arguments);
}
var DuplexifiedStream = /*#__PURE__*/function (_Duplex) {
  _inherits(DuplexifiedStream, _Duplex);
  var _super2 = _createSuper(DuplexifiedStream);
  function DuplexifiedStream(ws, rs) {
    var _opts$writableObjectM, _opts$readableObjectM;
    var _this2;
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    _classCallCheck(this, DuplexifiedStream);
    _this2 = _super2.call(this, {
      writableObjectMode: (_opts$writableObjectM = opts.writableObjectMode) !== null && _opts$writableObjectM !== void 0 ? _opts$writableObjectM : ws.writableObjectMode,
      readableObjectMode: (_opts$readableObjectM = opts.readableObjectMode) !== null && _opts$readableObjectM !== void 0 ? _opts$readableObjectM : rs.readableObjectMode
    });
    _defineProperty(_assertThisInitialized(_this2), "_writable", void 0);
    _defineProperty(_assertThisInitialized(_this2), "_readable", void 0);
    _this2._writable = ws;
    _this2._readable = rs;
    ws.once('finish', function () {
      _this2.end();
    });
    _this2.once('finish', function () {
      ws.end();
    });
    rs.on('readable', function () {
      _this2._readStream();
    });
    rs.once('end', function () {
      _this2.push(null);
    });
    ws.on('error', function (err) {
      return _this2.emit('error', err);
    });
    rs.on('error', function (err) {
      return _this2.emit('error', err);
    });
    return _this2;
  }
  _createClass(DuplexifiedStream, [{
    key: "_write",
    value: function _write(chunk, encoding, callback) {
      this._writable.write(chunk, encoding, callback);
    }
  }, {
    key: "_read",
    value: function _read(n) {
      this._readStream(n);
    }
  }, {
    key: "_readStream",
    value: function _readStream(n) {
      var data;
      while ((data = this._readable.read(n)) !== null) {
        this.push(data);
      }
    }
  }]);
  return DuplexifiedStream;
}(Duplex);
export function concatStreamsAsDuplex(ws, rs, opts) {
  return new DuplexifiedStream(ws, rs, opts);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEdXBsZXgiLCJQYXNzVGhyb3VnaCIsIldyaXRhYmxlIiwiY3JlYXRlTGF6eVN0cmVhbSIsImlucyIsIm91dHMiLCJzdHJlYW0iLCJjb25jYXRTdHJlYW1zQXNEdXBsZXgiLCJwaXBlZCIsInNldFN0cmVhbSIsInN0ciIsIkVycm9yIiwicGlwZSIsIk1lbW9yeVdyaXRlU3RyZWFtIiwiX1dyaXRhYmxlIiwiX2luaGVyaXRzIiwiX3N1cGVyIiwiX2NyZWF0ZVN1cGVyIiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2siLCJjYWxsIiwiX2RlZmluZVByb3BlcnR5IiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIl9idWYiLCJCdWZmZXIiLCJhbGxvYyIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiX3dyaXRlIiwiY2h1bmsiLCJlbmNvZGluZyIsImNhbGxiYWNrIiwiX2NvbmNhdEluc3RhbmNlUHJvcGVydHkiLCJfd3JpdGV2IiwiZGF0YSIsIl9jb250ZXh0IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiX21hcEluc3RhbmNlUHJvcGVydHkiLCJfcmVmIiwidG9TdHJpbmciLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJyZWFkQWxsIiwiX3giLCJfcmVhZEFsbCIsImFwcGx5IiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJfcmVnZW5lcmF0b3JSdW50aW1lIiwibWFyayIsIl9jYWxsZWUiLCJycyIsIl9hcmdzIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQyIiwicHJldiIsIm5leHQiLCJhYnJ1cHQiLCJfUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ3cyIsIm9uIiwic3RvcCIsIkR1cGxleGlmaWVkU3RyZWFtIiwiX0R1cGxleCIsIl9zdXBlcjIiLCJfb3B0cyR3cml0YWJsZU9iamVjdE0iLCJfb3B0cyRyZWFkYWJsZU9iamVjdE0iLCJfdGhpczIiLCJvcHRzIiwid3JpdGFibGVPYmplY3RNb2RlIiwicmVhZGFibGVPYmplY3RNb2RlIiwiX3dyaXRhYmxlIiwiX3JlYWRhYmxlIiwib25jZSIsImVuZCIsIl9yZWFkU3RyZWFtIiwicHVzaCIsImVyciIsImVtaXQiLCJ3cml0ZSIsIl9yZWFkIiwibiIsInJlYWQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbC9zdHJlYW0udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHVwbGV4LCBQYXNzVGhyb3VnaCwgUmVhZGFibGUsIFdyaXRhYmxlIH0gZnJvbSAnc3RyZWFtJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxhenlTdHJlYW0oKSB7XG4gIGNvbnN0IGlucyA9IG5ldyBQYXNzVGhyb3VnaCgpO1xuICBjb25zdCBvdXRzID0gbmV3IFBhc3NUaHJvdWdoKCk7XG4gIGNvbnN0IHN0cmVhbSA9IGNvbmNhdFN0cmVhbXNBc0R1cGxleChpbnMsIG91dHMpO1xuICBsZXQgcGlwZWQgPSBmYWxzZTtcbiAgY29uc3Qgc2V0U3RyZWFtID0gKHN0cjogRHVwbGV4KSA9PiB7XG4gICAgaWYgKHBpcGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N0cmVhbSBpcyBhbHJlYWR5IHBpcGVkIHRvIGFjdHVhbCBzdHJlYW0nKTtcbiAgICB9XG4gICAgcGlwZWQgPSB0cnVlO1xuICAgIGlucy5waXBlKHN0cikucGlwZShvdXRzKTtcbiAgfTtcbiAgcmV0dXJuIHsgc3RyZWFtLCBzZXRTdHJlYW0gfTtcbn1cblxuY2xhc3MgTWVtb3J5V3JpdGVTdHJlYW0gZXh0ZW5kcyBXcml0YWJsZSB7XG4gIF9idWY6IEJ1ZmZlcjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2J1ZiA9IEJ1ZmZlci5hbGxvYygwKTtcbiAgfVxuXG4gIF93cml0ZShjaHVuazogQnVmZmVyLCBlbmNvZGluZzogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24pIHtcbiAgICB0aGlzLl9idWYgPSBCdWZmZXIuY29uY2F0KFt0aGlzLl9idWYsIGNodW5rXSk7XG4gICAgY2FsbGJhY2soKTtcbiAgfVxuXG4gIF93cml0ZXYoXG4gICAgZGF0YTogQXJyYXk8eyBjaHVuazogQnVmZmVyOyBlbmNvZGluZzogc3RyaW5nIH0+LFxuICAgIGNhbGxiYWNrOiBGdW5jdGlvbixcbiAgKSB7XG4gICAgdGhpcy5fYnVmID0gQnVmZmVyLmNvbmNhdChbdGhpcy5fYnVmLCAuLi5kYXRhLm1hcCgoeyBjaHVuayB9KSA9PiBjaHVuayldKTtcbiAgICBjYWxsYmFjaygpO1xuICB9XG5cbiAgdG9TdHJpbmcoZW5jb2Rpbmc6IHN0cmluZyA9ICd1dGYtOCcpIHtcbiAgICByZXR1cm4gdGhpcy5fYnVmLnRvU3RyaW5nKGVuY29kaW5nKTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVhZEFsbChyczogUmVhZGFibGUsIGVuY29kaW5nOiBzdHJpbmcgPSAndXRmLTgnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCB3cyA9IG5ldyBNZW1vcnlXcml0ZVN0cmVhbSgpO1xuICAgIHJzLm9uKCdlcnJvcicsIHJlamVjdClcbiAgICAgIC5waXBlKHdzKVxuICAgICAgLm9uKCdmaW5pc2gnLCAoKSA9PiByZXNvbHZlKHdzLnRvU3RyaW5nKGVuY29kaW5nKSkpO1xuICB9KTtcbn1cblxuY2xhc3MgRHVwbGV4aWZpZWRTdHJlYW0gZXh0ZW5kcyBEdXBsZXgge1xuICBfd3JpdGFibGU6IFdyaXRhYmxlO1xuICBfcmVhZGFibGU6IFJlYWRhYmxlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHdzOiBXcml0YWJsZSxcbiAgICByczogUmVhZGFibGUsXG4gICAgb3B0czogeyB3cml0YWJsZU9iamVjdE1vZGU/OiBib29sZWFuOyByZWFkYWJsZU9iamVjdE1vZGU/OiBib29sZWFuIH0gPSB7fSxcbiAgKSB7XG4gICAgc3VwZXIoe1xuICAgICAgd3JpdGFibGVPYmplY3RNb2RlOiBvcHRzLndyaXRhYmxlT2JqZWN0TW9kZSA/PyB3cy53cml0YWJsZU9iamVjdE1vZGUsXG4gICAgICByZWFkYWJsZU9iamVjdE1vZGU6IG9wdHMucmVhZGFibGVPYmplY3RNb2RlID8/IHJzLnJlYWRhYmxlT2JqZWN0TW9kZSxcbiAgICB9KTtcbiAgICB0aGlzLl93cml0YWJsZSA9IHdzO1xuICAgIHRoaXMuX3JlYWRhYmxlID0gcnM7XG4gICAgd3Mub25jZSgnZmluaXNoJywgKCkgPT4ge1xuICAgICAgdGhpcy5lbmQoKTtcbiAgICB9KTtcbiAgICB0aGlzLm9uY2UoJ2ZpbmlzaCcsICgpID0+IHtcbiAgICAgIHdzLmVuZCgpO1xuICAgIH0pO1xuICAgIHJzLm9uKCdyZWFkYWJsZScsICgpID0+IHtcbiAgICAgIHRoaXMuX3JlYWRTdHJlYW0oKTtcbiAgICB9KTtcbiAgICBycy5vbmNlKCdlbmQnLCAoKSA9PiB7XG4gICAgICB0aGlzLnB1c2gobnVsbCk7XG4gICAgfSk7XG4gICAgd3Mub24oJ2Vycm9yJywgKGVycikgPT4gdGhpcy5lbWl0KCdlcnJvcicsIGVycikpO1xuICAgIHJzLm9uKCdlcnJvcicsIChlcnIpID0+IHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpKTtcbiAgfVxuXG4gIF93cml0ZShjaHVuazogYW55LCBlbmNvZGluZzogYW55LCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5fd3JpdGFibGUud3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjayk7XG4gIH1cblxuICBfcmVhZChuOiBudW1iZXIpIHtcbiAgICB0aGlzLl9yZWFkU3RyZWFtKG4pO1xuICB9XG5cbiAgX3JlYWRTdHJlYW0obj86IG51bWJlcikge1xuICAgIGxldCBkYXRhO1xuICAgIHdoaWxlICgoZGF0YSA9IHRoaXMuX3JlYWRhYmxlLnJlYWQobikpICE9PSBudWxsKSB7XG4gICAgICB0aGlzLnB1c2goZGF0YSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRTdHJlYW1zQXNEdXBsZXgoXG4gIHdzOiBXcml0YWJsZSxcbiAgcnM6IFJlYWRhYmxlLFxuICBvcHRzPzogeyB3cml0YWJsZU9iamVjdE1vZGU/OiBib29sZWFuOyByZWFkYWJsZU9iamVjdE1vZGU/OiBib29sZWFuIH0sXG4pOiBEdXBsZXgge1xuICByZXR1cm4gbmV3IER1cGxleGlmaWVkU3RyZWFtKHdzLCBycywgb3B0cyk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxTQUFTQSxNQUFNLEVBQUVDLFdBQVcsRUFBWUMsUUFBUSxRQUFRLFFBQVE7QUFFaEUsT0FBTyxTQUFTQyxnQkFBZ0JBLENBQUEsRUFBRztFQUNqQyxJQUFNQyxHQUFHLEdBQUcsSUFBSUgsV0FBVyxDQUFDLENBQUM7RUFDN0IsSUFBTUksSUFBSSxHQUFHLElBQUlKLFdBQVcsQ0FBQyxDQUFDO0VBQzlCLElBQU1LLE1BQU0sR0FBR0MscUJBQXFCLENBQUNILEdBQUcsRUFBRUMsSUFBSSxDQUFDO0VBQy9DLElBQUlHLEtBQUssR0FBRyxLQUFLO0VBQ2pCLElBQU1DLFNBQVMsR0FBRyxTQUFaQSxTQUFTQSxDQUFJQyxHQUFXLEVBQUs7SUFDakMsSUFBSUYsS0FBSyxFQUFFO01BQ1QsTUFBTSxJQUFJRyxLQUFLLENBQUMsMENBQTBDLENBQUM7SUFDN0Q7SUFDQUgsS0FBSyxHQUFHLElBQUk7SUFDWkosR0FBRyxDQUFDUSxJQUFJLENBQUNGLEdBQUcsQ0FBQyxDQUFDRSxJQUFJLENBQUNQLElBQUksQ0FBQztFQUMxQixDQUFDO0VBQ0QsT0FBTztJQUFFQyxNQUFNLEVBQU5BLE1BQU07SUFBRUcsU0FBUyxFQUFUQTtFQUFVLENBQUM7QUFDOUI7QUFBQyxJQUVLSSxpQkFBaUIsMEJBQUFDLFNBQUE7RUFBQUMsU0FBQSxDQUFBRixpQkFBQSxFQUFBQyxTQUFBO0VBQUEsSUFBQUUsTUFBQSxHQUFBQyxZQUFBLENBQUFKLGlCQUFBO0VBR3JCLFNBQUFBLGtCQUFBLEVBQWM7SUFBQSxJQUFBSyxLQUFBO0lBQUFDLGVBQUEsT0FBQU4saUJBQUE7SUFDWkssS0FBQSxHQUFBRixNQUFBLENBQUFJLElB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