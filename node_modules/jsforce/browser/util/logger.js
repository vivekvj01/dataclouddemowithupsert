import _toConsumableArray from "@babel/runtime-corejs3/helpers/toConsumableArray";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
/**
 *
 */
export var LogLevels = {
  DEBUG: 1,
  INFO: 2,
  WARN: 3,
  ERROR: 4,
  FATAL: 5,
  NONE: 6
};
var LogLevelLabels = ['', 'DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL', 'NONE'];
var globalLogLevelConfig = function () {
  var globalLogLevelStr = process.env.JSFORCE_LOG_LEVEL || global.__JSFORCE_LOG_LEVEL__ || 'NONE';
  if (/^(DEBUG|INFO|WARN|ERROR|FATAL|NONE)$/i.test(globalLogLevelStr)) {
    return {
      '*': globalLogLevelStr
    };
  }
  try {
    return JSON.parse(globalLogLevelStr);
  } catch (e) {
    return {
      '*': 'NONE'
    };
  }
}();
function getModuleLogLevel(logLevelConfig, moduleName) {
  var logLevel = logLevelConfig[moduleName] || logLevelConfig['*'];
  return typeof logLevel === 'number' ? logLevel : LogLevels[logLevel] || LogLevels.NONE;
}

/**
 *
 */
export var Logger = /*#__PURE__*/function () {
  function Logger(moduleName) {
    var logLevelConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : globalLogLevelConfig;
    _classCallCheck(this, Logger);
    _defineProperty(this, "_moduleName", void 0);
    _defineProperty(this, "_logLevel", void 0);
    this._moduleName = moduleName;
    this._logLevel = typeof logLevelConfig === 'number' ? logLevelConfig : typeof logLevelConfig === 'string' ? LogLevels[logLevelConfig] || LogLevels.NONE : getModuleLogLevel(logLevelConfig, moduleName);
  }
  _createClass(Logger, [{
    key: "createInstance",
    value: function createInstance() {
      var logLevelConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._logLevel;
      return new Logger(this._moduleName, logLevelConfig);
    }
  }, {
    key: "setLogLevel",
    value: function setLogLevel(logLevel) {
      if (typeof logLevel === 'string') {
        this._logLevel = LogLevels[logLevel] || LogLevels.NONE;
      } else {
        this._logLevel = logLevel;
      }
    }
  }, {
    key: "log",
    value: function log(logLevel) {
      if (this._logLevel <= logLevel) {
        var _context, _context2;
        for (var _len = arguments.length, messages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          messages[_key - 1] = arguments[_key];
        }
        var msgs = _concatInstanceProperty(_context = [_concatInstanceProperty(_context2 = "".concat(LogLevelLabels[logLevel], "\t[")).call(_context2, this._moduleName, "] ")]).call(_context, messages);
        if (logLevel < LogLevels.ERROR) {
          var _console;
          (_console = console).log.apply(_console, _toConsumableArray(msgs)); // eslint-disable-line no-console
        } else {
          var _console2;
          (_console2 = console).error.apply(_console2, _toConsumableArray(msgs)); // eslint-disable-line no-console
        }
      }
    }
  }, {
    key: "debug",
    value: function debug() {
      var _context3;
      for (var _len2 = arguments.length, messages = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        messages[_key2] = arguments[_key2];
      }
      this.log.apply(this, _concatInstanceProperty(_context3 = [LogLevels.DEBUG]).call(_context3, messages));
    }
  }, {
    key: "info",
    value: function info() {
      var _context4;
      for (var _len3 = arguments.length, messages = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        messages[_key3] = arguments[_key3];
      }
      this.log.apply(this, _concatInstanceProperty(_context4 = [LogLevels.INFO]).call(_context4, messages));
    }
  }, {
    key: "warn",
    value: function warn() {
      var _context5;
      for (var _len4 = arguments.length, messages = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        messages[_key4] = arguments[_key4];
      }
      this.log.apply(this, _concatInstanceProperty(_context5 = [LogLevels.WARN]).call(_context5, messages));
    }
  }, {
    key: "error",
    value: function error() {
      var _context6;
      for (var _len5 = arguments.length, messages = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        messages[_key5] = arguments[_key5];
      }
      this.log.apply(this, _concatInstanceProperty(_context6 = [LogLevels.ERROR]).call(_context6, messages));
    }
  }, {
    key: "fatal",
    value: function fatal() {
      var _context7;
      for (var _len6 = arguments.length, messages = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        messages[_key6] = arguments[_key6];
      }
      this.log.apply(this, _concatInstanceProperty(_context7 = [LogLevels.FATAL]).call(_context7, messages));
    }
  }]);
  return Logger;
}();
var loggers = {};

/**
 *
 */
export function getLogger(moduleName) {
  var logger = loggers[moduleName] || new Logger(moduleName);
  loggers[moduleName] = logger;
  return logger;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,