import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import "core-js/modules/es.array.join";
import "core-js/modules/es.function.name";
import _wrapNativeSuper from "@babel/runtime-corejs3/helpers/wrapNativeSuper";
import _typeof from "@babel/runtime-corejs3/helpers/typeof";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _Object$keys2 from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _Date$now from "@babel/runtime-corejs3/core-js-stable/date/now";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import "regenerator-runtime/runtime";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _assertThisInitialized from "@babel/runtime-corejs3/helpers/assertThisInitialized";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }
/**
 *
 */
import { EventEmitter } from 'events';
import xml2js from 'xml2js';
import { getLogger } from './util/logger';
import { StreamPromise } from './util/promise';
import { parseCSV } from './csv';
import { createLazyStream } from './util/stream';

/** @private */
function parseJSON(str) {
  return JSON.parse(str);
}

/** @private */
function parseXML(_x) {
  return _parseXML.apply(this, arguments);
}
/** @private */
function _parseXML() {
  _parseXML = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(str) {
    return _regeneratorRuntime.wrap(function _callee5$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            return _context8.abrupt("return", xml2js.parseStringPromise(str, {
              explicitArray: false
            }));
          case 1:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee5);
  }));
  return _parseXML.apply(this, arguments);
}
function parseText(str) {
  return str;
}

/**
 * HTTP based API class with authorization hook
 */
export var HttpApi = /*#__PURE__*/function (_EventEmitter) {
  _inherits(HttpApi, _EventEmitter);
  var _super = _createSuper(HttpApi);
  function HttpApi(conn, options) {
    var _this;
    _classCallCheck(this, HttpApi);
    _this = _super.call(this);
    _defineProperty(_assertThisInitialized(_this), "_conn", void 0);
    _defineProperty(_assertThisInitialized(_this), "_logger", void 0);
    _defineProperty(_assertThisInitialized(_this), "_transport", void 0);
    _defineProperty(_assertThisInitialized(_this), "_responseType", void 0);
    _defineProperty(_assertThisInitialized(_this), "_noContentResponse", void 0);
    _defineProperty(_assertThisInitialized(_this), "_options", void 0);
    _this._conn = conn;
    _this._logger = conn._logLevel ? HttpApi._logger.createInstance(conn._logLevel) : HttpApi._logger;
    _this._responseType = options.responseType;
    _this._transport = options.transport || conn._transport;
    _this._noContentResponse = options.noContentResponse;
    _this._options = options;
    return _this;
  }

  /**
   * Callout to API endpoint using http
   */
  _createClass(HttpApi, [{
    key: "request",
    value: function request(_request) {
      var _this2 = this;
      return StreamPromise.create(function () {
        var _createLazyStream = createLazyStream(),
          stream = _createLazyStream.stream,
          setStream = _createLazyStream.setStream;
        var promise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          var _context, _context2;
          var refreshDelegate, bodyPromise, _body2, requestTime, requestPromise, response, responseTime, err, body;
          return _regeneratorRuntime.wrap(function _callee$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  refreshDelegate = _this2.getRefreshDelegate();
                  /* TODO decide remove or not this section */
                  /*
                  // remember previous instance url in case it changes after a refresh
                  const lastInstanceUrl = conn.instanceUrl;
                   // check to see if the token refresh has changed the instance url
                  if(lastInstanceUrl !== conn.instanceUrl){
                    // if the instance url has changed
                    // then replace the current request urls instance url fragment
                    // with the updated instance url
                    request.url = request.url.replace(lastInstanceUrl,conn.instanceUrl);
                  }
                  */
                  if (!(refreshDelegate && refreshDelegate.isRefreshing())) {
                    _context3.next = 10;
                    break;
                  }
                  _context3.next = 4;
                  return refreshDelegate.waitRefresh();
                case 4:
                  bodyPromise = _this2.request(_request);
                  setStream(bodyPromise.stream());
                  _context3.next = 8;
                  return bodyPromise;
                case 8:
                  _body2 = _context3.sent;
                  return _context3.abrupt("return", _body2);
                case 10:
                  // hook before sending
                  _this2.beforeSend(_request);
                  _this2.emit('request', _request);
                  _this2._logger.debug(_concatInstanceProperty(_context = "<request> method=".concat(_request.method, ", url=")).call(_context, _request.url));
                  requestTime = _Date$now();
                  requestPromise = _this2._transport.httpRequest(_request, _this2._options);
                  setStream(requestPromise.stream());
                  _context3.prev = 16;
                  _context3.next = 19;
                  return requestPromise;
                case 19:
                  response = _context3.sent;
                  _context3.next = 26;
                  break;
                case 22:
                  _context3.prev = 22;
                  _context3.t0 = _context3["catch"](16);
                  _this2._logger.error(_context3.t0);
                  throw _context3.t0;
                case 26:
                  _context3.prev = 26;
                  responseTime = _Date$now();
                  _this2._logger.debug("elapsed time: ".concat(responseTime - requestTime, " msec"));
                  return _context3.finish(26);
                case 30:
                  if (response) {
                    _context3.next = 32;
                    break;
                  }
                  return _context3.abrupt("return");
                case 32:
                  _this2._logger.debug(_concatInstanceProperty(_context2 = "<response> status=".concat(String(response.statusCode), ", url=")).call(_context2, _request.url));
                  _this2.emit('response', response);
                  // Refresh token if session has been expired and requires authentication
                  // when session refresh delegate is available
                  if (!(_this2.isSessionExpired(response) && refreshDelegate)) {
                    _context3.next = 38;
                    break;
                  }
                  _context3.next = 37;
                  return refreshDelegate.refresh(requestTime);
                case 37:
                  return _context3.abrupt("return", _this2.request(_request));
                case 38:
                  if (!_this2.isErrorResponse(response)) {
                    _context3.next = 43;
                    break;
                  }
                  _context3.next = 41;
                  return _this2.getError(response);
                case 41:
                  err = _context3.sent;
                  throw err;
                case 43:
                  _context3.next = 45;
                  return _this2.getResponseBody(response);
                case 45:
                  body = _context3.sent;
                  return _context3.abrupt("return", body);
                case 47:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee, null, [[16, 22, 26, 30]]);
        }))();
        return {
          stream: stream,
          promise: promise
        };
      });
    }
    /**
     * @protected
     */
  }, {
    key: "getRefreshDelegate",
    value: function getRefreshDelegate() {
      return this._conn._refreshDelegate;
    }
    /**
     * @protected
     */
  }, {
    key: "beforeSend",
    value: function beforeSend(request) {
      /* eslint-disable no-param-reassign */
      var headers = request.headers || {};
      if (this._conn.accessToken) {
        headers.Authorization = "Bearer ".concat(this._conn.accessToken);
      }
      if (this._conn._callOptions) {
        var callOptions = [];
        for (var _i = 0, _Object$keys = _Object$keys2(this._conn._callOptions); _i < _Object$keys.length; _i++) {
          var _context4;
          var name = _Object$keys[_i];
          callOptions.push(_concatInstanceProperty(_context4 = "".concat(name, "=")).call(_context4, this._conn._callOptions[name]));
        }
        headers['Sforce-Call-Options'] = callOptions.join(', ');
      }
      request.headers = headers;
    }
    /**
     * Detect response content mime-type
     * @protected
     */
  }, {
    key: "getResponseContentType",
    value: function getResponseContentType(response) {
      return this._responseType || response.headers && response.headers['content-type'];
    }
    /**
     * @private
     */
  }, {
    key: "parseResponseBody",
    value: function () {
      var _parseResponseBody = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(response) {
        var contentType, parseBody;
        return _regeneratorRuntime.wrap(function _callee2$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                contentType = this.getResponseContentType(response) || '';
                parseBody = /^(text|application)\/xml(;|$)/.test(contentType) ? parseXML : /^application\/json(;|$)/.test(contentType) ? parseJSON : /^text\/csv(;|$)/.test(contentType) ? parseCSV : parseText;
                _context5.prev = 2;
                return _context5.abrupt("return", parseBody(response.body));
              case 6:
                _context5.prev = 6;
                _context5.t0 = _context5["catch"](2);
                return _context5.abrupt("return", response.body);
              case 9:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee2, this, [[2, 6]]);
      }));
      function parseResponseBody(_x2) {
        return _parseResponseBody.apply(this, arguments);
      }
      return parseResponseBody;
    }()
    /**
     * Get response body
     * @protected
     */
  }, {
    key: "getResponseBody",
    value: function () {
      var _getResponseBody = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(response) {
        var body, err;
        return _regeneratorRuntime.wrap(function _callee3$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (!(response.statusCode === 204)) {
                  _context6.next = 2;
                  break;
                }
                return _context6.abrupt("return", this._noContentResponse);
              case 2:
                _context6.next = 4;
                return this.parseResponseBody(response);
              case 4:
                body = _context6.sent;
                if (!this.hasErrorInResponseBody(body)) {
                  _context6.next = 10;
                  break;
                }
                _context6.next = 8;
                return this.getError(response, body);
              case 8:
                err = _context6.sent;
                throw err;
              case 10:
                if (!(response.statusCode === 300)) {
                  _context6.next = 12;
                  break;
                }
                throw new HttpApiError('Multiple records found', 'MULTIPLE_CHOICES', body);
              case 12:
                return _context6.abrupt("return", body);
              case 13:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee3, this);
      }));
      function getResponseBody(_x3) {
        return _getResponseBody.apply(this, arguments);
      }
      return getResponseBody;
    }()
    /**
     * Detect session expiry
     * @protected
     */
  }, {
    key: "isSessionExpired",
    value: function isSessionExpired(response) {
      return response.statusCode === 401;
    }
    /**
     * Detect error response
     * @protected
     */
  }, {
    key: "isErrorResponse",
    value: function isErrorResponse(response) {
      return response.statusCode >= 400;
    }
    /**
     * Detect error in response body
     * @protected
     */
  }, {
    key: "hasErrorInResponseBody",
    value: function hasErrorInResponseBody(_body) {
      return false;
    }
    /**
     * Parsing error message in response
     * @protected
     */
  }, {
    key: "parseError",
    value: function parseError(body) {
      var errors = body;
      return _Array$isArray(errors) ? errors[0] : errors;
    }
    /**
     * Get error message in response
     * @protected
     */
  }, {
    key: "getError",
    value: function () {
      var _getError = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(response, body) {
        var error;
        return _regeneratorRuntime.wrap(function _callee4$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.prev = 0;
                _context7.t0 = this;
                _context7.t1 = body;
                if (_context7.t1) {
                  _context7.next = 7;
                  break;
                }
                _context7.next = 6;
                return this.parseResponseBody(response);
              case 6:
                _context7.t1 = _context7.sent;
              case 7:
                _context7.t2 = _context7.t1;
                error = _context7.t0.parseError.call(_context7.t0, _context7.t2);
                _context7.next = 13;
                break;
              case 11:
                _context7.prev = 11;
                _context7.t3 = _context7["catch"](0);
              case 13:
                error = _typeof(error) === 'object' && error !== null && typeof error.message === 'string' ? error : {
                  errorCode: "ERROR_HTTP_".concat(response.statusCode),
                  message: response.body
                };
                if (!(response.headers['content-type'] === 'text/html')) {
                  _context7.next = 17;
                  break;
                }
                this._logger.debug("html response.body: ".concat(response.body));
                return _context7.abrupt("return", new HttpApiError("HTTP response contains html content.\nCheck that the org exists and can be reached.\nSee error.content for the full html response.", error.errorCode, error.message));
              case 17:
                return _context7.abrupt("return", new HttpApiError(error.message, error.errorCode));
              case 18:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee4, this, [[0, 11]]);
      }));
      function getError(_x4, _x5) {
        return _getError.apply(this, arguments);
      }
      return getError;
    }()
  }]);
  return HttpApi;
}(EventEmitter);

/**
 *
 */
_defineProperty(HttpApi, "_logger", getLogger('http-api'));
var HttpApiError = /*#__PURE__*/function (_Error) {
  _inherits(HttpApiError, _Error);
  var _super2 = _createSuper(HttpApiError);
  function HttpApiError(message, errorCode, content) {
    var _this3;
    _classCallCheck(this, HttpApiError);
    _this3 = _super2.call(this, message);
    _defineProperty(_assertThisInitialized(_this3), "errorCode", void 0);
    _defineProperty(_assertThisInitialized(_this3), "content", void 0);
    _this3.name = errorCode || _this3.name;
    _this3.errorCode = _this3.name;
    _this3.content = content;
    return _this3;
  }
  return HttpApiError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
export default HttpApi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,