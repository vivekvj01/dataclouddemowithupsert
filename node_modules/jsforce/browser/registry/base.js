import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context10; _forEachInstanceProperty(_context10 = ownKeys(Object(source), true)).call(_context10, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context11; _forEachInstanceProperty(_context11 = ownKeys(Object(source))).call(_context11, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
import Connection from '../connection';
/**
 *
 */
export var BaseRegistry = /*#__PURE__*/function () {
  function BaseRegistry() {
    _classCallCheck(this, BaseRegistry);
    _defineProperty(this, "_registryConfig", {});
  }
  _createClass(BaseRegistry, [{
    key: "_saveConfig",
    value: function _saveConfig() {
      throw new Error('_saveConfig must be implemented in subclass');
    }
  }, {
    key: "_getClients",
    value: function _getClients() {
      return this._registryConfig.clients || (this._registryConfig.clients = {});
    }
  }, {
    key: "_getConnections",
    value: function _getConnections() {
      return this._registryConfig.connections || (this._registryConfig.connections = {});
    }
  }, {
    key: "getConnectionNames",
    value: function () {
      var _getConnectionNames = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", _Object$keys(this._getConnections()));
              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function getConnectionNames() {
        return _getConnectionNames.apply(this, arguments);
      }
      return getConnectionNames;
    }()
  }, {
    key: "getConnection",
    value: function () {
      var _getConnection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name) {
        var config;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.getConnectionConfig(name);
              case 2:
                config = _context2.sent;
                return _context2.abrupt("return", config ? new Connection(config) : null);
              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function getConnection(_x) {
        return _getConnection.apply(this, arguments);
      }
      return getConnection;
    }()
  }, {
    key: "getConnectionConfig",
    value: function () {
      var _getConnectionConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(name) {
        var connections, connConfig, client, connConfig_;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!name) {
                  name = this._registryConfig['default'];
                }
                connections = this._getConnections();
                connConfig = name ? connections[name] : undefined;
                if (connConfig) {
                  _context3.next = 5;
                  break;
                }
                return _context3.abrupt("return", null);
              case 5:
                client = connConfig.client, connConfig_ = _objectWithoutProperties(connConfig, ["client"]);
                if (!client) {
                  _context3.next = 18;
                  break;
                }
                _context3.t0 = _objectSpread;
                _context3.t1 = _objectSpread({}, connConfig_);
                _context3.t2 = {};
                _context3.t3 = _objectSpread;
                _context3.t4 = {};
                _context3.next = 14;
                return this.getClientConfig(client);
              case 14:
                _context3.t5 = _context3.sent;
                _context3.t6 = (0, _context3.t3)(_context3.t4, _context3.t5);
                _context3.t7 = {
                  oauth2: _context3.t6
                };
                return _context3.abrupt("return", (0, _context3.t0)(_context3.t1, _context3.t2, _context3.t7));
              case 18:
                return _context3.abrupt("return", connConfig_);
              case 19:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      function getConnectionConfig(_x2) {
        return _getConnectionConfig.apply(this, arguments);
      }
      return getConnectionConfig;
    }()
  }, {
    key: "saveConnectionConfig",
    value: function () {
      var _saveConnectionConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(name, connConfig) {
        var connections, oauth2, connConfig_, persistConnConfig, clientName;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                connections = this._getConnections();
                oauth2 = connConfig.oauth2, connConfig_ = _objectWithoutProperties(connConfig, ["oauth2"]);
                persistConnConfig = connConfig_;
                if (oauth2) {
                  clientName = this._findClientName(oauth2);
                  if (clientName) {
                    persistConnConfig = _objectSpread(_objectSpread({}, persistConnConfig), {}, {
                      client: clientName
                    });
                  }
                  delete connConfig.oauth2;
                }
                connections[name] = persistConnConfig;
                this._saveConfig();
              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
      function saveConnectionConfig(_x3, _x4) {
        return _saveConnectionConfig.apply(this, arguments);
      }
      return saveConnectionConfig;
    }()
  }, {
    key: "_findClientName",
    value: function _findClientName(_ref) {
      var clientId = _ref.clientId,
        loginUrl = _ref.loginUrl;
      var clients = this._getClients();
      for (var _i = 0, _Object$keys2 = _Object$keys(clients); _i < _Object$keys2.length; _i++) {
        var name = _Object$keys2[_i];
        var client = clients[name];
        if (client.clientId === clientId && (client.loginUrl || 'https://login.salesforce.com') === loginUrl) {
          return name;
        }
      }
      return null;
    }
  }, {
    key: "setDefaultConnection",
    value: function () {
      var _setDefaultConnection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(name) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this._registryConfig['default'] = name;
                this._saveConfig();
              case 2:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));
      function setDefaultConnection(_x5) {
        return _setDefaultConnection.apply(this, arguments);
      }
      return setDefaultConnection;
    }()
  }, {
    key: "removeConnectionConfig",
    value: function () {
      var _removeConnectionConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(name) {
        var connections;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                connections = this._getConnections();
                delete connections[name];
                this._saveConfig();
              case 3:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));
      function removeConnectionConfig(_x6) {
        return _removeConnectionConfig.apply(this, arguments);
      }
      return removeConnectionConfig;
    }()
  }, {
    key: "getClientConfig",
    value: function () {
      var _getClientConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(name) {
        var clients, clientConfig;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                clients = this._getClients();
                clientConfig = clients[name];
                return _context7.abrupt("return", clientConfig && _objectSpread({}, clientConfig));
              case 3:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));
      function getClientConfig(_x7) {
        return _getClientConfig.apply(this, arguments);
      }
      return getClientConfig;
    }()
  }, {
    key: "getClientNames",
    value: function () {
      var _getClientNames = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                return _context8.abrupt("return", _Object$keys(this._getClients()));
              case 1:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));
      function getClientNames() {
        return _getClientNames.apply(this, arguments);
      }
      return getClientNames;
    }()
  }, {
    key: "registerClientConfig",
    value: function () {
      var _registerClientConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(name, clientConfig) {
        var clients;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                clients = this._getClients();
                clients[name] = clientConfig;
                this._saveConfig();
              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));
      function registerClientConfig(_x8, _x9) {
        return _registerClientConfig.apply(this, arguments);
      }
      return registerClientConfig;
    }()
  }]);
  return BaseRegistry;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,