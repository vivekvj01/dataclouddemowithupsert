import _Symbol$toPrimitive from "@babel/runtime-corejs3/core-js-stable/symbol/to-primitive";
import _typeof from "@babel/runtime-corejs3/helpers/typeof";
import _getIterator from "@babel/runtime-corejs3/core-js/get-iterator";
import _getIteratorMethod from "@babel/runtime-corejs3/core-js/get-iterator-method";
import _Symbol from "@babel/runtime-corejs3/core-js-stable/symbol";
import _Array$from from "@babel/runtime-corejs3/core-js-stable/array/from";
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import "core-js/modules/es.array.iterator";
import "core-js/modules/es.array.join";
import "core-js/modules/es.function.name";
import "core-js/modules/es.object.to-string";
import "core-js/modules/es.promise";
import "core-js/modules/es.regexp.exec";
import "core-js/modules/es.regexp.to-string";
import "core-js/modules/es.string.iterator";
import "core-js/modules/es.string.match";
import "core-js/modules/es.string.replace";
import "core-js/modules/es.string.split";
import "core-js/modules/web.dom-collections.iterator";
import _toConsumableArray from "@babel/runtime-corejs3/helpers/toConsumableArray";
import _Object$entries from "@babel/runtime-corejs3/core-js-stable/object/entries";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _parseInt from "@babel/runtime-corejs3/core-js-stable/parse-int";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _assertThisInitialized from "@babel/runtime-corejs3/helpers/assertThisInitialized";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _slicedToArray from "@babel/runtime-corejs3/helpers/slicedToArray";
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[_Symbol$toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof _Symbol === "undefined" || _getIteratorMethod(o) == null) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = _getIterator(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { var _context52; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty(_context52 = Object.prototype.toString.call(o)).call(_context52, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return _Array$from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context50; _forEachInstanceProperty(_context50 = ownKeys(Object(source), true)).call(_context50, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context51; _forEachInstanceProperty(_context51 = ownKeys(Object(source))).call(_context51, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }
/**
 *
 */
import { EventEmitter } from 'events';
import jsforce from './jsforce';
import Transport, { CanvasTransport, XdProxyTransport, HttpProxyTransport } from './transport';
import { getLogger } from './util/logger';
import OAuth2 from './oauth2';
import Cache from './cache';
import HttpApi from './http-api';
import SessionRefreshDelegate from './session-refresh-delegate';
import Query from './query';
import SObject from './sobject';
import QuickAction from './quick-action';
import Process from './process';
import { formatDate } from './util/formatter';
import FormData from 'form-data';

/**
 * type definitions
 */

/**
 *
 */
var defaultConnectionConfig = {
  loginUrl: 'https://login.salesforce.com',
  instanceUrl: '',
  version: '50.0',
  logLevel: 'NONE',
  maxRequest: 10
};

/**
 *
 */
function esc(str) {
  return String(str || '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
}

/**
 *
 */
function parseSignedRequest(sr) {
  if (typeof sr === 'string') {
    if (sr[0] === '{') {
      // might be JSON
      return JSON.parse(sr);
    } // might be original base64-encoded signed request
    var msg = sr.split('.').pop(); // retrieve latter part
    if (!msg) {
      throw new Error('Invalid signed request');
    }
    var json = Buffer.from(msg, 'base64').toString('utf-8');
    return JSON.parse(json);
  }
  return sr;
}

/** @private **/
function parseIdUrl(url) {
  var _context;
  var _url$split$slice = _sliceInstanceProperty(_context = url.split('/')).call(_context, -2),
    _url$split$slice2 = _slicedToArray(_url$split$slice, 2),
    organizationId = _url$split$slice2[0],
    id = _url$split$slice2[1];
  return {
    id: id,
    organizationId: organizationId,
    url: url
  };
}

/**
 * Session Refresh delegate function for OAuth2 authz code flow
 * @private
 */
function oauthRefreshFn(_x, _x2) {
  return _oauthRefreshFn.apply(this, arguments);
}
/**
 * Session Refresh delegate function for username/password login
 * @private
 */
function _oauthRefreshFn() {
  _oauthRefreshFn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35(conn, callback) {
    var res, userInfo;
    return _regeneratorRuntime.wrap(function _callee35$(_context49) {
      while (1) {
        switch (_context49.prev = _context49.next) {
          case 0:
            _context49.prev = 0;
            if (conn.refreshToken) {
              _context49.next = 3;
              break;
            }
            throw new Error('No refresh token found in the connection');
          case 3:
            _context49.next = 5;
            return conn.oauth2.refreshToken(conn.refreshToken);
          case 5:
            res = _context49.sent;
            userInfo = parseIdUrl(res.id);
            conn._establish({
              instanceUrl: res.instance_url,
              accessToken: res.access_token,
              userInfo: userInfo
            });
            callback(undefined, res.access_token, res);
            _context49.next = 18;
            break;
          case 11:
            _context49.prev = 11;
            _context49.t0 = _context49["catch"](0);
            if (!(_context49.t0 instanceof Error)) {
              _context49.next = 17;
              break;
            }
            callback(_context49.t0);
            _context49.next = 18;
            break;
          case 17:
            throw _context49.t0;
          case 18:
          case "end":
            return _context49.stop();
        }
      }
    }, _callee35, null, [[0, 11]]);
  }));
  return _oauthRefreshFn.apply(this, arguments);
}
function createUsernamePasswordRefreshFn(username, password) {
  return /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(conn, callback) {
      return _regeneratorRuntime.wrap(function _callee$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return conn.login(username, password);
            case 3:
              if (conn.accessToken) {
                _context2.next = 5;
                break;
              }
              throw new Error('Access token not found after login');
            case 5:
              callback(null, conn.accessToken);
              _context2.next = 15;
              break;
            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](0);
              if (!(_context2.t0 instanceof Error)) {
                _context2.next = 14;
                break;
              }
              callback(_context2.t0);
              _context2.next = 15;
              break;
            case 14:
              throw _context2.t0;
            case 15:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee, null, [[0, 8]]);
    }));
    return function (_x3, _x4) {
      return _ref.apply(this, arguments);
    };
  }();
}

/**
 * @private
 */
function toSaveResult(err) {
  return {
    success: false,
    errors: [err]
  };
}

/**
 *
 */
function raiseNoModuleError(name) {
  var _context3;
  throw new Error(_concatInstanceProperty(_context3 = "API module '".concat(name, "' is not loaded, load 'jsforce/api/")).call(_context3, name, "' explicitly"));
}

/*
 * Constant of maximum records num in DML operation (update/delete)
 */
var MAX_DML_COUNT = 200;

/**
 *
 */
export var Connection = /*#__PURE__*/function (_EventEmitter) {
  _inherits(Connection, _EventEmitter);
  var _super = _createSuper(Connection);
  _createClass(Connection, [{
    key: "analytics",
    // describe: (name: string) => Promise<DescribeSObjectResult>;
    // describeGlobal: () => Promise<DescribeGlobalResult>;
    // API libs are not instantiated here so that core module to remain without dependencies to them
    // It is responsible for developers to import api libs explicitly if they are using 'jsforce/core' instead of 'jsforce'.
    get: function get() {
      return raiseNoModuleError('analytics');
    }
  }, {
    key: "apex",
    get: function get() {
      return raiseNoModuleError('apex');
    }
  }, {
    key: "bulk",
    get: function get() {
      return raiseNoModuleError('bulk');
    }
  }, {
    key: "bulk2",
    get: function get() {
      return raiseNoModuleError('bulk2');
    }
  }, {
    key: "chatter",
    get: function get() {
      return raiseNoModuleError('chatter');
    }
  }, {
    key: "metadata",
    get: function get() {
      return raiseNoModuleError('metadata');
    }
  }, {
    key: "soap",
    get: function get() {
      return raiseNoModuleError('soap');
    }
  }, {
    key: "streaming",
    get: function get() {
      return raiseNoModuleError('streaming');
    }
  }, {
    key: "tooling",
    get: function get() {
      return raiseNoModuleError('tooling');
    }
    /**
     *
     */
  }]);
  function Connection() {
    var _this;
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, Connection);
    _this = _super.call(this);
    _defineProperty(_assertThisInitialized(_this), "version", void 0);
    _defineProperty(_assertThisInitialized(_this), "loginUrl", void 0);
    _defineProperty(_assertThisInitialized(_this), "instanceUrl", void 0);
    _defineProperty(_assertThisInitialized(_this), "accessToken", void 0);
    _defineProperty(_assertThisInitialized(_this), "refreshToken", void 0);
    _defineProperty(_assertThisInitialized(_this), "userInfo", void 0);
    _defineProperty(_assertThisInitialized(_this), "limitInfo", {});
    _defineProperty(_assertThisInitialized(_this), "oauth2", void 0);
    _defineProperty(_assertThisInitialized(_this), "sobjects", {});
    _defineProperty(_assertThisInitialized(_this), "cache", void 0);
    _defineProperty(_assertThisInitialized(_this), "_callOptions", void 0);
    _defineProperty(_assertThisInitialized(_this), "_maxRequest", void 0);
    _defineProperty(_assertThisInitialized(_this), "_logger", void 0);
    _defineProperty(_assertThisInitialized(_this), "_logLevel", void 0);
    _defineProperty(_assertThisInitialized(_this), "_transport", void 0);
    _defineProperty(_assertThisInitialized(_this), "_sessionType", void 0);
    _defineProperty(_assertThisInitialized(_this), "_refreshDelegate", void 0);
    _defineProperty(_assertThisInitialized(_this), "describe$", void 0);
    _defineProperty(_assertThisInitialized(_this), "describe$$", void 0);
    _defineProperty(_assertThisInitialized(_this), "describeSObject", void 0);
    _defineProperty(_assertThisInitialized(_this), "describeSObject$", void 0);
    _defineProperty(_assertThisInitialized(_this), "describeSObject$$", void 0);
    _defineProperty(_assertThisInitialized(_this), "describeGlobal$", void 0);
    _defineProperty(_assertThisInitialized(_this), "describeGlobal$$", void 0);
    _defineProperty(_assertThisInitialized(_this), "insert", _this.create);
    _defineProperty(_assertThisInitialized(_this), "delete", _this.destroy);
    _defineProperty(_assertThisInitialized(_this), "del", _this.destroy);
    _defineProperty(_assertThisInitialized(_this), "process", new Process(_assertThisInitialized(_this)));
    var loginUrl = config.loginUrl,
      instanceUrl = config.instanceUrl,
      version = config.version,
      oauth2 = config.oauth2,
      maxRequest = config.maxRequest,
      logLevel = config.logLevel,
      proxyUrl = config.proxyUrl,
      httpProxy = config.httpProxy;
    _this.loginUrl = loginUrl || defaultConnectionConfig.loginUrl;
    _this.instanceUrl = instanceUrl || defaultConnectionConfig.instanceUrl;
    _this.version = version || defaultConnectionConfig.version;
    _this.oauth2 = oauth2 instanceof OAuth2 ? oauth2 : new OAuth2(_objectSpread({
      loginUrl: _this.loginUrl,
      proxyUrl: proxyUrl,
      httpProxy: httpProxy
    }, oauth2));
    var refreshFn = config.refreshFn;
    if (!refreshFn && _this.oauth2.clientId) {
      refreshFn = oauthRefreshFn;
    }
    if (refreshFn) {
      _this._refreshDelegate = new SessionRefreshDelegate(_assertThisInitialized(_this), refreshFn);
    }
    _this._maxRequest = maxRequest || defaultConnectionConfig.maxRequest;
    _this._logger = logLevel ? Connection._logger.createInstance(logLevel) : Connection._logger;
    _this._logLevel = logLevel;
    _this._transport = proxyUrl ? new XdProxyTransport(proxyUrl) : httpProxy ? new HttpProxyTransport(httpProxy) : new Transport();
    _this._callOptions = config.callOptions;
    _this.cache = new Cache();
    var describeCacheKey = function describeCacheKey(type) {
      return type ? "describe.".concat(type) : 'describe';
    };
    var describe = Connection.prototype.describe;
    _this.describe = _this.cache.createCachedFunction(describe, _assertThisInitialized(_this), {
      key: describeCacheKey,
      strategy: 'NOCACHE'
    });
    _this.describe$ = _this.cache.createCachedFunction(describe, _assertThisInitialized(_this), {
      key: describeCacheKey,
      strategy: 'HIT'
    });
    _this.describe$$ = _this.cache.createCachedFunction(describe, _assertThisInitialized(_this), {
      key: describeCacheKey,
      strategy: 'IMMEDIATE'
    });
    _this.describeSObject = _this.describe;
    _this.describeSObject$ = _this.describe$;
    _this.describeSObject$$ = _this.describe$$;
    var describeGlobal = Connection.prototype.describeGlobal;
    _this.describeGlobal = _this.cache.createCachedFunction(describeGlobal, _assertThisInitialized(_this), {
      key: 'describeGlobal',
      strategy: 'NOCACHE'
    });
    _this.describeGlobal$ = _this.cache.createCachedFunction(describeGlobal, _assertThisInitialized(_this), {
      key: 'describeGlobal',
      strategy: 'HIT'
    });
    _this.describeGlobal$$ = _this.cache.createCachedFunction(describeGlobal, _assertThisInitialized(_this), {
      key: 'describeGlobal',
      strategy: 'IMMEDIATE'
    });
    var accessToken = config.accessToken,
      refreshToken = config.refreshToken,
      sessionId = config.sessionId,
      serverUrl = config.serverUrl,
      signedRequest = config.signedRequest;
    _this._establish({
      accessToken: accessToken,
      refreshToken: refreshToken,
      instanceUrl: instanceUrl,
      sessionId: sessionId,
      serverUrl: serverUrl,
      signedRequest: signedRequest
    });
    jsforce.emit('connection:new', _assertThisInitialized(_this));
    return _this;
  }

  /* @private */
  _createClass(Connection, [{
    key: "_establish",
    value: function _establish(options) {
      var _context4;
      var accessToken = options.accessToken,
        refreshToken = options.refreshToken,
        instanceUrl = options.instanceUrl,
        sessionId = options.sessionId,
        serverUrl = options.serverUrl,
        signedRequest = options.signedRequest,
        userInfo = options.userInfo;
      this.instanceUrl = serverUrl ? _sliceInstanceProperty(_context4 = serverUrl.split('/')).call(_context4, 0, 3).join('/') : instanceUrl || this.instanceUrl;
      this.accessToken = sessionId || accessToken || this.accessToken;
      this.refreshToken = refreshToken || this.refreshToken;
      if (this.refreshToken && !this._refreshDelegate) {
        throw new Error('Refresh token is specified without oauth2 client information or refresh function');
      }
      var signedRequestObject = signedRequest && parseSignedRequest(signedRequest);
      if (signedRequestObject) {
        this.accessToken = signedRequestObject.client.oauthToken;
        if (CanvasTransport.supported) {
          this._transport = new CanvasTransport(signedRequestObject);
        }
      }
      this.userInfo = userInfo || this.userInfo;
      this._sessionType = sessionId ? 'soap' : 'oauth2';
      this._resetInstance();
    } /* @priveate */
  }, {
    key: "_clearSession",
    value: function _clearSession() {
      this.accessToken = null;
      this.refreshToken = null;
      this.instanceUrl = defaultConnectionConfig.instanceUrl;
      this.userInfo = null;
      this._sessionType = null;
    } /* @priveate */
  }, {
    key: "_resetInstance",
    value: function _resetInstance() {
      var _this2 = this;
      this.limitInfo = {};
      this.sobjects = {};
      // TODO impl cache
      this.cache.clear();
      this.cache.get('describeGlobal').removeAllListeners('value');
      this.cache.get('describeGlobal').on('value', function (_ref2) {
        var result = _ref2.result;
        if (result) {
          var _iterator = _createForOfIteratorHelper(result.sobjects),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var so = _step.value;
              _this2.sobject(so.name);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      });
      /*
      if (this.tooling) {
        this.tooling._resetInstance();
      }
      */
    }
    /**
     * Authorize the connection using OAuth2 flow.
     * Typically, just pass the code returned from authorization server in the first argument to complete authorization.
     * If you want to authorize with grant types other than `authorization_code`, you can also pass params object with the grant type.
     *
     * @returns {Promise<UserInfo>} An object that contains the user ID, org ID and identity URL.
     *
     */
  }, {
    key: "authorize",
    value: function () {
      var _authorize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(codeOrParams) {
        var _context5;
        var params,
          res,
          userInfo,
          _args2 = arguments;
        return _regeneratorRuntime.wrap(function _callee2$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                params = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                _context6.next = 3;
                return this.oauth2.requestToken(codeOrParams, params);
              case 3:
                res = _context6.sent;
                userInfo = parseIdUrl(res.id);
                this._establish({
                  instanceUrl: res.instance_url,
                  accessToken: res.access_token,
                  refreshToken: res.refresh_token,
                  userInfo: userInfo
                });
                this._logger.debug(_concatInstanceProperty(_context5 = "<login> completed. user id = ".concat(userInfo.id, ", org id = ")).call(_context5, userInfo.organizationId));
                return _context6.abrupt("return", userInfo);
              case 8:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee2, this);
      }));
      function authorize(_x5) {
        return _authorize.apply(this, arguments);
      }
      return authorize;
    }()
    /**
     *
     */
  }, {
    key: "login",
    value: function () {
      var _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(username, password) {
        return _regeneratorRuntime.wrap(function _callee3$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this._refreshDelegate = new SessionRefreshDelegate(this, createUsernamePasswordRefreshFn(username, password));
                if (!(this.oauth2 && this.oauth2.clientId && this.oauth2.clientSecret)) {
                  _context7.next = 3;
                  break;
                }
                return _context7.abrupt("return", this.loginByOAuth2(username, password));
              case 3:
                return _context7.abrupt("return", this.loginBySoap(username, password));
              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee3, this);
      }));
      function login(_x6, _x7) {
        return _login.apply(this, arguments);
      }
      return login;
    }()
    /**
     * Login by OAuth2 username & password flow
     */
  }, {
    key: "loginByOAuth2",
    value: function () {
      var _loginByOAuth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(username, password) {
        var _context8;
        var res, userInfo;
        return _regeneratorRuntime.wrap(function _callee4$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.oauth2.authenticate(username, password);
              case 2:
                res = _context9.sent;
                userInfo = parseIdUrl(res.id);
                this._establish({
                  instanceUrl: res.instance_url,
                  accessToken: res.access_token,
                  userInfo: userInfo
                });
                this._logger.info(_concatInstanceProperty(_context8 = "<login> completed. user id = ".concat(userInfo.id, ", org id = ")).call(_context8, userInfo.organizationId));
                return _context9.abrupt("return", userInfo);
              case 7:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee4, this);
      }));
      function loginByOAuth2(_x8, _x9) {
        return _loginByOAuth.apply(this, arguments);
      }
      return loginByOAuth2;
    }()
    /**
     *
     */
  }, {
    key: "loginBySoap",
    value: function () {
      var _loginBySoap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(username, password) {
        var _context10, _context11;
        var body, soapLoginEndpoint, response, m, faultstring, serverUrl, sessionId, userId, organizationId, idUrl, userInfo;
        return _regeneratorRuntime.wrap(function _callee5$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                if (!(!username || !password)) {
                  _context12.next = 2;
                  break;
                }
                return _context12.abrupt("return", _Promise.reject(new Error('no username password given')));
              case 2:
                body = ['<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">', '<se:Header/>', '<se:Body>', '<login xmlns="urn:partner.soap.sforce.com">', "<username>".concat(esc(username), "</username>"), "<password>".concat(esc(password), "</password>"), '</login>', '</se:Body>', '</se:Envelope>'].join('');
                soapLoginEndpoint = [this.loginUrl, 'services/Soap/u', this.version].join('/');
                _context12.next = 6;
                return this._transport.httpRequest({
                  method: 'POST',
                  url: soapLoginEndpoint,
                  body: body,
                  headers: {
                    'Content-Type': 'text/xml',
                    SOAPAction: '""'
                  }
                });
              case 6:
                response = _context12.sent;
                if (!(response.statusCode >= 400)) {
                  _context12.next = 11;
                  break;
                }
                m = response.body.match(/<faultstring>([^<]+)<\/faultstring>/);
                faultstring = m && m[1];
                throw new Error(faultstring || response.body);
              case 11:
                this._logger.debug("SOAP response = ".concat(response.body));
                m = response.body.match(/<serverUrl>([^<]+)<\/serverUrl>/);
                serverUrl = m && m[1];
                m = response.body.match(/<sessionId>([^<]+)<\/sessionId>/);
                sessionId = m && m[1];
                m = response.body.match(/<userId>([^<]+)<\/userId>/);
                userId = m && m[1];
                m = response.body.match(/<organizationId>([^<]+)<\/organizationId>/);
                organizationId = m && m[1];
                if (!(!serverUrl || !sessionId || !userId || !organizationId)) {
                  _context12.next = 22;
                  break;
                }
                throw new Error('could not extract session information from login response');
              case 22:
                idUrl = [this.loginUrl, 'id', organizationId, userId].join('/');
                userInfo = {
                  id: userId,
                  organizationId: organizationId,
                  url: idUrl
                };
                this._establish({
                  serverUrl: _sliceInstanceProperty(_context10 = serverUrl.split('/')).call(_context10, 0, 3).join('/'),
                  sessionId: sessionId,
                  userInfo: userInfo
                });
                this._logger.info(_concatInstanceProperty(_context11 = "<login> completed. user id = ".concat(userId, ", org id = ")).call(_context11, organizationId));
                return _context12.abrupt("return", userInfo);
              case 27:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee5, this);
      }));
      function loginBySoap(_x10, _x11) {
        return _loginBySoap.apply(this, arguments);
      }
      return loginBySoap;
    }()
    /**
     * Logout the current session
     */
  }, {
    key: "logout",
    value: function () {
      var _logout = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(revoke) {
        return _regeneratorRuntime.wrap(function _callee6$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                this._refreshDelegate = undefined;
                if (!(this._sessionType === 'oauth2')) {
                  _context13.next = 3;
                  break;
                }
                return _context13.abrupt("return", this.logoutByOAuth2(revoke));
              case 3:
                return _context13.abrupt("return", this.logoutBySoap(revoke));
              case 4:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee6, this);
      }));
      function logout(_x12) {
        return _logout.apply(this, arguments);
      }
      return logout;
    }()
    /**
     * Logout the current session by revoking access token via OAuth2 session revoke
     */
  }, {
    key: "logoutByOAuth2",
    value: function () {
      var _logoutByOAuth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(revoke) {
        var token;
        return _regeneratorRuntime.wrap(function _callee7$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                token = revoke ? this.refreshToken : this.accessToken;
                if (!token) {
                  _context14.next = 4;
                  break;
                }
                _context14.next = 4;
                return this.oauth2.revokeToken(token);
              case 4:
                // Destroy the session bound to this connection
                this._clearSession();
                this._resetInstance();
              case 6:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee7, this);
      }));
      function logoutByOAuth2(_x13) {
        return _logoutByOAuth.apply(this, arguments);
      }
      return logoutByOAuth2;
    }()
    /**
     * Logout the session by using SOAP web service API
     */
  }, {
    key: "logoutBySoap",
    value: function () {
      var _logoutBySoap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(revoke) {
        var _context15;
        var body, response, m, faultstring;
        return _regeneratorRuntime.wrap(function _callee8$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                body = ['<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">', '<se:Header>', '<SessionHeader xmlns="urn:partner.soap.sforce.com">', "<sessionId>".concat(esc(revoke ? this.refreshToken : this.accessToken), "</sessionId>"), '</SessionHeader>', '</se:Header>', '<se:Body>', '<logout xmlns="urn:partner.soap.sforce.com"/>', '</se:Body>', '</se:Envelope>'].join('');
                _context16.next = 3;
                return this._transport.httpRequest({
                  method: 'POST',
                  url: [this.instanceUrl, 'services/Soap/u', this.version].join('/'),
                  body: body,
                  headers: {
                    'Content-Type': 'text/xml',
                    SOAPAction: '""'
                  }
                });
              case 3:
                response = _context16.sent;
                this._logger.debug(_concatInstanceProperty(_context15 = "SOAP statusCode = ".concat(response.statusCode, ", response = ")).call(_context15, response.body));
                if (!(response.statusCode >= 400)) {
                  _context16.next = 9;
                  break;
                }
                m = response.body.match(/<faultstring>([^<]+)<\/faultstring>/);
                faultstring = m && m[1];
                throw new Error(faultstring || response.body);
              case 9:
                // Destroy the session bound to this connection
                this._clearSession();
                this._resetInstance();
              case 11:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee8, this);
      }));
      function logoutBySoap(_x14) {
        return _logoutBySoap.apply(this, arguments);
      }
      return logoutBySoap;
    }()
    /**
     * Send REST API request with given HTTP request info, with connected session information.
     *
     * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
     * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
     * , or relative path from version root ('/sobjects/Account/describe').
     */
  }, {
    key: "request",
    value: function request(_request) {
      var _this3 = this;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      // if request is simple string, regard it as url in GET method
      var request_ = typeof _request === 'string' ? {
        method: 'GET',
        url: _request
      } : _request;
      // if url is given in relative path, prepend base url or instance url before.
      request_ = _objectSpread(_objectSpread({}, request_), {}, {
        url: this._normalizeUrl(request_.url)
      });
      var httpApi = new HttpApi(this, options);
      // log api usage and its quota
      httpApi.on('response', function (response) {
        if (response.headers && response.headers['sforce-limit-info']) {
          var apiUsage = response.headers['sforce-limit-info'].match(/api-usage=(\d+)\/(\d+)/);
          if (apiUsage) {
            _this3.limitInfo = {
              apiUsage: {
                used: _parseInt(apiUsage[1], 10),
                limit: _parseInt(apiUsage[2], 10)
              }
            };
          }
        }
      });
      return httpApi.request(request_);
    }
    /**
     * Send HTTP GET request
     *
     * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
     * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
     * , or relative path from version root ('/sobjects/Account/describe').
     */
  }, {
    key: "requestGet",
    value: function requestGet(url, options) {
      var request = {
        method: 'GET',
        url: url
      };
      return this.request(request, options);
    }
    /**
     * Send HTTP POST request with JSON body, with connected session information
     *
     * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
     * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
     * , or relative path from version root ('/sobjects/Account/describe').
     */
  }, {
    key: "requestPost",
    value: function requestPost(url, body, options) {
      var request = {
        method: 'POST',
        url: url,
        body: _JSON$stringify(body),
        headers: {
          'content-type': 'application/json'
        }
      };
      return this.request(request, options);
    }
    /**
     * Send HTTP PUT request with JSON body, with connected session information
     *
     * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
     * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
     * , or relative path from version root ('/sobjects/Account/describe').
     */
  }, {
    key: "requestPut",
    value: function requestPut(url, body, options) {
      var request = {
        method: 'PUT',
        url: url,
        body: _JSON$stringify(body),
        headers: {
          'content-type': 'application/json'
        }
      };
      return this.request(request, options);
    }
    /**
     * Send HTTP PATCH request with JSON body
     *
     * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
     * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
     * , or relative path from version root ('/sobjects/Account/describe').
     */
  }, {
    key: "requestPatch",
    value: function requestPatch(url, body, options) {
      var request = {
        method: 'PATCH',
        url: url,
        body: _JSON$stringify(body),
        headers: {
          'content-type': 'application/json'
        }
      };
      return this.request(request, options);
    }
    /**
     * Send HTTP DELETE request
     *
     * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
     * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
     * , or relative path from version root ('/sobjects/Account/describe').
     */
  }, {
    key: "requestDelete",
    value: function requestDelete(url, options) {
      var request = {
        method: 'DELETE',
        url: url
      };
      return this.request(request, options);
    } /** @private **/
  }, {
    key: "_baseUrl",
    value: function _baseUrl() {
      return [this.instanceUrl, 'services/data', "v".concat(this.version)].join('/');
    }
    /**
     * Convert path to absolute url
     * @private
     */
  }, {
    key: "_normalizeUrl",
    value: function _normalizeUrl(url) {
      if (url[0] === '/') {
        if (_indexOfInstanceProperty(url).call(url, this.instanceUrl + '/services/') === 0) {
          return url;
        }
        if (_indexOfInstanceProperty(url).call(url, '/services/') === 0) {
          return this.instanceUrl + url;
        }
        return this._baseUrl() + url;
      }
      return url;
    }
    /**
     *
     */
  }, {
    key: "query",
    value: function query(soql, options) {
      return new Query(this, soql, options);
    }
    /**
     * Execute search by SOSL
     *
     * @param {String} sosl - SOSL string
     * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
     * @returns {Promise.<Array.<RecordResult>>}
     */
  }, {
    key: "search",
    value: function search(sosl) {
      var url = this._baseUrl() + '/search?q=' + encodeURIComponent(sosl);
      return this.request(url);
    }
    /**
     *
     */
  }, {
    key: "queryMore",
    value: function queryMore(locator, options) {
      return new Query(this, {
        locator: locator
      }, options);
    } /* */
  }, {
    key: "_ensureVersion",
    value: function _ensureVersion(majorVersion) {
      var versions = this.version.split('.');
      return _parseInt(versions[0], 10) >= majorVersion;
    } /* */
  }, {
    key: "_supports",
    value: function _supports(feature) {
      switch (feature) {
        case 'sobject-collection':
          // sobject collection is available only in API ver 42.0+
          return this._ensureVersion(42);
        default:
          return false;
      }
    }
    /**
     * Retrieve specified records
     */
  }, {
    key: "retrieve",
    value: function () {
      var _retrieve = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(type, ids) {
        var options,
          _args9 = arguments;
        return _regeneratorRuntime.wrap(function _callee9$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                options = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : {};
                return _context17.abrupt("return", _Array$isArray(ids) ?
                // check the version whether SObject collection API is supported (42.0)
                this._ensureVersion(42) ? this._retrieveMany(type, ids, options) : this._retrieveParallel(type, ids, options) : this._retrieveSingle(type, ids, options));
              case 2:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee9, this);
      }));
      function retrieve(_x15, _x16) {
        return _retrieve.apply(this, arguments);
      }
      return retrieve;
    }() /** @private */
  }, {
    key: "_retrieveSingle",
    value: function () {
      var _retrieveSingle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(type, id, options) {
        var url, fields, headers;
        return _regeneratorRuntime.wrap(function _callee10$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                if (id) {
                  _context18.next = 2;
                  break;
                }
                throw new Error('Invalid record ID. Specify valid record ID value');
              case 2:
                url = [this._baseUrl(), 'sobjects', type, id].join('/');
                fields = options.fields, headers = options.headers;
                if (fields) {
                  url += "?fields=".concat(fields.join(','));
                }
                return _context18.abrupt("return", this.request({
                  method: 'GET',
                  url: url,
                  headers: headers
                }));
              case 6:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee10, this);
      }));
      function _retrieveSingle(_x17, _x18, _x19) {
        return _retrieveSingle2.apply(this, arguments);
      }
      return _retrieveSingle;
    }() /** @private */
  }, {
    key: "_retrieveParallel",
    value: function () {
      var _retrieveParallel2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(type, ids, options) {
        var _this4 = this;
        return _regeneratorRuntime.wrap(function _callee11$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                if (!(ids.length > this._maxRequest)) {
                  _context19.next = 2;
                  break;
                }
                throw new Error('Exceeded max limit of concurrent call');
              case 2:
                return _context19.abrupt("return", _Promise.all(_mapInstanceProperty(ids).call(ids, function (id) {
                  return _this4._retrieveSingle(type, id, options).catch(function (err) {
                    if (options.allOrNone || err.errorCode !== 'NOT_FOUND') {
                      throw err;
                    }
                    return null;
                  });
                })));
              case 3:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee11, this);
      }));
      function _retrieveParallel(_x20, _x21, _x22) {
        return _retrieveParallel2.apply(this, arguments);
      }
      return _retrieveParallel;
    }() /** @private */
  }, {
    key: "_retrieveMany",
    value: function () {
      var _retrieveMany2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(type, ids, options) {
        var _context20;
        var url, fields;
        return _regeneratorRuntime.wrap(function _callee12$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                if (!(ids.length === 0)) {
                  _context21.next = 2;
                  break;
                }
                return _context21.abrupt("return", []);
              case 2:
                url = [this._baseUrl(), 'composite', 'sobjects', type].join('/');
                _context21.t0 = options.fields;
                if (_context21.t0) {
                  _context21.next = 10;
                  break;
                }
                _context21.t1 = _mapInstanceProperty;
                _context21.next = 8;
                return this.describe$(type);
              case 8:
                _context21.t2 = _context20 = _context21.sent.fields;
                _context21.t0 = (0, _context21.t1)(_context21.t2).call(_context20, function (field) {
                  return field.name;
                });
              case 10:
                fields = _context21.t0;
                return _context21.abrupt("return", this.request({
                  method: 'POST',
                  url: url,
                  body: _JSON$stringify({
                    ids: ids,
                    fields: fields
                  }),
                  headers: _objectSpread(_objectSpread({}, options.headers || {}), {}, {
                    'content-type': 'application/json'
                  })
                }));
              case 12:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee12, this);
      }));
      function _retrieveMany(_x23, _x24, _x25) {
        return _retrieveMany2.apply(this, arguments);
      }
      return _retrieveMany;
    }()
    /**
     * Create records
     */
  }, {
    key: "create",
    /**
     * @param type
     * @param records
     * @param options
     */
    value: function () {
      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(type, records) {
        var options,
          ret,
          _args13 = arguments;
        return _regeneratorRuntime.wrap(function _callee13$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                options = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : {};
                if (!_Array$isArray(records)) {
                  _context22.next = 14;
                  break;
                }
                if (!this._ensureVersion(42)) {
                  _context22.next = 8;
                  break;
                }
                _context22.next = 5;
                return this._createMany(type, records, options);
              case 5:
                _context22.t1 = _context22.sent;
                _context22.next = 11;
                break;
              case 8:
                _context22.next = 10;
                return this._createParallel(type, records, options);
              case 10:
                _context22.t1 = _context22.sent;
              case 11:
                _context22.t0 = _context22.t1;
                _context22.next = 17;
                break;
              case 14:
                _context22.next = 16;
                return this._createSingle(type, records, options);
              case 16:
                _context22.t0 = _context22.sent;
              case 17:
                ret = _context22.t0;
                return _context22.abrupt("return", ret);
              case 19:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee13, this);
      }));
      function create(_x26, _x27) {
        return _create.apply(this, arguments);
      }
      return create;
    }() /** @private */
  }, {
    key: "_createSingle",
    value: function () {
      var _createSingle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(type, record, options) {
        var Id, rtype, attributes, rec, sobjectType, url, contentType, body, _context23, form;
        return _regeneratorRuntime.wrap(function _callee14$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                Id = record.Id, rtype = record.type, attributes = record.attributes, rec = _objectWithoutProperties(record, ["Id", "type", "attributes"]);
                sobjectType = type || attributes && attributes.type || rtype;
                if (sobjectType) {
                  _context24.next = 4;
                  break;
                }
                throw new Error('No SObject Type defined in record');
              case 4:
                url = [this._baseUrl(), 'sobjects', sobjectType].join('/');
                if (options && options.multipartFileFields) {
                  // Send the record as a multipart/form-data request. Useful for fields containing large binary blobs.
                  form = new FormData(); // Extract the fields requested to be sent separately from the JSON
                  _forEachInstanceProperty(_context23 = _Object$entries(options.multipartFileFields)).call(_context23, function (_ref3) {
                    var _ref4 = _slicedToArray(_ref3, 2),
                      fieldName = _ref4[0],
                      fileDetails = _ref4[1];
                    form.append(fieldName, Buffer.from(rec[fieldName], 'base64'), fileDetails);
                    delete rec[fieldName];
                  });
                  // Serialize the remaining fields as JSON
                  form.append(type, _JSON$stringify(rec), {
                    contentType: 'application/json'
                  });
                  contentType = form.getHeaders()['content-type']; // This is necessary to ensure the 'boundary' is present
                  body = form;
                } else {
                  // Default behavior: send the request as JSON
                  contentType = 'application/json';
                  body = _JSON$stringify(rec);
                }
                return _context24.abrupt("return", this.request({
                  method: 'POST',
                  url: url,
                  body: body,
                  headers: _objectSpread(_objectSpread({}, options.headers || {}), {}, {
                    'content-type': contentType
                  })
                }));
              case 7:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee14, this);
      }));
      function _createSingle(_x28, _x29, _x30) {
        return _createSingle2.apply(this, arguments);
      }
      return _createSingle;
    }() /** @private */
  }, {
    key: "_createParallel",
    value: function () {
      var _createParallel2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(type, records, options) {
        var _this5 = this;
        return _regeneratorRuntime.wrap(function _callee15$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                if (!(records.length > this._maxRequest)) {
                  _context25.next = 2;
                  break;
                }
                throw new Error('Exceeded max limit of concurrent call');
              case 2:
                return _context25.abrupt("return", _Promise.all(_mapInstanceProperty(records).call(records, function (record) {
                  return _this5._createSingle(type, record, options).catch(function (err) {
                    // be aware that allOrNone in parallel mode will not revert the other successful requests
                    // it only raises error when met at least one failed request.
                    if (options.allOrNone || !err.errorCode) {
                      throw err;
                    }
                    return toSaveResult(err);
                  });
                })));
              case 3:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee15, this);
      }));
      function _createParallel(_x31, _x32, _x33) {
        return _createParallel2.apply(this, arguments);
      }
      return _createParallel;
    }() /** @private */
  }, {
    key: "_createMany",
    value: function () {
      var _createMany2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(type, records, options) {
        var _context26, _records, url;
        return _regeneratorRuntime.wrap(function _callee16$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                if (!(records.length === 0)) {
                  _context27.next = 2;
                  break;
                }
                return _context27.abrupt("return", _Promise.resolve([]));
              case 2:
                if (!(records.length > MAX_DML_COUNT && options.allowRecursive)) {
                  _context27.next = 16;
                  break;
                }
                _context27.t0 = _concatInstanceProperty(_context26 = []);
                _context27.t1 = _context26;
                _context27.t2 = _toConsumableArray;
                _context27.next = 8;
                return this._createMany(type, _sliceInstanceProperty(records).call(records, 0, MAX_DML_COUNT), options);
              case 8:
                _context27.t3 = _context27.sent;
                _context27.t4 = (0, _context27.t2)(_context27.t3);
                _context27.t5 = _toConsumableArray;
                _context27.next = 13;
                return this._createMany(type, _sliceInstanceProperty(records).call(records, MAX_DML_COUNT), options);
              case 13:
                _context27.t6 = _context27.sent;
                _context27.t7 = (0, _context27.t5)(_context27.t6);
                return _context27.abrupt("return", _context27.t0.call.call(_context27.t0, _context27.t1, _context27.t4, _context27.t7));
              case 16:
                _records = _mapInstanceProperty(records).call(records, function (record) {
                  var Id = record.Id,
                    rtype = record.type,
                    attributes = record.attributes,
                    rec = _objectWithoutProperties(record, ["Id", "type", "attributes"]);
                  var sobjectType = type || attributes && attributes.type || rtype;
                  if (!sobjectType) {
                    throw new Error('No SObject Type defined in record');
                  }
                  return _objectSpread({
                    attributes: {
                      type: sobjectType
                    }
                  }, rec);
                });
                url = [this._baseUrl(), 'composite', 'sobjects'].join('/');
                return _context27.abrupt("return", this.request({
                  method: 'POST',
                  url: url,
                  body: _JSON$stringify({
                    allOrNone: options.allOrNone || false,
                    records: _records
                  }),
                  headers: _objectSpread(_objectSpread({}, options.headers || {}), {}, {
                    'content-type': 'application/json'
                  })
                }));
              case 19:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee16, this);
      }));
      function _createMany(_x34, _x35, _x36) {
        return _createMany2.apply(this, arguments);
      }
      return _createMany;
    }()
    /**
     * Synonym of Connection#create()
     */
  }, {
    key: "update",
    /**
     * @param type
     * @param records
     * @param options
     */
    value: function update(type, records) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return _Array$isArray(records) ?
      // check the version whether SObject collection API is supported (42.0)
      this._ensureVersion(42) ? this._updateMany(type, records, options) : this._updateParallel(type, records, options) : this._updateSingle(type, records, options);
    } /** @private */
  }, {
    key: "_updateSingle",
    value: function () {
      var _updateSingle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(type, record, options) {
        var id, rtype, attributes, rec, sobjectType, url;
        return _regeneratorRuntime.wrap(function _callee17$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                id = record.Id, rtype = record.type, attributes = record.attributes, rec = _objectWithoutProperties(record, ["Id", "type", "attributes"]);
                if (id) {
                  _context28.next = 3;
                  break;
                }
                throw new Error('Record id is not found in record.');
              case 3:
                sobjectType = type || attributes && attributes.type || rtype;
                if (sobjectType) {
                  _context28.next = 6;
                  break;
                }
                throw new Error('No SObject Type defined in record');
              case 6:
                url = [this._baseUrl(), 'sobjects', sobjectType, id].join('/');
                return _context28.abrupt("return", this.request({
                  method: 'PATCH',
                  url: url,
                  body: _JSON$stringify(rec),
                  headers: _objectSpread(_objectSpread({}, options.headers || {}), {}, {
                    'content-type': 'application/json'
                  })
                }, {
                  noContentResponse: {
                    id: id,
                    success: true,
                    errors: []
                  }
                }));
              case 8:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee17, this);
      }));
      function _updateSingle(_x37, _x38, _x39) {
        return _updateSingle2.apply(this, arguments);
      }
      return _updateSingle;
    }() /** @private */
  }, {
    key: "_updateParallel",
    value: function () {
      var _updateParallel2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(type, records, options) {
        var _this6 = this;
        return _regeneratorRuntime.wrap(function _callee18$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                if (!(records.length > this._maxRequest)) {
                  _context29.next = 2;
                  break;
                }
                throw new Error('Exceeded max limit of concurrent call');
              case 2:
                return _context29.abrupt("return", _Promise.all(_mapInstanceProperty(records).call(records, function (record) {
                  return _this6._updateSingle(type, record, options).catch(function (err) {
                    // be aware that allOrNone in parallel mode will not revert the other successful requests
                    // it only raises error when met at least one failed request.
                    if (options.allOrNone || !err.errorCode) {
                      throw err;
                    }
                    return toSaveResult(err);
                  });
                })));
              case 3:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee18, this);
      }));
      function _updateParallel(_x40, _x41, _x42) {
        return _updateParallel2.apply(this, arguments);
      }
      return _updateParallel;
    }() /** @private */
  }, {
    key: "_updateMany",
    value: function () {
      var _updateMany2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(type, records, options) {
        var _context30, _records, url;
        return _regeneratorRuntime.wrap(function _callee19$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                if (!(records.length === 0)) {
                  _context31.next = 2;
                  break;
                }
                return _context31.abrupt("return", []);
              case 2:
                if (!(records.length > MAX_DML_COUNT && options.allowRecursive)) {
                  _context31.next = 16;
                  break;
                }
                _context31.t0 = _concatInstanceProperty(_context30 = []);
                _context31.t1 = _context30;
                _context31.t2 = _toConsumableArray;
                _context31.next = 8;
                return this._updateMany(type, _sliceInstanceProperty(records).call(records, 0, MAX_DML_COUNT), options);
              case 8:
                _context31.t3 = _context31.sent;
                _context31.t4 = (0, _context31.t2)(_context31.t3);
                _context31.t5 = _toConsumableArray;
                _context31.next = 13;
                return this._updateMany(type, _sliceInstanceProperty(records).call(records, MAX_DML_COUNT), options);
              case 13:
                _context31.t6 = _context31.sent;
                _context31.t7 = (0, _context31.t5)(_context31.t6);
                return _context31.abrupt("return", _context31.t0.call.call(_context31.t0, _context31.t1, _context31.t4, _context31.t7));
              case 16:
                _records = _mapInstanceProperty(records).call(records, function (record) {
                  var id = record.Id,
                    rtype = record.type,
                    attributes = record.attributes,
                    rec = _objectWithoutProperties(record, ["Id", "type", "attributes"]);
                  if (!id) {
                    throw new Error('Record id is not found in record.');
                  }
                  var sobjectType = type || attributes && attributes.type || rtype;
                  if (!sobjectType) {
                    throw new Error('No SObject Type defined in record');
                  }
                  return _objectSpread({
                    id: id,
                    attributes: {
                      type: sobjectType
                    }
                  }, rec);
                });
                url = [this._baseUrl(), 'composite', 'sobjects'].join('/');
                return _context31.abrupt("return", this.request({
                  method: 'PATCH',
                  url: url,
                  body: _JSON$stringify({
                    allOrNone: options.allOrNone || false,
                    records: _records
                  }),
                  headers: _objectSpread(_objectSpread({}, options.headers || {}), {}, {
                    'content-type': 'application/json'
                  })
                }));
              case 19:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee19, this);
      }));
      function _updateMany(_x43, _x44, _x45) {
        return _updateMany2.apply(this, arguments);
      }
      return _updateMany;
    }()
    /**
     * Upsert records
     */
  }, {
    key: "upsert",
    /**
     *
     * @param type
     * @param records
     * @param extIdField
     * @param options
     */
    value: function () {
      var _upsert = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(type, records, extIdField) {
        var _this7 = this;
        var options,
          isArray,
          _records,
          results,
          _args20 = arguments;
        return _regeneratorRuntime.wrap(function _callee20$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                options = _args20.length > 3 && _args20[3] !== undefined ? _args20[3] : {};
                isArray = _Array$isArray(records);
                _records = _Array$isArray(records) ? records : [records];
                if (!(_records.length > this._maxRequest)) {
                  _context33.next = 5;
                  break;
                }
                throw new Error('Exceeded max limit of concurrent call');
              case 5:
                _context33.next = 7;
                return _Promise.all(_mapInstanceProperty(_records).call(_records, function (record) {
                  var _context32;
                  var extId = record[extIdField],
                    rtype = record.type,
                    attributes = record.attributes,
                    rec = _objectWithoutProperties(record, _mapInstanceProperty(_context32 = [extIdField, "type", "attributes"]).call(_context32, _toPropertyKey));
                  var url = [_this7._baseUrl(), 'sobjects', type, extIdField, extId].join('/');
                  return _this7.request({
                    method: 'PATCH',
                    url: url,
                    body: _JSON$stringify(rec),
                    headers: _objectSpread(_objectSpread({}, options.headers || {}), {}, {
                      'content-type': 'application/json'
                    })
                  }, {
                    noContentResponse: {
                      success: true,
                      errors: []
                    }
                  }).catch(function (err) {
                    // Be aware that `allOrNone` option in upsert method
                    // will not revert the other successful requests.
                    // It only raises error when met at least one failed request.
                    if (!isArray || options.allOrNone || !err.errorCode) {
                      throw err;
                    }
                    return toSaveResult(err);
                  });
                }));
              case 7:
                results = _context33.sent;
                return _context33.abrupt("return", isArray ? results : results[0]);
              case 9:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee20, this);
      }));
      function upsert(_x46, _x47, _x48) {
        return _upsert.apply(this, arguments);
      }
      return upsert;
    }()
    /**
     * Delete records
     */
  }, {
    key: "destroy",
    /**
     * @param type
     * @param ids
     * @param options
     */
    value: function () {
      var _destroy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(type, ids) {
        var options,
          _args21 = arguments;
        return _regeneratorRuntime.wrap(function _callee21$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                options = _args21.length > 2 && _args21[2] !== undefined ? _args21[2] : {};
                return _context34.abrupt("return", _Array$isArray(ids) ?
                // check the version whether SObject collection API is supported (42.0)
                this._ensureVersion(42) ? this._destroyMany(type, ids, options) : this._destroyParallel(type, ids, options) : this._destroySingle(type, ids, options));
              case 2:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee21, this);
      }));
      function destroy(_x49, _x50) {
        return _destroy.apply(this, arguments);
      }
      return destroy;
    }() /** @private */
  }, {
    key: "_destroySingle",
    value: function () {
      var _destroySingle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(type, id, options) {
        var url;
        return _regeneratorRuntime.wrap(function _callee22$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                url = [this._baseUrl(), 'sobjects', type, id].join('/');
                return _context35.abrupt("return", this.request({
                  method: 'DELETE',
                  url: url,
                  headers: options.headers || {}
                }, {
                  noContentResponse: {
                    id: id,
                    success: true,
                    errors: []
                  }
                }));
              case 2:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee22, this);
      }));
      function _destroySingle(_x51, _x52, _x53) {
        return _destroySingle2.apply(this, arguments);
      }
      return _destroySingle;
    }() /** @private */
  }, {
    key: "_destroyParallel",
    value: function () {
      var _destroyParallel2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(type, ids, options) {
        var _this8 = this;
        return _regeneratorRuntime.wrap(function _callee23$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                if (!(ids.length > this._maxRequest)) {
                  _context36.next = 2;
                  break;
                }
                throw new Error('Exceeded max limit of concurrent call');
              case 2:
                return _context36.abrupt("return", _Promise.all(_mapInstanceProperty(ids).call(ids, function (id) {
                  return _this8._destroySingle(type, id, options).catch(function (err) {
                    // Be aware that `allOrNone` option in parallel mode
                    // will not revert the other successful requests.
                    // It only raises error when met at least one failed request.
                    if (options.allOrNone || !err.errorCode) {
                      throw err;
                    }
                    return toSaveResult(err);
                  });
                })));
              case 3:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee23, this);
      }));
      function _destroyParallel(_x54, _x55, _x56) {
        return _destroyParallel2.apply(this, arguments);
      }
      return _destroyParallel;
    }() /** @private */
  }, {
    key: "_destroyMany",
    value: function () {
      var _destroyMany2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(type, ids, options) {
        var _context37, url;
        return _regeneratorRuntime.wrap(function _callee24$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                if (!(ids.length === 0)) {
                  _context38.next = 2;
                  break;
                }
                return _context38.abrupt("return", []);
              case 2:
                if (!(ids.length > MAX_DML_COUNT && options.allowRecursive)) {
                  _context38.next = 16;
                  break;
                }
                _context38.t0 = _concatInstanceProperty(_context37 = []);
                _context38.t1 = _context37;
                _context38.t2 = _toConsumableArray;
                _context38.next = 8;
                return this._destroyMany(type, _sliceInstanceProperty(ids).call(ids, 0, MAX_DML_COUNT), options);
              case 8:
                _context38.t3 = _context38.sent;
                _context38.t4 = (0, _context38.t2)(_context38.t3);
                _context38.t5 = _toConsumableArray;
                _context38.next = 13;
                return this._destroyMany(type, _sliceInstanceProperty(ids).call(ids, MAX_DML_COUNT), options);
              case 13:
                _context38.t6 = _context38.sent;
                _context38.t7 = (0, _context38.t5)(_context38.t6);
                return _context38.abrupt("return", _context38.t0.call.call(_context38.t0, _context38.t1, _context38.t4, _context38.t7));
              case 16:
                url = [this._baseUrl(), 'composite', 'sobjects?ids='].join('/') + ids.join(',');
                if (options.allOrNone) {
                  url += '&allOrNone=true';
                }
                return _context38.abrupt("return", this.request({
                  method: 'DELETE',
                  url: url,
                  headers: options.headers || {}
                }));
              case 19:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee24, this);
      }));
      function _destroyMany(_x57, _x58, _x59) {
        return _destroyMany2.apply(this, arguments);
      }
      return _destroyMany;
    }()
    /**
     * Synonym of Connection#destroy()
     */
    /**
     * Synonym of Connection#destroy()
     */
  }, {
    key: "describe",
    /**
     * Describe SObject metadata
     */
    value: function () {
      var _describe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(type) {
        var url, body;
        return _regeneratorRuntime.wrap(function _callee25$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                url = [this._baseUrl(), 'sobjects', type, 'describe'].join('/');
                _context39.next = 3;
                return this.request(url);
              case 3:
                body = _context39.sent;
                return _context39.abrupt("return", body);
              case 5:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee25, this);
      }));
      function describe(_x60) {
        return _describe.apply(this, arguments);
      }
      return describe;
    }()
    /**
     * Describe global SObjects
     */
  }, {
    key: "describeGlobal",
    value: function () {
      var _describeGlobal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26() {
        var url, body;
        return _regeneratorRuntime.wrap(function _callee26$(_context40) {
          while (1) {
            switch (_context40.prev = _context40.next) {
              case 0:
                url = "".concat(this._baseUrl(), "/sobjects");
                _context40.next = 3;
                return this.request(url);
              case 3:
                body = _context40.sent;
                return _context40.abrupt("return", body);
              case 5:
              case "end":
                return _context40.stop();
            }
          }
        }, _callee26, this);
      }));
      function describeGlobal() {
        return _describeGlobal.apply(this, arguments);
      }
      return describeGlobal;
    }()
    /**
     * Get SObject instance
     */
  }, {
    key: "sobject",
    value: function sobject(type) {
      var so = this.sobjects[type] || new SObject(this, type);
      this.sobjects[type] = so;
      return so;
    }
    /**
     * Get identity information of current user
     */
  }, {
    key: "identity",
    value: function () {
      var _identity = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27() {
        var options,
          url,
          _res,
          res,
          _args27 = arguments;
        return _regeneratorRuntime.wrap(function _callee27$(_context41) {
          while (1) {
            switch (_context41.prev = _context41.next) {
              case 0:
                options = _args27.length > 0 && _args27[0] !== undefined ? _args27[0] : {};
                url = this.userInfo && this.userInfo.url;
                if (url) {
                  _context41.next = 7;
                  break;
                }
                _context41.next = 5;
                return this.request({
                  method: 'GET',
                  url: this._baseUrl(),
                  headers: options.headers
                });
              case 5:
                _res = _context41.sent;
                url = _res.identity;
              case 7:
                url += '?format=json';
                if (this.accessToken) {
                  url += "&oauth_token=".concat(encodeURIComponent(this.accessToken));
                }
                _context41.next = 11;
                return this.request({
                  method: 'GET',
                  url: url
                });
              case 11:
                res = _context41.sent;
                this.userInfo = {
                  id: res.user_id,
                  organizationId: res.organization_id,
                  url: res.id
                };
                return _context41.abrupt("return", res);
              case 14:
              case "end":
                return _context41.stop();
            }
          }
        }, _callee27, this);
      }));
      function identity() {
        return _identity.apply(this, arguments);
      }
      return identity;
    }()
    /**
     * List recently viewed records
     */
  }, {
    key: "recent",
    value: function () {
      var _recent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(type, limit) {
        var url, _yield$this$request, recentItems;
        return _regeneratorRuntime.wrap(function _callee28$(_context42) {
          while (1) {
            switch (_context42.prev = _context42.next) {
              case 0:
                /* eslint-disable no-param-reassign */
                if (typeof type === 'number') {
                  limit = type;
                  type = undefined;
                }
                if (!type) {
                  _context42.next = 8;
                  break;
                }
                url = [this._baseUrl(), 'sobjects', type].join('/');
                _context42.next = 5;
                return this.request(url);
              case 5:
                _yield$this$request = _context42.sent;
                recentItems = _yield$this$request.recentItems;
                return _context42.abrupt("return", limit ? _sliceInstanceProperty(recentItems).call(recentItems, 0, limit) : recentItems);
              case 8:
                url = "".concat(this._baseUrl(), "/recent");
                if (limit) {
                  url += "?limit=".concat(limit);
                }
                return _context42.abrupt("return", this.request(url));
              case 11:
              case "end":
                return _context42.stop();
            }
          }
        }, _callee28, this);
      }));
      function recent(_x61, _x62) {
        return _recent.apply(this, arguments);
      }
      return recent;
    }()
    /**
     * Retrieve updated records
     */
  }, {
    key: "updated",
    value: function () {
      var _updated = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(type, start, end) {
        var url, body;
        return _regeneratorRuntime.wrap(function _callee29$(_context43) {
          while (1) {
            switch (_context43.prev = _context43.next) {
              case 0:
                /* eslint-disable no-param-reassign */
                url = [this._baseUrl(), 'sobjects', type, 'updated'].join('/');
                if (typeof start === 'string') {
                  start = new Date(start);
                }
                start = formatDate(start);
                url += "?start=".concat(encodeURIComponent(start));
                if (typeof end === 'string') {
                  end = new Date(end);
                }
                end = formatDate(end);
                url += "&end=".concat(encodeURIComponent(end));
                _context43.next = 9;
                return this.request(url);
              case 9:
                body = _context43.sent;
                return _context43.abrupt("return", body);
              case 11:
              case "end":
                return _context43.stop();
            }
          }
        }, _callee29, this);
      }));
      function updated(_x63, _x64, _x65) {
        return _updated.apply(this, arguments);
      }
      return updated;
    }()
    /**
     * Retrieve deleted records
     */
  }, {
    key: "deleted",
    value: function () {
      var _deleted = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(type, start, end) {
        var url, body;
        return _regeneratorRuntime.wrap(function _callee30$(_context44) {
          while (1) {
            switch (_context44.prev = _context44.next) {
              case 0:
                /* eslint-disable no-param-reassign */
                url = [this._baseUrl(), 'sobjects', type, 'deleted'].join('/');
                if (typeof start === 'string') {
                  start = new Date(start);
                }
                start = formatDate(start);
                url += "?start=".concat(encodeURIComponent(start));
                if (typeof end === 'string') {
                  end = new Date(end);
                }
                end = formatDate(end);
                url += "&end=".concat(encodeURIComponent(end));
                _context44.next = 9;
                return this.request(url);
              case 9:
                body = _context44.sent;
                return _context44.abrupt("return", body);
              case 11:
              case "end":
                return _context44.stop();
            }
          }
        }, _callee30, this);
      }));
      function deleted(_x66, _x67, _x68) {
        return _deleted.apply(this, arguments);
      }
      return deleted;
    }()
    /**
     * Returns a list of all tabs
     */
  }, {
    key: "tabs",
    value: function () {
      var _tabs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31() {
        var url, body;
        return _regeneratorRuntime.wrap(function _callee31$(_context45) {
          while (1) {
            switch (_context45.prev = _context45.next) {
              case 0:
                url = [this._baseUrl(), 'tabs'].join('/');
                _context45.next = 3;
                return this.request(url);
              case 3:
                body = _context45.sent;
                return _context45.abrupt("return", body);
              case 5:
              case "end":
                return _context45.stop();
            }
          }
        }, _callee31, this);
      }));
      function tabs() {
        return _tabs.apply(this, arguments);
      }
      return tabs;
    }()
    /**
     * Returns current system limit in the organization
     */
  }, {
    key: "limits",
    value: function () {
      var _limits = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32() {
        var url, body;
        return _regeneratorRuntime.wrap(function _callee32$(_context46) {
          while (1) {
            switch (_context46.prev = _context46.next) {
              case 0:
                url = [this._baseUrl(), 'limits'].join('/');
                _context46.next = 3;
                return this.request(url);
              case 3:
                body = _context46.sent;
                return _context46.abrupt("return", body);
              case 5:
              case "end":
                return _context46.stop();
            }
          }
        }, _callee32, this);
      }));
      function limits() {
        return _limits.apply(this, arguments);
      }
      return limits;
    }()
    /**
     * Returns a theme info
     */
  }, {
    key: "theme",
    value: function () {
      var _theme = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33() {
        var url, body;
        return _regeneratorRuntime.wrap(function _callee33$(_context47) {
          while (1) {
            switch (_context47.prev = _context47.next) {
              case 0:
                url = [this._baseUrl(), 'theme'].join('/');
                _context47.next = 3;
                return this.request(url);
              case 3:
                body = _context47.sent;
                return _context47.abrupt("return", body);
              case 5:
              case "end":
                return _context47.stop();
            }
          }
        }, _callee33, this);
      }));
      function theme() {
        return _theme.apply(this, arguments);
      }
      return theme;
    }()
    /**
     * Returns all registered global quick actions
     */
  }, {
    key: "quickActions",
    value: function () {
      var _quickActions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34() {
        var body;
        return _regeneratorRuntime.wrap(function _callee34$(_context48) {
          while (1) {
            switch (_context48.prev = _context48.next) {
              case 0:
                _context48.next = 2;
                return this.request('/quickActions');
              case 2:
                body = _context48.sent;
                return _context48.abrupt("return", body);
              case 4:
              case "end":
                return _context48.stop();
            }
          }
        }, _callee34, this);
      }));
      function quickActions() {
        return _quickActions.apply(this, arguments);
      }
      return quickActions;
    }()
    /**
     * Get reference for specified global quick action
     */
  }, {
    key: "quickAction",
    value: function quickAction(actionName) {
      return new QuickAction(this, "/quickActions/".concat(actionName));
    }
    /**
     * Module which manages process rules and approval processes
     */
  }]);
  return Connection;
}(EventEmitter);
_defineProperty(Connection, "_logger", getLogger('connection'));
export default Connection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,