import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import "core-js/modules/es.object.to-string";
import "core-js/modules/es.regexp.to-string";
import _get from "@babel/runtime-corejs3/helpers/get";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
import _assertThisInitialized from "@babel/runtime-corejs3/helpers/assertThisInitialized";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context12; _forEachInstanceProperty(_context12 = ownKeys(Object(source), true)).call(_context12, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context13; _forEachInstanceProperty(_context13 = ownKeys(Object(source))).call(_context13, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * @file Manages Salesforce Metadata API
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { EventEmitter } from 'events';
import { Readable } from 'stream';
import FormData from 'form-data';
import { registerModule } from '../jsforce';
import SOAP from '../soap';
import { isObject } from '../util/function';
import { ApiSchemas } from './metadata/schema';
export * from './metadata/schema';

/**
 *
 */

/**
 *
 */
function deallocateTypeWithMetadata(metadata) {
  var _ref = metadata,
    $ = _ref.$,
    md = _objectWithoutProperties(_ref, ["$"]);
  return md;
}
function assignTypeWithMetadata(metadata, type) {
  var convert = function convert(md) {
    return _objectSpread(_defineProperty({}, '@xsi:type', type), md);
  };
  return _Array$isArray(metadata) ? _mapInstanceProperty(metadata).call(metadata, convert) : convert(metadata);
}

/**
 * Class for Salesforce Metadata API
 */
export var MetadataApi = /*#__PURE__*/function () {
  /**
   * Polling interval in milliseconds
   */

  /**
   * Polling timeout in milliseconds
   */

  /**
   *
   */
  function MetadataApi(conn) {
    _classCallCheck(this, MetadataApi);
    _defineProperty(this, "_conn", void 0);
    _defineProperty(this, "pollInterval", 1000);
    _defineProperty(this, "pollTimeout", 10000);
    this._conn = conn;
  }

  /**
   * Call Metadata API SOAP endpoint
   *
   * @private
   */
  _createClass(MetadataApi, [{
    key: "_invoke",
    value: function () {
      var _invoke2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(method, message, schema) {
        var _context;
        var soapEndpoint, res;
        return _regeneratorRuntime.wrap(function _callee$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                soapEndpoint = new SOAP(this._conn, {
                  xmlns: 'http://soap.sforce.com/2006/04/metadata',
                  endpointUrl: _concatInstanceProperty(_context = "".concat(this._conn.instanceUrl, "/services/Soap/m/")).call(_context, this._conn.version)
                });
                _context2.next = 3;
                return soapEndpoint.invoke(method, message, schema ? {
                  result: schema
                } : undefined, ApiSchemas);
              case 3:
                res = _context2.sent;
                return _context2.abrupt("return", res.result);
              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee, this);
      }));
      function _invoke(_x, _x2, _x3) {
        return _invoke2.apply(this, arguments);
      }
      return _invoke;
    }()
    /**
     * Add one or more new metadata components to the organization.
     */
  }, {
    key: "create",
    value: function create(type, metadata) {
      var isArray = _Array$isArray(metadata);
      metadata = assignTypeWithMetadata(metadata, type);
      var schema = isArray ? [ApiSchemas.SaveResult] : ApiSchemas.SaveResult;
      return this._invoke('createMetadata', {
        metadata: metadata
      }, schema);
    }
    /**
     * Read specified metadata components in the organization.
     */
  }, {
    key: "read",
    value: function () {
      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(type, fullNames) {
        var _context3;
        var ReadResultSchema, res;
        return _regeneratorRuntime.wrap(function _callee2$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                ReadResultSchema = type in ApiSchemas ? {
                  type: ApiSchemas.ReadResult.type,
                  props: {
                    records: [type]
                  }
                } : ApiSchemas.ReadResult;
                _context4.next = 3;
                return this._invoke('readMetadata', {
                  type: type,
                  fullNames: fullNames
                }, ReadResultSchema);
              case 3:
                res = _context4.sent;
                return _context4.abrupt("return", _Array$isArray(fullNames) ? _mapInstanceProperty(_context3 = res.records).call(_context3, deallocateTypeWithMetadata) : deallocateTypeWithMetadata(res.records[0]));
              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee2, this);
      }));
      function read(_x4, _x5) {
        return _read.apply(this, arguments);
      }
      return read;
    }()
    /**
     * Update one or more metadata components in the organization.
     */
  }, {
    key: "update",
    value: function update(type, metadata) {
      var isArray = _Array$isArray(metadata);
      metadata = assignTypeWithMetadata(metadata, type);
      var schema = isArray ? [ApiSchemas.SaveResult] : ApiSchemas.SaveResult;
      return this._invoke('updateMetadata', {
        metadata: metadata
      }, schema);
    }
    /**
     * Upsert one or more components in your organization's data.
     */
  }, {
    key: "upsert",
    value: function upsert(type, metadata) {
      var isArray = _Array$isArray(metadata);
      metadata = assignTypeWithMetadata(metadata, type);
      var schema = isArray ? [ApiSchemas.UpsertResult] : ApiSchemas.UpsertResult;
      return this._invoke('upsertMetadata', {
        metadata: metadata
      }, schema);
    }
    /**
     * Deletes specified metadata components in the organization.
     */
  }, {
    key: "delete",
    value: function _delete(type, fullNames) {
      var schema = _Array$isArray(fullNames) ? [ApiSchemas.SaveResult] : ApiSchemas.SaveResult;
      return this._invoke('deleteMetadata', {
        type: type,
        fullNames: fullNames
      }, schema);
    }
    /**
     * Rename fullname of a metadata component in the organization
     */
  }, {
    key: "rename",
    value: function rename(type, oldFullName, newFullName) {
      return this._invoke('renameMetadata', {
        type: type,
        oldFullName: oldFullName,
        newFullName: newFullName
      }, ApiSchemas.SaveResult);
    }
    /**
     * Retrieves the metadata which describes your organization, including Apex classes and triggers,
     * custom objects, custom fields on standard objects, tab sets that define an app,
     * and many other components.
     */
  }, {
    key: "describe",
    value: function describe(asOfVersion) {
      if (!asOfVersion) {
        asOfVersion = this._conn.version;
      }
      return this._invoke('describeMetadata', {
        asOfVersion: asOfVersion
      }, ApiSchemas.DescribeMetadataResult);
    }
    /**
     * Retrieves property information about metadata components in your organization
     */
  }, {
    key: "list",
    value: function list(queries, asOfVersion) {
      if (!asOfVersion) {
        asOfVersion = this._conn.version;
      }
      return this._invoke('listMetadata', {
        queries: queries,
        asOfVersion: asOfVersion
      }, [ApiSchemas.FileProperties]);
    }
    /**
     * Checks the status of asynchronous metadata calls
     */
  }, {
    key: "checkStatus",
    value: function checkStatus(asyncProcessId) {
      var res = this._invoke('checkStatus', {
        asyncProcessId: asyncProcessId
      }, ApiSchemas.AsyncResult);
      return new AsyncResultLocator(this, res);
    }
    /**
     * Retrieves XML file representations of components in an organization
     */
  }, {
    key: "retrieve",
    value: function retrieve(request) {
      var res = this._invoke('retrieve', {
        request: request
      }, ApiSchemas.RetrieveResult);
      return new RetrieveResultLocator(this, res);
    }
    /**
     * Checks the status of declarative metadata call retrieve() and returns the zip file contents
     */
  }, {
    key: "checkRetrieveStatus",
    value: function checkRetrieveStatus(asyncProcessId) {
      return this._invoke('checkRetrieveStatus', {
        asyncProcessId: asyncProcessId
      }, ApiSchemas.RetrieveResult);
    }
    /**
     * Will deploy a recently validated deploy request
     *
     * @param options.id = the deploy ID that's been validated already from a previous checkOnly deploy request
     * @param options.rest = a boolean whether or not to use the REST API
     * @returns the deploy ID of the recent validation request
     */
  }, {
    key: "deployRecentValidation",
    value: function () {
      var _deployRecentValidation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(options) {
        var id, rest, response, messageBody, requestInfo, requestOptions;
        return _regeneratorRuntime.wrap(function _callee3$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                id = options.id, rest = options.rest;
                if (!rest) {
                  _context5.next = 10;
                  break;
                }
                messageBody = _JSON$stringify({
                  validatedDeployRequestId: id
                });
                requestInfo = {
                  method: 'POST',
                  url: "".concat(this._conn._baseUrl(), "/metadata/deployRequest"),
                  body: messageBody,
                  headers: {
                    'content-type': 'application/json'
                  }
                };
                requestOptions = {
                  headers: 'json'
                }; // This is the deploy ID of the deployRecentValidation response, not
                // the already validated deploy ID (i.e., validateddeployrequestid).
                // REST returns an object with an id property, SOAP returns the id as a string directly.
                _context5.next = 7;
                return this._conn.request(requestInfo, requestOptions);
              case 7:
                response = _context5.sent.id;
                _context5.next = 13;
                break;
              case 10:
                _context5.next = 12;
                return this._invoke('deployRecentValidation', {
                  validationId: id
                });
              case 12:
                response = _context5.sent;
              case 13:
                return _context5.abrupt("return", response);
              case 14:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee3, this);
      }));
      function deployRecentValidation(_x6) {
        return _deployRecentValidation.apply(this, arguments);
      }
      return deployRecentValidation;
    }()
    /**
     * Deploy components into an organization using zipped file representations
     * using the REST Metadata API instead of SOAP
     */
  }, {
    key: "deployRest",
    value: function deployRest(zipInput) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var form = new FormData();
      form.append('file', zipInput, {
        contentType: 'application/zip',
        filename: 'package.xml'
      });

      // Add the deploy options
      form.append('entity_content', _JSON$stringify({
        deployOptions: options
      }), {
        contentType: 'application/json'
      });
      var request = {
        url: '/metadata/deployRequest',
        method: 'POST',
        headers: _objectSpread({}, form.getHeaders()),
        body: form.getBuffer()
      };
      var res = this._conn.request(request);
      return new DeployResultLocator(this, res);
    }
    /**
     * Deploy components into an organization using zipped file representations
     */
  }, {
    key: "deploy",
    value: function deploy(zipInput) {
      var _this = this;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var res = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var zipContentB64;
        return _regeneratorRuntime.wrap(function _callee4$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return new _Promise(function (resolve, reject) {
                  if (isObject(zipInput) && 'pipe' in zipInput && typeof zipInput.pipe === 'function') {
                    var bufs = [];
                    zipInput.on('data', function (d) {
                      return bufs.push(d);
                    });
                    zipInput.on('error', reject);
                    zipInput.on('end', function () {
                      resolve(_concatInstanceProperty(Buffer).call(Buffer, bufs).toString('base64'));
                    });
                    // zipInput.resume();
                  } else if (zipInput instanceof Buffer) {
                    resolve(zipInput.toString('base64'));
                  } else if (zipInput instanceof String || typeof zipInput === 'string') {
                    resolve(zipInput);
                  } else {
                    throw 'Unexpected zipInput type';
                  }
                });
              case 2:
                zipContentB64 = _context6.sent;
                return _context6.abrupt("return", _this._invoke('deploy', {
                  ZipFile: zipContentB64,
                  DeployOptions: options
                }, ApiSchemas.DeployResult));
              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee4);
      }))();
      return new DeployResultLocator(this, res);
    }
    /**
     * Checks the status of declarative metadata call deploy()
     */
  }, {
    key: "checkDeployStatus",
    value: function checkDeployStatus(asyncProcessId) {
      var includeDetails = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return this._invoke('checkDeployStatus', {
        asyncProcessId: asyncProcessId,
        includeDetails: includeDetails
      }, ApiSchemas.DeployResult);
    }
  }]);
  return MetadataApi;
}();

/*--------------------------------------------*/

/**
 * The locator class for Metadata API asynchronous call result
 */
export var AsyncResultLocator = /*#__PURE__*/function (_EventEmitter) {
  _inherits(AsyncResultLocator, _EventEmitter);
  var _super = _createSuper(AsyncResultLocator);
  /**
   *
   */
  function AsyncResultLocator(meta, promise) {
    var _this2;
    _classCallCheck(this, AsyncResultLocator);
    _this2 = _super.call(this);
    _defineProperty(_assertThisInitialized(_this2), "_meta", void 0);
    _defineProperty(_assertThisInitialized(_this2), "_promise", void 0);
    _defineProperty(_assertThisInitialized(_this2), "_id", void 0);
    _this2._meta = meta;
    _this2._promise = promise;
    return _this2;
  }

  /**
   * Promise/A+ interface
   * http://promises-aplus.github.io/promises-spec/
   *
   * @method Metadata~AsyncResultLocator#then
   */
  _createClass(AsyncResultLocator, [{
    key: "then",
    value: function then(onResolve, onReject) {
      return this._promise.then(onResolve, onReject);
    }
    /**
     * Check the status of async request
     */
  }, {
    key: "check",
    value: function () {
      var _check = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var result;
        return _regeneratorRuntime.wrap(function _callee5$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this._promise;
              case 2:
                result = _context7.sent;
                this._id = result.id;
                _context7.next = 6;
                return this._meta.checkStatus(result.id);
              case 6:
                return _context7.abrupt("return", _context7.sent);
              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee5, this);
      }));
      function check() {
        return _check.apply(this, arguments);
      }
      return check;
    }()
    /**
     * Polling until async call status becomes complete or error
     */
  }, {
    key: "poll",
    value: function poll(interval, timeout) {
      var _this3 = this;
      var startTime = new Date().getTime();
      var poll = /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
          var now, errMsg, _result;
          return _regeneratorRuntime.wrap(function _callee6$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  _context8.prev = 0;
                  now = new Date().getTime();
                  if (!(startTime + timeout < now)) {
                    _context8.next = 7;
                    break;
                  }
                  errMsg = 'Polling time out.';
                  if (_this3._id) {
                    errMsg += ' Process Id = ' + _this3._id;
                  }
                  _this3.emit('error', new Error(errMsg));
                  return _context8.abrupt("return");
                case 7:
                  _context8.next = 9;
                  return _this3.check();
                case 9:
                  _result = _context8.sent;
                  if (_result.done) {
                    _this3.emit('complete', _result);
                  } else {
                    _this3.emit('progress', _result);
                    _setTimeout(poll, interval);
                  }
                  _context8.next = 16;
                  break;
                case 13:
                  _context8.prev = 13;
                  _context8.t0 = _context8["catch"](0);
                  _this3.emit('error', _context8.t0);
                case 16:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee6, null, [[0, 13]]);
        }));
        return function poll() {
          return _ref3.apply(this, arguments);
        };
      }();
      _setTimeout(poll, interval);
    }
    /**
     * Check and wait until the async requests become in completed status
     */
  }, {
    key: "complete",
    value: function complete() {
      var _this4 = this;
      return new _Promise(function (resolve, reject) {
        _this4.on('complete', resolve);
        _this4.on('error', reject);
        _this4.poll(_this4._meta.pollInterval, _this4._meta.pollTimeout);
      });
    }
  }]);
  return AsyncResultLocator;
}(EventEmitter);

/*--------------------------------------------*/
/**
 * The locator class to track retreive() Metadata API call result
 */
export var RetrieveResultLocator = /*#__PURE__*/function (_AsyncResultLocator) {
  _inherits(RetrieveResultLocator, _AsyncResultLocator);
  var _super2 = _createSuper(RetrieveResultLocator);
  function RetrieveResultLocator() {
    _classCallCheck(this, RetrieveResultLocator);
    return _super2.apply(this, arguments);
  }
  _createClass(RetrieveResultLocator, [{
    key: "complete",
    /**
     * Check and wait until the async request becomes in completed status,
     * and retrieve the result data.
     */
    value: function () {
      var _complete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var result;
        return _regeneratorRuntime.wrap(function _callee7$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return _get(_getPrototypeOf(RetrieveResultLocator.prototype), "complete", this).call(this);
              case 2:
                result = _context9.sent;
                return _context9.abrupt("return", this._meta.checkRetrieveStatus(result.id));
              case 4:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee7, this);
      }));
      function complete() {
        return _complete.apply(this, arguments);
      }
      return complete;
    }()
    /**
     * Change the retrieved result to Node.js readable stream
     */
  }, {
    key: "stream",
    value: function stream() {
      var _this5 = this;
      var resultStream = new Readable();
      var reading = false;
      resultStream._read = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        var _result2;
        return _regeneratorRuntime.wrap(function _callee8$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                if (!reading) {
                  _context10.next = 2;
                  break;
                }
                return _context10.abrupt("return");
              case 2:
                reading = true;
                _context10.prev = 3;
                _context10.next = 6;
                return _this5.complete();
              case 6:
                _result2 = _context10.sent;
                resultStream.push(Buffer.from(_result2.zipFile, 'base64'));
                resultStream.push(null);
                _context10.next = 14;
                break;
              case 11:
                _context10.prev = 11;
                _context10.t0 = _context10["catch"](3);
                resultStream.emit('error', _context10.t0);
              case 14:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee8, null, [[3, 11]]);
      }));
      return resultStream;
    }
  }]);
  return RetrieveResultLocator;
}(AsyncResultLocator);

/*--------------------------------------------*/
/**
 * The locator class to track deploy() Metadata API call result
 *
 * @protected
 * @class Metadata~DeployResultLocator
 * @extends Metadata~AsyncResultLocator
 * @param {Metadata} meta - Metadata API object
 * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of deploy() call
 */
export var DeployResultLocator = /*#__PURE__*/function (_AsyncResultLocator2) {
  _inherits(DeployResultLocator, _AsyncResultLocator2);
  var _super3 = _createSuper(DeployResultLocator);
  function DeployResultLocator() {
    _classCallCheck(this, DeployResultLocator);
    return _super3.apply(this, arguments);
  }
  _createClass(DeployResultLocator, [{
    key: "complete",
    /**
     * Check and wait until the async request becomes in completed status,
     * and retrieve the result data.
     */
    value: function () {
      var _complete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(includeDetails) {
        var result;
        return _regeneratorRuntime.wrap(function _callee9$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return _get(_getPrototypeOf(DeployResultLocator.prototype), "complete", this).call(this);
              case 2:
                result = _context11.sent;
                return _context11.abrupt("return", this._meta.checkDeployStatus(result.id, includeDetails));
              case 4:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee9, this);
      }));
      function complete(_x7) {
        return _complete2.apply(this, arguments);
      }
      return complete;
    }()
  }]);
  return DeployResultLocator;
}(AsyncResultLocator);

/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
registerModule('metadata', function (conn) {
  return new MetadataApi(conn);
});
export default MetadataApi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJSZWFkYWJsZSIsIkZvcm1EYXRhIiwicmVnaXN0ZXJNb2R1bGUiLCJTT0FQIiwiaXNPYmplY3QiLCJBcGlTY2hlbWFzIiwiZGVhbGxvY2F0ZVR5cGVXaXRoTWV0YWRhdGEiLCJtZXRhZGF0YSIsIl9yZWYiLCIkIiwibWQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJhc3NpZ25UeXBlV2l0aE1ldGFkYXRhIiwidHlwZSIsImNvbnZlcnQiLCJfb2JqZWN0U3ByZWFkIiwiX2RlZmluZVByb3BlcnR5IiwiX0FycmF5JGlzQXJyYXkiLCJfbWFwSW5zdGFuY2VQcm9wZXJ0eSIsImNhbGwiLCJNZXRhZGF0YUFwaSIsImNvbm4iLCJfY2xhc3NDYWxsQ2hlY2siLCJfY29ubiIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiX2ludm9rZTIiLCJfYXN5bmNUb0dlbmVyYXRvciIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJtYXJrIiwiX2NhbGxlZSIsIm1ldGhvZCIsIm1lc3NhZ2UiLCJzY2hlbWEiLCJfY29udGV4dCIsInNvYXBFbmRwb2ludCIsInJlcyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0MiIsInByZXYiLCJuZXh0IiwieG1sbnMiLCJlbmRwb2ludFVybCIsIl9jb25jYXRJbnN0YW5jZVByb3BlcnR5IiwiY29uY2F0IiwiaW5zdGFuY2VVcmwiLCJ2ZXJzaW9uIiwiaW52b2tlIiwicmVzdWx0IiwidW5kZWZpbmVkIiwic2VudCIsImFicnVwdCIsInN0b3AiLCJfaW52b2tlIiwiX3giLCJfeDIiLCJfeDMiLCJhcHBseSIsImFyZ3VtZW50cyIsImNyZWF0ZSIsImlzQXJyYXkiLCJTYXZlUmVzdWx0IiwiX3JlYWQiLCJfY2FsbGVlMiIsImZ1bGxOYW1lcyIsIl9jb250ZXh0MyIsIlJlYWRSZXN1bHRTY2hlbWEiLCJfY2FsbGVlMiQiLCJfY29udGV4dDQiLCJSZWFkUmVzdWx0IiwicHJvcHMiLCJyZWNvcmRzIiwicmVhZCIsIl94NCIsIl94NSIsInVwZGF0ZSIsInVwc2VydCIsIlVwc2VydFJlc3VsdCIsIl9kZWxldGUiLCJyZW5hbWUiLCJvbGRGdWxsTmFtZSIsIm5ld0Z1bGxOYW1lIiwiZGVzY3JpYmUiLCJhc09mVmVyc2lvbiIsIkRlc2NyaWJlTWV0YWRhdGFSZXN1bHQiLCJsaXN0IiwicXVlcmllcyIsIkZpbGVQcm9wZXJ0aWVzIiwiY2hlY2tTdGF0dXMiLCJhc3luY1Byb2Nlc3NJZCIsIkFzeW5jUmVzdWx0IiwiQXN5bmNSZXN1bHRMb2NhdG9yIiwicmV0cmlldmUiLCJyZXF1ZXN0IiwiUmV0cmlldmVSZXN1bHQiLCJSZXRyaWV2ZVJlc3VsdExvY2F0b3IiLCJjaGVja1JldHJpZXZlU3RhdHVzIiwiX2RlcGxveVJlY2VudFZhbGlkYXRpb24iLCJfY2FsbGVlMyIsIm9wdGlvbnMiLCJpZCIsInJlc3QiLCJyZXNwb25zZSIsIm1lc3NhZ2VCb2R5IiwicmVxdWVzdEluZm8iLCJyZXF1ZXN0T3B0aW9ucyIsIl9jYWxsZWUzJCIsIl9jb250ZXh0NSIsIl9KU09OJHN0cmluZ2lmeSIsInZhbGlkYXRlZERlcGxveVJlcXVlc3RJZCIsInVybCIsIl9iYXNlVXJsIiwiYm9keSIsImhlYWRlcnMiLCJ2YWxpZGF0aW9uSWQiLCJkZXBsb3lSZWNlbnRWYWxpZGF0aW9uIiwiX3g2IiwiZGVwbG95UmVzdCIsInppcElucHV0IiwibGVuZ3RoIiwiZm9ybSIsImFwcGVuZCIsImNvbnRlbnRUeXBlIiwiZmlsZW5hbWUiLCJkZXBsb3lPcHRpb25zIiwiZ2V0SGVhZGVycyIsImdldEJ1ZmZlciIsIkRlcGxveVJlc3VsdExvY2F0b3IiLCJkZXBsb3kiLCJfdGhpcyIsIl9jYWxsZWU0IiwiemlwQ29udGVudEI2NCIsIl9jYWxsZWU0JCIsIl9jb250ZXh0NiIsIl9Qcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInBpcGUiLCJidWZzIiwib24iLCJkIiwicHVzaCIsIkJ1ZmZlciIsInRvU3RyaW5nIiwiU3RyaW5nIiwiWmlwRmlsZSIsIkRlcGxveU9wdGlvbnMiLCJEZXBsb3lSZXN1bHQiLCJjaGVja0RlcGxveVN0YXR1cyIsImluY2x1ZGVEZXRhaWxzIiwiX0V2ZW50RW1pdHRlciIsIl9pbmhlcml0cyIsIl9zdXBlciIsIl9jcmVhdGVTdXBlciIsIm1ldGEiLCJwcm9taXNlIiwiX3RoaXMyIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIl9tZXRhIiwiX3Byb21pc2UiLCJ0aGVuIiwib25SZXNvbHZlIiwib25SZWplY3QiLCJfY2hlY2siLCJfY2FsbGVlNSIsIl9jYWxsZWU1JCIsIl9jb250ZXh0NyIsIl9pZCIsImNoZWNrIiwicG9sbCIsImludGVydmFsIiwidGltZW91dCIsIl90aGlzMyIsInN0YXJ0VGltZSIsIkRhdGUiLCJnZXRUaW1lIiwiX3JlZjMiLCJfY2FsbGVlNiIsIm5vdyIsImVyck1zZyIsIl9yZXN1bHQiLCJfY2FsbGVlNiQiLCJfY29udGV4dDgiLCJlbWl0IiwiRXJyb3IiLCJkb25lIiwiX3NldFRpbWVvdXQiLCJ0MCIsImNvbXBsZXRlIiwiX3RoaXM0IiwicG9sbEludGVydmFsIiwicG9sbFRpbWVvdXQiLCJfQXN5bmNSZXN1bHRMb2NhdG9yIiwiX3N1cGVyMiIsIl9jb21wbGV0ZSIsIl9jYWxsZWU3IiwiX2NhbGxlZTckIiwiX2NvbnRleHQ5IiwiX2dldCIsIl9nZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsInN0cmVhbSIsIl90aGlzNSIsInJlc3VsdFN0cmVhbSIsInJlYWRpbmciLCJfY2FsbGVlOCIsIl9yZXN1bHQyIiwiX2NhbGxlZTgkIiwiX2NvbnRleHQxMCIsImZyb20iLCJ6aXBGaWxlIiwiX0FzeW5jUmVzdWx0TG9jYXRvcjIiLCJfc3VwZXIzIiwiX2NvbXBsZXRlMiIsIl9jYWxsZWU5IiwiX2NhbGxlZTkkIiwiX2NvbnRleHQxMSIsIl94NyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvbWV0YWRhdGEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBNYW5hZ2VzIFNhbGVzZm9yY2UgTWV0YWRhdGEgQVBJXG4gKiBAYXV0aG9yIFNoaW5pY2hpIFRvbWl0YSA8c2hpbmljaGkudG9taXRhQGdtYWlsLmNvbT5cbiAqL1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7IFJlYWRhYmxlIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCBGb3JtRGF0YSBmcm9tICdmb3JtLWRhdGEnO1xuaW1wb3J0IHsgcmVnaXN0ZXJNb2R1bGUgfSBmcm9tICcuLi9qc2ZvcmNlJztcbmltcG9ydCBDb25uZWN0aW9uIGZyb20gJy4uL2Nvbm5lY3Rpb24nO1xuaW1wb3J0IFNPQVAgZnJvbSAnLi4vc29hcCc7XG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gJy4uL3V0aWwvZnVuY3Rpb24nO1xuaW1wb3J0IHsgU2NoZW1hLCBTb2FwU2NoZW1hRGVmLCBTb2FwU2NoZW1hLCBIdHRwUmVxdWVzdCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7XG4gIEFwaVNjaGVtYXMsXG4gIE1ldGFkYXRhLFxuICBSZWFkUmVzdWx0LFxuICBTYXZlUmVzdWx0LFxuICBVcHNlcnRSZXN1bHQsXG4gIExpc3RNZXRhZGF0YVF1ZXJ5LFxuICBGaWxlUHJvcGVydGllcyxcbiAgRGVzY3JpYmVNZXRhZGF0YVJlc3VsdCxcbiAgUmV0cmlldmVSZXF1ZXN0LFxuICBEZXBsb3lPcHRpb25zLFxuICBSZXRyaWV2ZVJlc3VsdCxcbiAgRGVwbG95UmVzdWx0LFxuICBBc3luY1Jlc3VsdCxcbiAgQXBpU2NoZW1hVHlwZXMsXG59IGZyb20gJy4vbWV0YWRhdGEvc2NoZW1hJztcbmV4cG9ydCAqIGZyb20gJy4vbWV0YWRhdGEvc2NoZW1hJztcblxuLyoqXG4gKlxuICovXG50eXBlIE1ldGFkYXRhVHlwZV88XG4gIEsgZXh0ZW5kcyBrZXlvZiBBcGlTY2hlbWFUeXBlcyA9IGtleW9mIEFwaVNjaGVtYVR5cGVzXG4+ID0gSyBleHRlbmRzIGtleW9mIEFwaVNjaGVtYVR5cGVzXG4gID8gQXBpU2NoZW1hVHlwZXNbS10gZXh0ZW5kcyBNZXRhZGF0YVxuICAgID8gS1xuICAgIDogbmV2ZXJcbiAgOiBuZXZlcjtcblxuZXhwb3J0IHR5cGUgTWV0YWRhdGFUeXBlID0gTWV0YWRhdGFUeXBlXztcblxuZXhwb3J0IHR5cGUgTWV0YWRhdGFEZWZpbml0aW9uPFxuICBUIGV4dGVuZHMgc3RyaW5nLFxuICBNIGV4dGVuZHMgTWV0YWRhdGEgPSBNZXRhZGF0YVxuPiA9IE1ldGFkYXRhIGV4dGVuZHMgTVxuICA/IFQgZXh0ZW5kcyBrZXlvZiBBcGlTY2hlbWFUeXBlcyAmIE1ldGFkYXRhVHlwZVxuICAgID8gQXBpU2NoZW1hVHlwZXNbVF0gZXh0ZW5kcyBNZXRhZGF0YVxuICAgICAgPyBBcGlTY2hlbWFUeXBlc1tUXVxuICAgICAgOiBNZXRhZGF0YVxuICAgIDogTWV0YWRhdGFcbiAgOiBNO1xuXG50eXBlIERlZXBQYXJ0aWFsPFQ+ID0gVCBleHRlbmRzIGFueVtdXG4gID8gRGVlcFBhcnRpYWw8VFtudW1iZXJdPltdXG4gIDogVCBleHRlbmRzIG9iamVjdFxuICA/IHsgW0sgaW4ga2V5b2YgVF0/OiBEZWVwUGFydGlhbDxUW0tdPiB9XG4gIDogVDtcblxuZXhwb3J0IHR5cGUgSW5wdXRNZXRhZGF0YURlZmluaXRpb248XG4gIFQgZXh0ZW5kcyBzdHJpbmcsXG4gIE0gZXh0ZW5kcyBNZXRhZGF0YSA9IE1ldGFkYXRhXG4+ID0gRGVlcFBhcnRpYWw8TWV0YWRhdGFEZWZpbml0aW9uPFQsIE0+PjtcblxuLyoqXG4gKlxuICovXG5mdW5jdGlvbiBkZWFsbG9jYXRlVHlwZVdpdGhNZXRhZGF0YTxNIGV4dGVuZHMgTWV0YWRhdGE+KG1ldGFkYXRhOiBNKTogTSB7XG4gIGNvbnN0IHsgJCwgLi4ubWQgfSA9IG1ldGFkYXRhIGFzIGFueTtcbiAgcmV0dXJuIG1kO1xufVxuXG5mdW5jdGlvbiBhc3NpZ25UeXBlV2l0aE1ldGFkYXRhKG1ldGFkYXRhOiBNZXRhZGF0YSB8IE1ldGFkYXRhW10sIHR5cGU6IHN0cmluZykge1xuICBjb25zdCBjb252ZXJ0ID0gKG1kOiBNZXRhZGF0YSkgPT4gKHsgWydAeHNpOnR5cGUnXTogdHlwZSwgLi4ubWQgfSk7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG1ldGFkYXRhKSA/IG1ldGFkYXRhLm1hcChjb252ZXJ0KSA6IGNvbnZlcnQobWV0YWRhdGEpO1xufVxuXG4vKipcbiAqIENsYXNzIGZvciBTYWxlc2ZvcmNlIE1ldGFkYXRhIEFQSVxuICovXG5leHBvcnQgY2xhc3MgTWV0YWRhdGFBcGk8UyBleHRlbmRzIFNjaGVtYT4ge1xuICBfY29ubjogQ29ubmVjdGlvbjxTPjtcblxuICAvKipcbiAgICogUG9sbGluZyBpbnRlcnZhbCBpbiBtaWxsaXNlY29uZHNcbiAgICovXG4gIHBvbGxJbnRlcnZhbDogbnVtYmVyID0gMTAwMDtcblxuICAvKipcbiAgICogUG9sbGluZyB0aW1lb3V0IGluIG1pbGxpc2Vjb25kc1xuICAgKi9cbiAgcG9sbFRpbWVvdXQ6IG51bWJlciA9IDEwMDAwO1xuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IoY29ubjogQ29ubmVjdGlvbjxTPikge1xuICAgIHRoaXMuX2Nvbm4gPSBjb25uO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGwgTWV0YWRhdGEgQVBJIFNPQVAgZW5kcG9pbnRcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGFzeW5jIF9pbnZva2UoXG4gICAgbWV0aG9kOiBzdHJpbmcsXG4gICAgbWVzc2FnZTogb2JqZWN0LFxuICAgIHNjaGVtYT86IFNvYXBTY2hlbWEgfCBTb2FwU2NoZW1hRGVmLFxuICApIHtcbiAgICBjb25zdCBzb2FwRW5kcG9pbnQgPSBuZXcgU09BUCh0aGlzLl9jb25uLCB7XG4gICAgICB4bWxuczogJ2h0dHA6Ly9zb2FwLnNmb3JjZS5jb20vMjAwNi8wNC9tZXRhZGF0YScsXG4gICAgICBlbmRwb2ludFVybDogYCR7dGhpcy5fY29ubi5pbnN0YW5jZVVybH0vc2VydmljZXMvU29hcC9tLyR7dGhpcy5fY29ubi52ZXJzaW9ufWAsXG4gICAgfSk7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgc29hcEVuZHBvaW50Lmludm9rZShcbiAgICAgIG1ldGhvZCxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBzY2hlbWEgPyAoeyByZXN1bHQ6IHNjaGVtYSB9IGFzIFNvYXBTY2hlbWEpIDogdW5kZWZpbmVkLFxuICAgICAgQXBpU2NoZW1hcyxcbiAgICApO1xuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBvbmUgb3IgbW9yZSBuZXcgbWV0YWRhdGEgY29tcG9uZW50cyB0byB0aGUgb3JnYW5pemF0aW9uLlxuICAgKi9cbiAgY3JlYXRlPFxuICAgIE0gZXh0ZW5kcyBNZXRhZGF0YSA9IE1ldGFkYXRhLFxuICAgIFQgZXh0ZW5kcyBNZXRhZGF0YVR5cGUgPSBNZXRhZGF0YVR5cGUsXG4gICAgTUQgZXh0ZW5kcyBJbnB1dE1ldGFkYXRhRGVmaW5pdGlvbjxULCBNPiA9IElucHV0TWV0YWRhdGFEZWZpbml0aW9uPFQsIE0+XG4gID4odHlwZTogVCwgbWV0YWRhdGE6IE1EW10pOiBQcm9taXNlPFNhdmVSZXN1bHRbXT47XG4gIGNyZWF0ZTxcbiAgICBNIGV4dGVuZHMgTWV0YWRhdGEgPSBNZXRhZGF0YSxcbiAgICBUIGV4dGVuZHMgTWV0YWRhdGFUeXBlID0gTWV0YWRhdGFUeXBlLFxuICAgIE1EIGV4dGVuZHMgSW5wdXRNZXRhZGF0YURlZmluaXRpb248VCwgTT4gPSBJbnB1dE1ldGFkYXRhRGVmaW5pdGlvbjxULCBNPlxuICA+KHR5cGU6IFQsIG1ldGFkYXRhOiBNRCk6IFByb21pc2U8U2F2ZVJlc3VsdD47XG4gIGNyZWF0ZTxcbiAgICBNIGV4dGVuZHMgTWV0YWRhdGEgPSBNZXRhZGF0YSxcbiAgICBUIGV4dGVuZHMgTWV0YWRhdGFUeXBlID0gTWV0YWRhdGFUeXBlLFxuICAgIE1EIGV4dGVuZHMgSW5wdXRNZXRhZGF0YURlZmluaXRpb248VCwgTT4gPSBJbnB1dE1ldGFkYXRhRGVmaW5pdGlvbjxULCBNPlxuICA+KHR5cGU6IFQsIG1ldGFkYXRhOiBNRCB8IE1EW10pOiBQcm9taXNlPFNhdmVSZXN1bHQgfCBTYXZlUmVzdWx0W10+O1xuICBjcmVhdGUodHlwZTogc3RyaW5nLCBtZXRhZGF0YTogTWV0YWRhdGEgfCBNZXRhZGF0YVtdKSB7XG4gICAgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkobWV0YWRhdGEpO1xuICAgIG1ldGFkYXRhID0gYXNzaWduVHlwZVdpdGhNZXRhZGF0YShtZXRhZGF0YSwgdHlwZSk7XG4gICAgY29uc3Qgc2NoZW1hID0gaXNBcnJheSA/IFtBcGlTY2hlbWFzLlNhdmVSZXN1bHRdIDogQXBpU2NoZW1hcy5TYXZlUmVzdWx0O1xuICAgIHJldHVybiB0aGlzLl9pbnZva2UoJ2NyZWF0ZU1ldGFkYXRhJywgeyBtZXRhZGF0YSB9LCBzY2hlbWEpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlYWQgc3BlY2lmaWVkIG1ldGFkYXRhIGNvbXBvbmVudHMgaW4gdGhlIG9yZ2FuaXphdGlvbi5cbiAgICovXG4gIHJlYWQ8XG4gICAgTSBleHRlbmRzIE1ldGFkYXRhID0gTWV0YWRhdGEsXG4gICAgVCBleHRlbmRzIE1ldGFkYXRhVHlwZSA9IE1ldGFkYXRhVHlwZSxcbiAgICBNRCBleHRlbmRzIE1ldGFkYXRhRGVmaW5pdGlvbjxULCBNPiA9IE1ldGFkYXRhRGVmaW5pdGlvbjxULCBNPlxuICA+KHR5cGU6IFQsIGZ1bGxOYW1lczogc3RyaW5nW10pOiBQcm9taXNlPE1EW10+O1xuICByZWFkPFxuICAgIE0gZXh0ZW5kcyBNZXRhZGF0YSA9IE1ldGFkYXRhLFxuICAgIFQgZXh0ZW5kcyBNZXRhZGF0YVR5cGUgPSBNZXRhZGF0YVR5cGUsXG4gICAgTUQgZXh0ZW5kcyBNZXRhZGF0YURlZmluaXRpb248VCwgTT4gPSBNZXRhZGF0YURlZmluaXRpb248VCwgTT5cbiAgPih0eXBlOiBULCBmdWxsTmFtZXM6IHN0cmluZyk6IFByb21pc2U8TUQ+O1xuICByZWFkPFxuICAgIE0gZXh0ZW5kcyBNZXRhZGF0YSA9IE1ldGFkYXRhLFxuICAgIFQgZXh0ZW5kcyBNZXRhZGF0YVR5cGUgPSBNZXRhZGF0YVR5cGUsXG4gICAgTUQgZXh0ZW5kcyBNZXRhZGF0YURlZmluaXRpb248VCwgTT4gPSBNZXRhZGF0YURlZmluaXRpb248VCwgTT5cbiAgPih0eXBlOiBULCBmdWxsTmFtZXM6IHN0cmluZyB8IHN0cmluZ1tdKTogUHJvbWlzZTxNRCB8IE1EW10+O1xuICBhc3luYyByZWFkKHR5cGU6IHN0cmluZywgZnVsbE5hbWVzOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgIGNvbnN0IFJlYWRSZXN1bHRTY2hlbWEgPVxuICAgICAgdHlwZSBpbiBBcGlTY2hlbWFzXG4gICAgICAgID8gKHtcbiAgICAgICAgICAgIHR5cGU6IEFwaVNjaGVtYXMuUmVhZFJlc3VsdC50eXBlLFxuICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgcmVjb3JkczogW3R5cGVdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9IGFzIGNvbnN0KVxuICAgICAgICA6IEFwaVNjaGVtYXMuUmVhZFJlc3VsdDtcbiAgICBjb25zdCByZXM6IFJlYWRSZXN1bHQgPSBhd2FpdCB0aGlzLl9pbnZva2UoXG4gICAgICAncmVhZE1ldGFkYXRhJyxcbiAgICAgIHsgdHlwZSwgZnVsbE5hbWVzIH0sXG4gICAgICBSZWFkUmVzdWx0U2NoZW1hLFxuICAgICk7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZnVsbE5hbWVzKVxuICAgICAgPyByZXMucmVjb3Jkcy5tYXAoZGVhbGxvY2F0ZVR5cGVXaXRoTWV0YWRhdGEpXG4gICAgICA6IGRlYWxsb2NhdGVUeXBlV2l0aE1ldGFkYXRhKHJlcy5yZWNvcmRzWzBdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgb25lIG9yIG1vcmUgbWV0YWRhdGEgY29tcG9uZW50cyBpbiB0aGUgb3JnYW5pemF0aW9uLlxuICAgKi9cbiAgdXBkYXRlPFxuICAgIE0gZXh0ZW5kcyBNZXRhZGF0YSA9IE1ldGFkYXRhLFxuICAgIFQgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmcsXG4gICAgTUQgZXh0ZW5kcyBJbnB1dE1ldGFkYXRhRGVmaW5pdGlvbjxULCBNPiA9IElucHV0TWV0YWRhdGFEZWZpbml0aW9uPFQsIE0+XG4gID4odHlwZTogVCwgbWV0YWRhdGE6IFBhcnRpYWw8TUQ+W10pOiBQcm9taXNlPFNhdmVSZXN1bHRbXT47XG4gIHVwZGF0ZTxcbiAgICBNIGV4dGVuZHMgTWV0YWRhdGEgPSBNZXRhZGF0YSxcbiAgICBUIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nLFxuICAgIE1EIGV4dGVuZHMgSW5wdXRNZXRhZGF0YURlZmluaXRpb248VCwgTT4gPSBJbnB1dE1ldGFkYXRhRGVmaW5pdGlvbjxULCBNPlxuICA+KHR5cGU6IFQsIG1ldGFkYXRhOiBQYXJ0aWFsPE1EPik6IFByb21pc2U8U2F2ZVJlc3VsdD47XG4gIHVwZGF0ZTxcbiAgICBNIGV4dGVuZHMgTWV0YWRhdGEgPSBNZXRhZGF0YSxcbiAgICBUIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nLFxuICAgIE1EIGV4dGVuZHMgSW5wdXRNZXRhZGF0YURlZmluaXRpb248VCwgTT4gPSBJbnB1dE1ldGFkYXRhRGVmaW5pdGlvbjxULCBNPlxuICA+KFxuICAgIHR5cGU6IFQsXG4gICAgbWV0YWRhdGE6IFBhcnRpYWw8TUQ+IHwgUGFydGlhbDxNRD5bXSxcbiAgKTogUHJvbWlzZTxTYXZlUmVzdWx0IHwgU2F2ZVJlc3VsdFtdPjtcbiAgdXBkYXRlKHR5cGU6IHN0cmluZywgbWV0YWRhdGE6IE1ldGFkYXRhIHwgTWV0YWRhdGFbXSkge1xuICAgIGNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KG1ldGFkYXRhKTtcbiAgICBtZXRhZGF0YSA9IGFzc2lnblR5cGVXaXRoTWV0YWRhdGEobWV0YWRhdGEsIHR5cGUpO1xuICAgIGNvbnN0IHNjaGVtYSA9IGlzQXJyYXkgPyBbQXBpU2NoZW1hcy5TYXZlUmVzdWx0XSA6IEFwaVNjaGVtYXMuU2F2ZVJlc3VsdDtcbiAgICByZXR1cm4gdGhpcy5faW52b2tlKCd1cGRhdGVNZXRhZGF0YScsIHsgbWV0YWRhdGEgfSwgc2NoZW1hKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcHNlcnQgb25lIG9yIG1vcmUgY29tcG9uZW50cyBpbiB5b3VyIG9yZ2FuaXphdGlvbidzIGRhdGEuXG4gICAqL1xuICB1cHNlcnQ8XG4gICAgTSBleHRlbmRzIE1ldGFkYXRhID0gTWV0YWRhdGEsXG4gICAgVCBleHRlbmRzIHN0cmluZyA9IHN0cmluZyxcbiAgICBNRCBleHRlbmRzIElucHV0TWV0YWRhdGFEZWZpbml0aW9uPFQsIE0+ID0gSW5wdXRNZXRhZGF0YURlZmluaXRpb248VCwgTT5cbiAgPih0eXBlOiBULCBtZXRhZGF0YTogTURbXSk6IFByb21pc2U8VXBzZXJ0UmVzdWx0W10+O1xuICB1cHNlcnQ8XG4gICAgTSBleHRlbmRzIE1ldGFkYXRhID0gTWV0YWRhdGEsXG4gICAgVCBleHRlbmRzIHN0cmluZyA9IHN0cmluZyxcbiAgICBNRCBleHRlbmRzIElucHV0TWV0YWRhdGFEZWZpbml0aW9uPFQsIE0+ID0gSW5wdXRNZXRhZGF0YURlZmluaXRpb248VCwgTT5cbiAgPih0eXBlOiBULCBtZXRhZGF0YTogTUQpOiBQcm9taXNlPFVwc2VydFJlc3VsdD47XG4gIHVwc2VydDxcbiAgICBNIGV4dGVuZHMgTWV0YWRhdGEgPSBNZXRhZGF0YSxcbiAgICBUIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nLFxuICAgIE1EIGV4dGVuZHMgSW5wdXRNZXRhZGF0YURlZmluaXRpb248VCwgTT4gPSBJbnB1dE1ldGFkYXRhRGVmaW5pdGlvbjxULCBNPlxuICA+KHR5cGU6IFQsIG1ldGFkYXRhOiBNRCB8IE1EW10pOiBQcm9taXNlPFVwc2VydFJlc3VsdCB8IFVwc2VydFJlc3VsdFtdPjtcbiAgdXBzZXJ0KHR5cGU6IHN0cmluZywgbWV0YWRhdGE6IE1ldGFkYXRhIHwgTWV0YWRhdGFbXSkge1xuICAgIGNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KG1ldGFkYXRhKTtcbiAgICBtZXRhZGF0YSA9IGFzc2lnblR5cGVXaXRoTWV0YWRhdGEobWV0YWRhdGEsIHR5cGUpO1xuICAgIGNvbnN0IHNjaGVtYSA9IGlzQXJyYXlcbiAgICAgID8gW0FwaVNjaGVtYXMuVXBzZXJ0UmVzdWx0XVxuICAgICAgOiBBcGlTY2hlbWFzLlVwc2VydFJlc3VsdDtcbiAgICByZXR1cm4gdGhpcy5faW52b2tlKCd1cHNlcnRNZXRhZGF0YScsIHsgbWV0YWRhdGEgfSwgc2NoZW1hKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIHNwZWNpZmllZCBtZXRhZGF0YSBjb21wb25lbnRzIGluIHRoZSBvcmdhbml6YXRpb24uXG4gICAqL1xuICBkZWxldGUodHlwZTogc3RyaW5nLCBmdWxsTmFtZXM6IHN0cmluZ1tdKTogUHJvbWlzZTxTYXZlUmVzdWx0W10+O1xuICBkZWxldGUodHlwZTogc3RyaW5nLCBmdWxsTmFtZXM6IHN0cmluZyk6IFByb21pc2U8U2F2ZVJlc3VsdD47XG4gIGRlbGV0ZShcbiAgICB0eXBlOiBzdHJpbmcsXG4gICAgZnVsbE5hbWVzOiBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgKTogUHJvbWlzZTxTYXZlUmVzdWx0IHwgU2F2ZVJlc3VsdFtdPjtcbiAgZGVsZXRlKHR5cGU6IHN0cmluZywgZnVsbE5hbWVzOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgIGNvbnN0IHNjaGVtYSA9IEFycmF5LmlzQXJyYXkoZnVsbE5hbWVzKVxuICAgICAgPyBbQXBpU2NoZW1hcy5TYXZlUmVzdWx0XVxuICAgICAgOiBBcGlTY2hlbWFzLlNhdmVSZXN1bHQ7XG4gICAgcmV0dXJuIHRoaXMuX2ludm9rZSgnZGVsZXRlTWV0YWRhdGEnLCB7IHR5cGUsIGZ1bGxOYW1lcyB9LCBzY2hlbWEpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbmFtZSBmdWxsbmFtZSBvZiBhIG1ldGFkYXRhIGNvbXBvbmVudCBpbiB0aGUgb3JnYW5pemF0aW9uXG4gICAqL1xuICByZW5hbWUoXG4gICAgdHlwZTogc3RyaW5nLFxuICAgIG9sZEZ1bGxOYW1lOiBzdHJpbmcsXG4gICAgbmV3RnVsbE5hbWU6IHN0cmluZyxcbiAgKTogUHJvbWlzZTxTYXZlUmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuX2ludm9rZShcbiAgICAgICdyZW5hbWVNZXRhZGF0YScsXG4gICAgICB7IHR5cGUsIG9sZEZ1bGxOYW1lLCBuZXdGdWxsTmFtZSB9LFxuICAgICAgQXBpU2NoZW1hcy5TYXZlUmVzdWx0LFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIHRoZSBtZXRhZGF0YSB3aGljaCBkZXNjcmliZXMgeW91ciBvcmdhbml6YXRpb24sIGluY2x1ZGluZyBBcGV4IGNsYXNzZXMgYW5kIHRyaWdnZXJzLFxuICAgKiBjdXN0b20gb2JqZWN0cywgY3VzdG9tIGZpZWxkcyBvbiBzdGFuZGFyZCBvYmplY3RzLCB0YWIgc2V0cyB0aGF0IGRlZmluZSBhbiBhcHAsXG4gICAqIGFuZCBtYW55IG90aGVyIGNvbXBvbmVudHMuXG4gICAqL1xuICBkZXNjcmliZShhc09mVmVyc2lvbj86IHN0cmluZyk6IFByb21pc2U8RGVzY3JpYmVNZXRhZGF0YVJlc3VsdD4ge1xuICAgIGlmICghYXNPZlZlcnNpb24pIHtcbiAgICAgIGFzT2ZWZXJzaW9uID0gdGhpcy5fY29ubi52ZXJzaW9uO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5faW52b2tlKFxuICAgICAgJ2Rlc2NyaWJlTWV0YWRhdGEnLFxuICAgICAgeyBhc09mVmVyc2lvbiB9LFxuICAgICAgQXBpU2NoZW1hcy5EZXNjcmliZU1ldGFkYXRhUmVzdWx0LFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIHByb3BlcnR5IGluZm9ybWF0aW9uIGFib3V0IG1ldGFkYXRhIGNvbXBvbmVudHMgaW4geW91ciBvcmdhbml6YXRpb25cbiAgICovXG4gIGxpc3QoXG4gICAgcXVlcmllczogTGlzdE1ldGFkYXRhUXVlcnkgfCBMaXN0TWV0YWRhdGFRdWVyeVtdLFxuICAgIGFzT2ZWZXJzaW9uPzogc3RyaW5nLFxuICApOiBQcm9taXNlPEZpbGVQcm9wZXJ0aWVzW10+IHtcbiAgICBpZiAoIWFzT2ZWZXJzaW9uKSB7XG4gICAgICBhc09mVmVyc2lvbiA9IHRoaXMuX2Nvbm4udmVyc2lvbjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2ludm9rZSgnbGlzdE1ldGFkYXRhJywgeyBxdWVyaWVzLCBhc09mVmVyc2lvbiB9LCBbXG4gICAgICBBcGlTY2hlbWFzLkZpbGVQcm9wZXJ0aWVzLFxuICAgIF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB0aGUgc3RhdHVzIG9mIGFzeW5jaHJvbm91cyBtZXRhZGF0YSBjYWxsc1xuICAgKi9cbiAgY2hlY2tTdGF0dXMoYXN5bmNQcm9jZXNzSWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHJlcyA9IHRoaXMuX2ludm9rZShcbiAgICAgICdjaGVja1N0YXR1cycsXG4gICAgICB7IGFzeW5jUHJvY2Vzc0lkIH0sXG4gICAgICBBcGlTY2hlbWFzLkFzeW5jUmVzdWx0LFxuICAgICk7XG4gICAgcmV0dXJuIG5ldyBBc3luY1Jlc3VsdExvY2F0b3IodGhpcywgcmVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgWE1MIGZpbGUgcmVwcmVzZW50YXRpb25zIG9mIGNvbXBvbmVudHMgaW4gYW4gb3JnYW5pemF0aW9uXG4gICAqL1xuICByZXRyaWV2ZShyZXF1ZXN0OiBQYXJ0aWFsPFJldHJpZXZlUmVxdWVzdD4pIHtcbiAgICBjb25zdCByZXMgPSB0aGlzLl9pbnZva2UoXG4gICAgICAncmV0cmlldmUnLFxuICAgICAgeyByZXF1ZXN0IH0sXG4gICAgICBBcGlTY2hlbWFzLlJldHJpZXZlUmVzdWx0LFxuICAgICk7XG4gICAgcmV0dXJuIG5ldyBSZXRyaWV2ZVJlc3VsdExvY2F0b3IodGhpcywgcmVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIHN0YXR1cyBvZiBkZWNsYXJhdGl2ZSBtZXRhZGF0YSBjYWxsIHJldHJpZXZlKCkgYW5kIHJldHVybnMgdGhlIHppcCBmaWxlIGNvbnRlbnRzXG4gICAqL1xuICBjaGVja1JldHJpZXZlU3RhdHVzKGFzeW5jUHJvY2Vzc0lkOiBzdHJpbmcpOiBQcm9taXNlPFJldHJpZXZlUmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuX2ludm9rZShcbiAgICAgICdjaGVja1JldHJpZXZlU3RhdHVzJyxcbiAgICAgIHsgYXN5bmNQcm9jZXNzSWQgfSxcbiAgICAgIEFwaVNjaGVtYXMuUmV0cmlldmVSZXN1bHQsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaWxsIGRlcGxveSBhIHJlY2VudGx5IHZhbGlkYXRlZCBkZXBsb3kgcmVxdWVzdFxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucy5pZCA9IHRoZSBkZXBsb3kgSUQgdGhhdCdzIGJlZW4gdmFsaWRhdGVkIGFscmVhZHkgZnJvbSBhIHByZXZpb3VzIGNoZWNrT25seSBkZXBsb3kgcmVxdWVzdFxuICAgKiBAcGFyYW0gb3B0aW9ucy5yZXN0ID0gYSBib29sZWFuIHdoZXRoZXIgb3Igbm90IHRvIHVzZSB0aGUgUkVTVCBBUElcbiAgICogQHJldHVybnMgdGhlIGRlcGxveSBJRCBvZiB0aGUgcmVjZW50IHZhbGlkYXRpb24gcmVxdWVzdFxuICAgKi9cbiAgcHVibGljIGFzeW5jIGRlcGxveVJlY2VudFZhbGlkYXRpb24ob3B0aW9uczoge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgcmVzdD86IGJvb2xlYW47XG4gIH0pOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IHsgaWQsIHJlc3QgfSA9IG9wdGlvbnM7XG4gICAgbGV0IHJlc3BvbnNlOiBzdHJpbmc7XG4gICAgaWYgKHJlc3QpIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2VCb2R5ID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICB2YWxpZGF0ZWREZXBsb3lSZXF1ZXN0SWQ6IGlkLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlcXVlc3RJbmZvOiBIdHRwUmVxdWVzdCA9IHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIHVybDogYCR7dGhpcy5fY29ubi5fYmFzZVVybCgpfS9tZXRhZGF0YS9kZXBsb3lSZXF1ZXN0YCxcbiAgICAgICAgYm9keTogbWVzc2FnZUJvZHksXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICAgIGNvbnN0IHJlcXVlc3RPcHRpb25zID0geyBoZWFkZXJzOiAnanNvbicgfTtcbiAgICAgIC8vIFRoaXMgaXMgdGhlIGRlcGxveSBJRCBvZiB0aGUgZGVwbG95UmVjZW50VmFsaWRhdGlvbiByZXNwb25zZSwgbm90XG4gICAgICAvLyB0aGUgYWxyZWFkeSB2YWxpZGF0ZWQgZGVwbG95IElEIChpLmUuLCB2YWxpZGF0ZWRkZXBsb3lyZXF1ZXN0aWQpLlxuICAgICAgLy8gUkVTVCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIGFuIGlkIHByb3BlcnR5LCBTT0FQIHJldHVybnMgdGhlIGlkIGFzIGEgc3RyaW5nIGRpcmVjdGx5LlxuICAgICAgcmVzcG9uc2UgPSAoXG4gICAgICAgIGF3YWl0IHRoaXMuX2Nvbm4ucmVxdWVzdDx7IGlkOiBzdHJpbmcgfT4ocmVxdWVzdEluZm8sIHJlcXVlc3RPcHRpb25zKVxuICAgICAgKS5pZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLl9pbnZva2UoJ2RlcGxveVJlY2VudFZhbGlkYXRpb24nLCB7XG4gICAgICAgIHZhbGlkYXRpb25JZDogaWQsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cblxuICAvKipcbiAgICogRGVwbG95IGNvbXBvbmVudHMgaW50byBhbiBvcmdhbml6YXRpb24gdXNpbmcgemlwcGVkIGZpbGUgcmVwcmVzZW50YXRpb25zXG4gICAqIHVzaW5nIHRoZSBSRVNUIE1ldGFkYXRhIEFQSSBpbnN0ZWFkIG9mIFNPQVBcbiAgICovXG4gIGRlcGxveVJlc3QoXG4gICAgemlwSW5wdXQ6IEJ1ZmZlcixcbiAgICBvcHRpb25zOiBQYXJ0aWFsPERlcGxveU9wdGlvbnM+ID0ge30sXG4gICk6IERlcGxveVJlc3VsdExvY2F0b3I8Uz4ge1xuICAgIGNvbnN0IGZvcm0gPSBuZXcgRm9ybURhdGEoKTtcbiAgICBmb3JtLmFwcGVuZCgnZmlsZScsIHppcElucHV0LCB7XG4gICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL3ppcCcsXG4gICAgICBmaWxlbmFtZTogJ3BhY2thZ2UueG1sJyxcbiAgICB9KTtcblxuICAgIC8vIEFkZCB0aGUgZGVwbG95IG9wdGlvbnNcbiAgICBmb3JtLmFwcGVuZCgnZW50aXR5X2NvbnRlbnQnLCBKU09OLnN0cmluZ2lmeSh7IGRlcGxveU9wdGlvbnM6IG9wdGlvbnMgfSksIHtcbiAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgfSk7XG5cbiAgICBjb25zdCByZXF1ZXN0OiBIdHRwUmVxdWVzdCA9IHtcbiAgICAgIHVybDogJy9tZXRhZGF0YS9kZXBsb3lSZXF1ZXN0JyxcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogeyAuLi5mb3JtLmdldEhlYWRlcnMoKSB9LFxuICAgICAgYm9keTogZm9ybS5nZXRCdWZmZXIoKSxcbiAgICB9O1xuICAgIGNvbnN0IHJlcyA9IHRoaXMuX2Nvbm4ucmVxdWVzdDxBc3luY1Jlc3VsdD4ocmVxdWVzdCk7XG5cbiAgICByZXR1cm4gbmV3IERlcGxveVJlc3VsdExvY2F0b3IodGhpcywgcmVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXBsb3kgY29tcG9uZW50cyBpbnRvIGFuIG9yZ2FuaXphdGlvbiB1c2luZyB6aXBwZWQgZmlsZSByZXByZXNlbnRhdGlvbnNcbiAgICovXG4gIGRlcGxveShcbiAgICB6aXBJbnB1dDogUmVhZGFibGUgfCBCdWZmZXIgfCBzdHJpbmcsXG4gICAgb3B0aW9uczogUGFydGlhbDxEZXBsb3lPcHRpb25zPiA9IHt9LFxuICApOiBEZXBsb3lSZXN1bHRMb2NhdG9yPFM+IHtcbiAgICBjb25zdCByZXMgPSAoYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgemlwQ29udGVudEI2NCA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGlzT2JqZWN0KHppcElucHV0KSAmJlxuICAgICAgICAgICdwaXBlJyBpbiB6aXBJbnB1dCAmJlxuICAgICAgICAgIHR5cGVvZiB6aXBJbnB1dC5waXBlID09PSAnZnVuY3Rpb24nXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IGJ1ZnM6IEJ1ZmZlcltdID0gW107XG4gICAgICAgICAgemlwSW5wdXQub24oJ2RhdGEnLCAoZCkgPT4gYnVmcy5wdXNoKGQpKTtcbiAgICAgICAgICB6aXBJbnB1dC5vbignZXJyb3InLCByZWplY3QpO1xuICAgICAgICAgIHppcElucHV0Lm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKEJ1ZmZlci5jb25jYXQoYnVmcykudG9TdHJpbmcoJ2Jhc2U2NCcpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyB6aXBJbnB1dC5yZXN1bWUoKTtcbiAgICAgICAgfSBlbHNlIGlmICh6aXBJbnB1dCBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgICAgICAgIHJlc29sdmUoemlwSW5wdXQudG9TdHJpbmcoJ2Jhc2U2NCcpKTtcbiAgICAgICAgfSBlbHNlIGlmICh6aXBJbnB1dCBpbnN0YW5jZW9mIFN0cmluZyB8fCB0eXBlb2YgemlwSW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmVzb2x2ZSh6aXBJbnB1dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgJ1VuZXhwZWN0ZWQgemlwSW5wdXQgdHlwZSc7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdGhpcy5faW52b2tlKFxuICAgICAgICAnZGVwbG95JyxcbiAgICAgICAge1xuICAgICAgICAgIFppcEZpbGU6IHppcENvbnRlbnRCNjQsXG4gICAgICAgICAgRGVwbG95T3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgfSxcbiAgICAgICAgQXBpU2NoZW1hcy5EZXBsb3lSZXN1bHQsXG4gICAgICApO1xuICAgIH0pKCk7XG5cbiAgICByZXR1cm4gbmV3IERlcGxveVJlc3VsdExvY2F0b3IodGhpcywgcmVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIHN0YXR1cyBvZiBkZWNsYXJhdGl2ZSBtZXRhZGF0YSBjYWxsIGRlcGxveSgpXG4gICAqL1xuICBjaGVja0RlcGxveVN0YXR1cyhcbiAgICBhc3luY1Byb2Nlc3NJZDogc3RyaW5nLFxuICAgIGluY2x1ZGVEZXRhaWxzOiBib29sZWFuID0gZmFsc2UsXG4gICk6IFByb21pc2U8RGVwbG95UmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuX2ludm9rZShcbiAgICAgICdjaGVja0RlcGxveVN0YXR1cycsXG4gICAgICB7XG4gICAgICAgIGFzeW5jUHJvY2Vzc0lkLFxuICAgICAgICBpbmNsdWRlRGV0YWlscyxcbiAgICAgIH0sXG4gICAgICBBcGlTY2hlbWFzLkRlcGxveVJlc3VsdCxcbiAgICApO1xuICB9XG59XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4vKipcbiAqIFRoZSBsb2NhdG9yIGNsYXNzIGZvciBNZXRhZGF0YSBBUEkgYXN5bmNocm9ub3VzIGNhbGwgcmVzdWx0XG4gKi9cbmV4cG9ydCBjbGFzcyBBc3luY1Jlc3VsdExvY2F0b3I8XG4gIFMgZXh0ZW5kcyBTY2hlbWEsXG4gIFIgZXh0ZW5kcyB7fSA9IEFzeW5jUmVzdWx0XG4+IGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgX21ldGE6IE1ldGFkYXRhQXBpPFM+O1xuICBfcHJvbWlzZTogUHJvbWlzZTxBc3luY1Jlc3VsdD47XG4gIF9pZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IobWV0YTogTWV0YWRhdGFBcGk8Uz4sIHByb21pc2U6IFByb21pc2U8QXN5bmNSZXN1bHQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9tZXRhID0gbWV0YTtcbiAgICB0aGlzLl9wcm9taXNlID0gcHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9taXNlL0ErIGludGVyZmFjZVxuICAgKiBodHRwOi8vcHJvbWlzZXMtYXBsdXMuZ2l0aHViLmlvL3Byb21pc2VzLXNwZWMvXG4gICAqXG4gICAqIEBtZXRob2QgTWV0YWRhdGF+QXN5bmNSZXN1bHRMb2NhdG9yI3RoZW5cbiAgICovXG4gIHRoZW48VSwgVj4oXG4gICAgb25SZXNvbHZlPzogKChyZXN1bHQ6IEFzeW5jUmVzdWx0KSA9PiBVIHwgUHJvbWlzZTxVPikgfCBudWxsIHwgdW5kZWZpbmVkLFxuICAgIG9uUmVqZWN0PzogKChlcnI6IEVycm9yKSA9PiBWIHwgUHJvbWlzZTxWPikgfCBudWxsIHwgdW5kZWZpbmVkLFxuICApOiBQcm9taXNlPFUgfCBWPiB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb21pc2UudGhlbihvblJlc29sdmUsIG9uUmVqZWN0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB0aGUgc3RhdHVzIG9mIGFzeW5jIHJlcXVlc3RcbiAgICovXG4gIGFzeW5jIGNoZWNrKCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX3Byb21pc2U7XG4gICAgdGhpcy5faWQgPSByZXN1bHQuaWQ7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuX21ldGEuY2hlY2tTdGF0dXMocmVzdWx0LmlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQb2xsaW5nIHVudGlsIGFzeW5jIGNhbGwgc3RhdHVzIGJlY29tZXMgY29tcGxldGUgb3IgZXJyb3JcbiAgICovXG4gIHBvbGwoaW50ZXJ2YWw6IG51bWJlciwgdGltZW91dDogbnVtYmVyKSB7XG4gICAgY29uc3Qgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgY29uc3QgcG9sbCA9IGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICBpZiAoc3RhcnRUaW1lICsgdGltZW91dCA8IG5vdykge1xuICAgICAgICAgIGxldCBlcnJNc2cgPSAnUG9sbGluZyB0aW1lIG91dC4nO1xuICAgICAgICAgIGlmICh0aGlzLl9pZCkge1xuICAgICAgICAgICAgZXJyTXNnICs9ICcgUHJvY2VzcyBJZCA9ICcgKyB0aGlzLl9pZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcihlcnJNc2cpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5jaGVjaygpO1xuICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICB0aGlzLmVtaXQoJ2NvbXBsZXRlJywgcmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmVtaXQoJ3Byb2dyZXNzJywgcmVzdWx0KTtcbiAgICAgICAgICBzZXRUaW1lb3V0KHBvbGwsIGludGVydmFsKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgfVxuICAgIH07XG4gICAgc2V0VGltZW91dChwb2xsLCBpbnRlcnZhbCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgYW5kIHdhaXQgdW50aWwgdGhlIGFzeW5jIHJlcXVlc3RzIGJlY29tZSBpbiBjb21wbGV0ZWQgc3RhdHVzXG4gICAqL1xuICBjb21wbGV0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8Uj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5vbignY29tcGxldGUnLCByZXNvbHZlKTtcbiAgICAgIHRoaXMub24oJ2Vycm9yJywgcmVqZWN0KTtcbiAgICAgIHRoaXMucG9sbCh0aGlzLl9tZXRhLnBvbGxJbnRlcnZhbCwgdGhpcy5fbWV0YS5wb2xsVGltZW91dCk7XG4gICAgfSk7XG4gIH1cbn1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIFRoZSBsb2NhdG9yIGNsYXNzIHRvIHRyYWNrIHJldHJlaXZlKCkgTWV0YWRhdGEgQVBJIGNhbGwgcmVzdWx0XG4gKi9cbmV4cG9ydCBjbGFzcyBSZXRyaWV2ZVJlc3VsdExvY2F0b3I8UyBleHRlbmRzIFNjaGVtYT4gZXh0ZW5kcyBBc3luY1Jlc3VsdExvY2F0b3I8XG4gIFMsXG4gIFJldHJpZXZlUmVzdWx0XG4+IHtcbiAgLyoqXG4gICAqIENoZWNrIGFuZCB3YWl0IHVudGlsIHRoZSBhc3luYyByZXF1ZXN0IGJlY29tZXMgaW4gY29tcGxldGVkIHN0YXR1cyxcbiAgICogYW5kIHJldHJpZXZlIHRoZSByZXN1bHQgZGF0YS5cbiAgICovXG4gIGFzeW5jIGNvbXBsZXRlKCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN1cGVyLmNvbXBsZXRlKCk7XG4gICAgcmV0dXJuIHRoaXMuX21ldGEuY2hlY2tSZXRyaWV2ZVN0YXR1cyhyZXN1bHQuaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgcmV0cmlldmVkIHJlc3VsdCB0byBOb2RlLmpzIHJlYWRhYmxlIHN0cmVhbVxuICAgKi9cbiAgc3RyZWFtKCkge1xuICAgIGNvbnN0IHJlc3VsdFN0cmVhbSA9IG5ldyBSZWFkYWJsZSgpO1xuICAgIGxldCByZWFkaW5nID0gZmFsc2U7XG4gICAgcmVzdWx0U3RyZWFtLl9yZWFkID0gYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKHJlYWRpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmVhZGluZyA9IHRydWU7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmNvbXBsZXRlKCk7XG4gICAgICAgIHJlc3VsdFN0cmVhbS5wdXNoKEJ1ZmZlci5mcm9tKHJlc3VsdC56aXBGaWxlLCAnYmFzZTY0JykpO1xuICAgICAgICByZXN1bHRTdHJlYW0ucHVzaChudWxsKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVzdWx0U3RyZWFtLmVtaXQoJ2Vycm9yJywgZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gcmVzdWx0U3RyZWFtO1xuICB9XG59XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBUaGUgbG9jYXRvciBjbGFzcyB0byB0cmFjayBkZXBsb3koKSBNZXRhZGF0YSBBUEkgY2FsbCByZXN1bHRcbiAqXG4gKiBAcHJvdGVjdGVkXG4gKiBAY2xhc3MgTWV0YWRhdGF+RGVwbG95UmVzdWx0TG9jYXRvclxuICogQGV4dGVuZHMgTWV0YWRhdGF+QXN5bmNSZXN1bHRMb2NhdG9yXG4gKiBAcGFyYW0ge01ldGFkYXRhfSBtZXRhIC0gTWV0YWRhdGEgQVBJIG9iamVjdFxuICogQHBhcmFtIHtQcm9taXNlLjxNZXRhZGF0YX5Bc3luY1Jlc3VsdD59IHJlc3VsdCAtIFByb21pc2Ugb2JqZWN0IGZvciBhc3luYyByZXN1bHQgb2YgZGVwbG95KCkgY2FsbFxuICovXG5leHBvcnQgY2xhc3MgRGVwbG95UmVzdWx0TG9jYXRvcjxTIGV4dGVuZHMgU2NoZW1hPiBleHRlbmRzIEFzeW5jUmVzdWx0TG9jYXRvcjxcbiAgUyxcbiAgRGVwbG95UmVzdWx0XG4+IHtcbiAgLyoqXG4gICAqIENoZWNrIGFuZCB3YWl0IHVudGlsIHRoZSBhc3luYyByZXF1ZXN0IGJlY29tZXMgaW4gY29tcGxldGVkIHN0YXR1cyxcbiAgICogYW5kIHJldHJpZXZlIHRoZSByZXN1bHQgZGF0YS5cbiAgICovXG4gIGFzeW5jIGNvbXBsZXRlKGluY2x1ZGVEZXRhaWxzPzogYm9vbGVhbikge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN1cGVyLmNvbXBsZXRlKCk7XG4gICAgcmV0dXJuIHRoaXMuX21ldGEuY2hlY2tEZXBsb3lTdGF0dXMocmVzdWx0LmlkLCBpbmNsdWRlRGV0YWlscyk7XG4gIH1cbn1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKlxuICogUmVnaXN0ZXIgaG9vayBpbiBjb25uZWN0aW9uIGluc3RhbnRpYXRpb24gZm9yIGR5bmFtaWNhbGx5IGFkZGluZyB0aGlzIEFQSSBtb2R1bGUgZmVhdHVyZXNcbiAqL1xucmVnaXN0ZXJNb2R1bGUoJ21ldGFkYXRhJywgKGNvbm4pID0+IG5ldyBNZXRhZGF0YUFwaShjb25uKSk7XG5cbmV4cG9ydCBkZWZhdWx0IE1ldGFkYXRhQXBpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLFlBQVksUUFBUSxRQUFRO0FBQ3JDLFNBQVNDLFFBQVEsUUFBUSxRQUFRO0FBQ2pDLE9BQU9DLFFBQVEsTUFBTSxXQUFXO0FBQ2hDLFNBQVNDLGNBQWMsUUFBUSxZQUFZO0FBRTNDLE9BQU9DLElBQUksTUFBTSxTQUFTO0FBQzFCLFNBQVNDLFFBQVEsUUFBUSxrQkFBa0I7QUFFM0MsU0FDRUMsVUFBVSxRQWNMLG1CQUFtQjtBQUMxQixjQUFjLG1CQUFtQjs7QUFFakM7QUFDQTtBQUNBOztBQWlDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQywwQkFBMEJBLENBQXFCQyxRQUFXLEVBQUs7RUFBQSxJQUFBQyxJQUFBLEdBQ2pERCxRQUFRO0lBQXJCRSxDQUFDLEdBQUFELElBQUEsQ0FBREMsQ0FBQztJQUFLQyxFQUFFLEdBQUFDLHdCQUFBLENBQUFILElBQUE7RUFDaEIsT0FBT0UsRUFBRTtBQUNYO0FBRUEsU0FBU0Us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