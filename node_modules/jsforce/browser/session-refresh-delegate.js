import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _Date$now from "@babel/runtime-corejs3/core-js-stable/date/now";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
/**
 *
 */
import { getLogger } from './util/logger';

/**
 *
 */

/**
 *
 */
export var SessionRefreshDelegate = /*#__PURE__*/function () {
  function SessionRefreshDelegate(conn, refreshFn) {
    _classCallCheck(this, SessionRefreshDelegate);
    _defineProperty(this, "_refreshFn", void 0);
    _defineProperty(this, "_conn", void 0);
    _defineProperty(this, "_logger", void 0);
    _defineProperty(this, "_lastRefreshedAt", undefined);
    _defineProperty(this, "_refreshPromise", undefined);
    this._conn = conn;
    this._logger = conn._logLevel ? SessionRefreshDelegate._logger.createInstance(conn._logLevel) : SessionRefreshDelegate._logger;
    this._refreshFn = refreshFn;
  }

  /**
   * Refresh access token
   * @private
   */
  _createClass(SessionRefreshDelegate, [{
    key: "refresh",
    value: function () {
      var _refresh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(since) {
        var _this = this;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(this._lastRefreshedAt && this._lastRefreshedAt > since)) {
                  _context.next = 2;
                  break;
                }
                return _context.abrupt("return");
              case 2:
                if (!this._refreshPromise) {
                  _context.next = 6;
                  break;
                }
                _context.next = 5;
                return this._refreshPromise;
              case 5:
                return _context.abrupt("return");
              case 6:
                _context.prev = 6;
                this._logger.info('<refresh token>');
                this._refreshPromise = new _Promise(function (resolve, reject) {
                  _this._refreshFn(_this._conn, function (err, accessToken, res) {
                    if (!err) {
                      _this._logger.debug('Connection refresh completed.');
                      _this._conn.accessToken = accessToken;
                      _this._conn.emit('refresh', accessToken, res);
                      resolve();
                    } else {
                      reject(err);
                    }
                  });
                });
                _context.next = 11;
                return this._refreshPromise;
              case 11:
                this._logger.info('<refresh complete>');
              case 12:
                _context.prev = 12;
                this._refreshPromise = undefined;
                this._lastRefreshedAt = _Date$now();
                return _context.finish(12);
              case 16:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[6,, 12, 16]]);
      }));
      function refresh(_x) {
        return _refresh.apply(this, arguments);
      }
      return refresh;
    }()
  }, {
    key: "isRefreshing",
    value: function isRefreshing() {
      return !!this._refreshPromise;
    }
  }, {
    key: "waitRefresh",
    value: function () {
      var _waitRefresh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this._refreshPromise);
              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function waitRefresh() {
        return _waitRefresh.apply(this, arguments);
      }
      return waitRefresh;
    }()
  }]);
  return SessionRefreshDelegate;
}();
_defineProperty(SessionRefreshDelegate, "_logger", getLogger('session-refresh-delegate'));
export default SessionRefreshDelegate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRMb2dnZXIiLCJTZXNzaW9uUmVmcmVzaERlbGVnYXRlIiwiY29ubiIsInJlZnJlc2hGbiIsIl9jbGFzc0NhbGxDaGVjayIsIl9kZWZpbmVQcm9wZXJ0eSIsInVuZGVmaW5lZCIsIl9jb25uIiwiX2xvZ2dlciIsIl9sb2dMZXZlbCIsImNyZWF0ZUluc3RhbmNlIiwiX3JlZnJlc2hGbiIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiX3JlZnJlc2giLCJfYXN5bmNUb0dlbmVyYXRvciIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJtYXJrIiwiX2NhbGxlZSIsInNpbmNlIiwiX3RoaXMiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwiX2xhc3RSZWZyZXNoZWRBdCIsImFicnVwdCIsIl9yZWZyZXNoUHJvbWlzZSIsImluZm8iLCJfUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJlcnIiLCJhY2Nlc3NUb2tlbiIsInJlcyIsImRlYnVnIiwiZW1pdCIsIl9EYXRlJG5vdyIsImZpbmlzaCIsInN0b3AiLCJyZWZyZXNoIiwiX3giLCJhcHBseSIsImFyZ3VtZW50cyIsImlzUmVmcmVzaGluZyIsIl93YWl0UmVmcmVzaCIsIl9jYWxsZWUyIiwiX2NhbGxlZTIkIiwiX2NvbnRleHQyIiwid2FpdFJlZnJlc2giXSwic291cmNlcyI6WyIuLi9zcmMvc2Vzc2lvbi1yZWZyZXNoLWRlbGVnYXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqL1xuaW1wb3J0IHsgZ2V0TG9nZ2VyLCBMb2dnZXIgfSBmcm9tICcuL3V0aWwvbG9nZ2VyJztcbmltcG9ydCB7IENhbGxiYWNrLCBTY2hlbWEgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBDb25uZWN0aW9uIGZyb20gJy4vY29ubmVjdGlvbic7XG5pbXBvcnQgeyBUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi9vYXV0aDInO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIFNlc3Npb25SZWZyZXNoRnVuYzxTIGV4dGVuZHMgU2NoZW1hPiA9IChcbiAgY29ubjogQ29ubmVjdGlvbjxTPixcbiAgY2FsbGJhY2s6IENhbGxiYWNrPHN0cmluZywgVG9rZW5SZXNwb25zZT4sXG4pID0+IHZvaWQ7XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGNsYXNzIFNlc3Npb25SZWZyZXNoRGVsZWdhdGU8UyBleHRlbmRzIFNjaGVtYT4ge1xuICBzdGF0aWMgX2xvZ2dlcjogTG9nZ2VyID0gZ2V0TG9nZ2VyKCdzZXNzaW9uLXJlZnJlc2gtZGVsZWdhdGUnKTtcblxuICBwcml2YXRlIF9yZWZyZXNoRm46IFNlc3Npb25SZWZyZXNoRnVuYzxTPjtcbiAgcHJpdmF0ZSBfY29ubjogQ29ubmVjdGlvbjxTPjtcbiAgcHJpdmF0ZSBfbG9nZ2VyOiBMb2dnZXI7XG4gIHByaXZhdGUgX2xhc3RSZWZyZXNoZWRBdDogbnVtYmVyIHwgdm9pZCA9IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBfcmVmcmVzaFByb21pc2U6IFByb21pc2U8dm9pZD4gfCB2b2lkID0gdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKGNvbm46IENvbm5lY3Rpb248Uz4sIHJlZnJlc2hGbjogU2Vzc2lvblJlZnJlc2hGdW5jPFM+KSB7XG4gICAgdGhpcy5fY29ubiA9IGNvbm47XG4gICAgdGhpcy5fbG9nZ2VyID0gY29ubi5fbG9nTGV2ZWxcbiAgICAgID8gU2Vzc2lvblJlZnJlc2hEZWxlZ2F0ZS5fbG9nZ2VyLmNyZWF0ZUluc3RhbmNlKGNvbm4uX2xvZ0xldmVsKVxuICAgICAgOiBTZXNzaW9uUmVmcmVzaERlbGVnYXRlLl9sb2dnZXI7XG4gICAgdGhpcy5fcmVmcmVzaEZuID0gcmVmcmVzaEZuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZnJlc2ggYWNjZXNzIHRva2VuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBhc3luYyByZWZyZXNoKHNpbmNlOiBudW1iZXIpIHtcbiAgICAvLyBDYWxsYmFjayBpbW1lZGlhdGVseSBXaGVuIHJlZnJlc2hlZCBhZnRlciBkZXNpZ25hdGVkIHRpbWVcbiAgICBpZiAodGhpcy5fbGFzdFJlZnJlc2hlZEF0ICYmIHRoaXMuX2xhc3RSZWZyZXNoZWRBdCA+IHNpbmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLl9yZWZyZXNoUHJvbWlzZSkge1xuICAgICAgYXdhaXQgdGhpcy5fcmVmcmVzaFByb21pc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICB0aGlzLl9sb2dnZXIuaW5mbygnPHJlZnJlc2ggdG9rZW4+Jyk7XG4gICAgICB0aGlzLl9yZWZyZXNoUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdGhpcy5fcmVmcmVzaEZuKHRoaXMuX2Nvbm4sIChlcnIsIGFjY2Vzc1Rva2VuLCByZXMpID0+IHtcbiAgICAgICAgICBpZiAoIWVycikge1xuICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmRlYnVnKCdDb25uZWN0aW9uIHJlZnJlc2ggY29tcGxldGVkLicpO1xuICAgICAgICAgICAgdGhpcy5fY29ubi5hY2Nlc3NUb2tlbiA9IGFjY2Vzc1Rva2VuO1xuICAgICAgICAgICAgdGhpcy5fY29ubi5lbWl0KCdyZWZyZXNoJywgYWNjZXNzVG9rZW4sIHJlcyk7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGF3YWl0IHRoaXMuX3JlZnJlc2hQcm9taXNlO1xuICAgICAgdGhpcy5fbG9nZ2VyLmluZm8oJzxyZWZyZXNoIGNvbXBsZXRlPicpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLl9yZWZyZXNoUHJvbWlzZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2xhc3RSZWZyZXNoZWRBdCA9IERhdGUubm93KCk7XG4gICAgfVxuICB9XG5cbiAgaXNSZWZyZXNoaW5nKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIXRoaXMuX3JlZnJlc2hQcm9taXNlO1xuICB9XG5cbiAgYXN5bmMgd2FpdFJlZnJlc2goKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlZnJlc2hQcm9taXNlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlc3Npb25SZWZyZXNoRGVsZWdhdGU7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EsU0FBU0EsU0FBUyxRQUFnQixlQUFlOztBQUtqRDtBQUNBO0FBQ0E7O0FBTUE7QUFDQTtBQUNBO0FBQ0EsV0FBYUMsc0JBQXNCO0VBU2pDLFNBQUFBLHVCQUFZQyxJQUFtQixFQUFFQyxTQUFnQyxFQUFFO0lBQUFDLGVBQUEsT0FBQUgsc0JBQUE7SUFBQUksZUFBQTtJQUFBQSxlQUFBO0lBQUFBLGVBQUE7SUFBQUEsZUFBQSwyQkFIekJDLFNBQVM7SUFBQUQsZUFBQSwwQkFDSEMsU0FBUztJQUd2RCxJQUFJLENBQUNDLEtBQUssR0FBR0wsSUFBSTtJQUNqQixJQUFJLENBQUNNLE9BQU8sR0FBR04sSUFBSSxDQUFDTyxTQUFTLEdBQ3pCUixzQkFBc0IsQ0FBQ08sT0FBTyxDQUFDRSxjQUFjLENBQUNSLElBQUksQ0FBQ08sU0FBUyxDQUFDLEdBQzdEUixzQkFBc0IsQ0FBQ08sT0FBTztJQUNsQyxJQUFJLENBQUNHLFVBQVUsR0FBR1IsU0FBUztFQUM3Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUhFUyxZQUFBLENBQUFYLHNCQUFBO0lBQUFZLEdBQUE7SUFBQUMsS0FBQTtNQUFBLElBQUFDLFFBQUEsR0FBQUMsaUJBQUEsZUFBQUMsbUJBQUEsQ0FBQUMsSUFBQSxVQUFBQyxRQUljQyxLQUFhO1FBQUEsSUFBQUMsS0FBQTtRQUFBLE9BQUFKLG1CQUFBLENBQUFLLElBQUEsVUFBQUMsU0FBQUMsUUFBQTtVQUFBO1lBQUEsUUFBQUEsUUFBQSxDQUFBQyxJQUFBLEdBQUFELFFBQUEsQ0FBQUUsSUFBQTtj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