"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrgAccessor = exports.BaseOrgAccessor = void 0;
const fs = __importStar(require("node:fs"));
const path = __importStar(require("node:path"));
const ts_types_1 = require("@salesforce/ts-types");
const kit_1 = require("@salesforce/kit");
const authInfoConfig_1 = require("../../config/authInfoConfig");
const global_1 = require("../../global");
const logger_1 = require("../../logger/logger");
const messages_1 = require("../../messages");
const lifecycleEvents_1 = require("../../lifecycleEvents");
const sfError_1 = require("../../sfError");
function chunk(array, chunkSize) {
    const final = [];
    for (let i = 0, len = array.length; i < len; i += chunkSize)
        final.push(array.slice(i, i + chunkSize));
    return final;
}
class BaseOrgAccessor extends kit_1.AsyncOptionalCreatable {
    configs = new Map();
    /** map of Org files by username  */
    contents = new Map();
    logger;
    /**
     * Read the auth file for the given username. Once the file has been read, it can be re-accessed with the `get` method.
     *
     * @param username username to read
     * @param decrypt if true, decrypt encrypted values
     * @param throwOnNotFound throw if file is not found for username
     */
    async read(username, decrypt = false, throwOnNotFound = true) {
        try {
            const config = await this.initAuthFile(username, throwOnNotFound);
            this.configs.set(username, config);
            return this.get(username, decrypt);
        }
        catch (err) {
            const error = sfError_1.SfError.wrap(err);
            if (['JsonParseError', 'GenericKeychainInvalidPermsError'].includes(error.name)) {
                throw err;
            }
            this.logger.debug(`Error when reading auth file for user: ${username} due to: ${error.name}:${error.message}`);
            return null;
        }
    }
    /**
     * Read all the auth files under the global state directory
     *
     * @param decrypt if true, decrypt encrypted values
     */
    async readAll(decrypt = false) {
        const fileChunks = chunk(await this.getAllFiles(), 50);
        for (const fileChunk of fileChunks) {
            const promises = fileChunk.map(async (f) => {
                const username = this.parseUsername(f);
                try {
                    const config = await this.initAuthFile(username);
                    this.configs.set(username, config);
                }
                catch (e) {
                    const error = sfError_1.SfError.wrap(e);
                    let warningMsg = `The auth file for ${username} is invalid.`;
                    if (error.message) {
                        warningMsg += ` Due to: ${error.message}`;
                    }
                    await lifecycleEvents_1.Lifecycle.getInstance().emitWarning(warningMsg);
                    this.logger.debug(`Error when reading auth file for user: ${username} due to: ${error.name}:${error.message}`);
                }
            });
            // eslint-disable-next-line no-await-in-loop
            await Promise.all(promises);
        }
        return this.getAll(decrypt);
    }
    /**
     * Return the contents of the username's auth file from cache.
     * The `read` or `readAll` methods must be called first in order to populate the cache.
     * If throwOnNotFound is not true, an empty object {} is returned if the org is not found.
     *
     * @param username username to get
     * @param decrypt if true, decrypt encrypted values
     * @param throwOnNotFound if true, throw if the auth file does not already exist in the cache
     */
    get(username, decrypt = false, throwOnNotFound = false) {
        const config = this.configs.get(username);
        if (throwOnNotFound && config?.keys().length === 0) {
            ;
            const messages = new messages_1.Messages('@salesforce/core', 'core', new Map([["authInfoCreationError", "Must pass a username and/or OAuth options when creating an AuthInfo instance."], ["authInfoOverwriteError", "Cannot create an AuthInfo instance that will overwrite existing auth data."], ["authInfoOverwriteError.actions", ["Create the AuthInfo instance using existing auth data by just passing the username. E.g., `AuthInfo.create({ username: 'my@user.org' });`."]], ["authCodeExchangeError", "Error authenticating with auth code due to: %s"], ["authCodeUsernameRetrievalError", "Could not retrieve the username after successful auth code exchange.\n\nDue to: %s"], ["jwtAuthError", "Error authenticating with JWT config due to: %s"], ["jwtAuthErrors", "Error authenticating with JWT.\nErrors encountered:\n%s"], ["refreshTokenAuthError", "Error authenticating with the refresh token due to: %s"], ["invalidSfdxAuthUrlError", "Invalid SFDX authorization URL. Must be in the format \"force://<clientId>:<clientSecret>:<refreshToken>@<instanceUrl>\". Note that the \"instanceUrl\" inside the SFDX authorization URL doesn\\'t include the protocol (\"https://\"). Run \"org display --target-org\" on an org to see an example of an SFDX authorization URL."], ["orgDataNotAvailableError", "An attempt to refresh the authentication token failed with a 'Data Not Found Error'. The org identified by username %s does not appear to exist. Likely cause is that the org was deleted by another user or has expired."], ["orgDataNotAvailableError.actions", ["Run `sfdx force:org:list --clean` to remove stale org authentications.", "Use `sfdx force:config:set` to update the defaultusername.", "Use `sfdx force:org:create` to create a new org.", "Use `sfdx auth` to authenticate an existing org."]], ["namedOrgNotFound", "No authorization information found for %s."], ["noAliasesFound", "Nothing to set."], ["invalidFormat", "Setting aliases must be in the format <key>=<value> but found: [%s]."], ["invalidJsonCasing", "All JSON input must have heads down camelcase keys. E.g., `{ sfdcLoginUrl: \"https://login.salesforce.com\" }`\nFound \"%s\" at %s"], ["missingClientId", "Client ID is required for JWT authentication."]]));
            throw messages.createError('namedOrgNotFound', [username]);
        }
        if (config) {
            this.contents.set(username, config.getContents(decrypt));
        }
        return this.contents.get(username);
    }
    /**
     * Return the contents of all the auth files from cache. The `read` or `readAll` methods must be called first in order to populate the cache.
     *
     * @param decrypt if true, decrypt encrypted values
     * @returns
     */
    getAll(decrypt = false) {
        return [...this.configs.keys()].map((username) => this.get(username, decrypt)).filter((org) => !(0, kit_1.isEmpty)(org));
    }
    /**
     * Returns true if the username has been cached.
     *
     * @param username
     */
    has(username) {
        return this.contents.has(username);
    }
    /**
     * Returns true if there is an auth file for the given username. The `read` or `readAll` methods must be called first in order to populate the cache.
     *
     * @param username
     */
    async exists(username) {
        const config = this.configs.get(username);
        return config ? config.exists() : false;
    }
    /**
     * Return the file stats for a given userame's auth file.
     *
     * @param username
     */
    async stat(username) {
        const config = this.configs.get(username);
        return config ? config.stat() : null;
    }
    /**
     * Returns true if there is an auth file for the given username
     *
     * @param username
     */
    async hasFile(username) {
        try {
            await fs.promises.access(this.parseFilename(username));
            return true;
        }
        catch {
            this.logger.debug(`No auth file found for ${username}`);
            return false;
        }
    }
    /**
     * Return all auth files under the global state directory.
     */
    async list() {
        return this.getAllFiles();
    }
    /**
     * Set the contents for a given username.
     *
     * @param username
     * @param org
     */
    set(username, org) {
        const config = this.configs.get(username);
        if (config) {
            (0, ts_types_1.entriesOf)(org).map(([key, value]) => config.set(key, value));
            if (!config.has('username')) {
                config.set('username', username);
            }
        }
        else {
            this.contents.set(username, { ...org, username: org.username ?? username });
        }
    }
    /**
     * Update the contents for a given username.
     *
     * @param username
     * @param org
     */
    update(username, org) {
        const existing = this.get(username) || {};
        const merged = Object.assign({}, existing, org);
        return this.set(username, merged);
    }
    /**
     * Delete the auth file for a given username.
     *
     * @param username
     */
    async remove(username) {
        await this.configs.get(username)?.unlink();
        this.configs.delete(username);
        this.contents.delete(username);
    }
    /**
     * Write the contents of the auth file for a given username.
     *
     * @param username
     */
    async write(username) {
        const config = this.configs.get(username);
        if (config) {
            return (await config.write());
        }
        else {
            const contents = this.contents.get(username) ?? {};
            await this.read(username, false, false);
            const readConfig = this.configs.get(username);
            if (readConfig) {
                readConfig.setContentsFromObject(contents);
                return (await readConfig.write());
            }
            else {
                this.logger.debug(`Failed to write auth file for ${username}. readConfig not found.`);
            }
        }
    }
    async init() {
        this.logger = await logger_1.Logger.child(this.constructor.name);
    }
    async getAllFiles() {
        const regex = this.getFileRegex();
        try {
            return (await fs.promises.readdir(global_1.Global.DIR)).filter((file) => regex.test(file));
        }
        catch {
            return [];
        }
    }
    parseUsername(filename) {
        return filename.replace(this.getFileExtension(), '');
    }
    parseFilename(username) {
        return path.join(global_1.Global.DIR, `${username}${this.getFileExtension()}`);
    }
}
exports.BaseOrgAccessor = BaseOrgAccessor;
class OrgAccessor extends BaseOrgAccessor {
    // eslint-disable-next-line class-methods-use-this
    async initAuthFile(username, throwOnNotFound = false) {
        return authInfoConfig_1.AuthInfoConfig.create({
            ...authInfoConfig_1.AuthInfoConfig.getOptions(username),
            throwOnNotFound,
        });
    }
    // eslint-disable-next-line class-methods-use-this
    getFileRegex() {
        // The regular expression that filters files stored in $HOME/.sfdx
        return /^[^.][^@]*@[^.]+(\.[^.\s]+)+\.json$/;
    }
    // eslint-disable-next-line class-methods-use-this
    getFileExtension() {
        return '.json';
    }
}
exports.OrgAccessor = OrgAccessor;
//# sourceMappingURL=orgAccessor.js.map