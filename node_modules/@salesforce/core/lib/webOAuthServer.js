"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/* eslint-disable class-methods-use-this */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebServer = exports.WebOAuthServer = void 0;
const http = __importStar(require("node:http"));
const node_querystring_1 = require("node:querystring");
const node_url_1 = require("node:url");
const node_net_1 = require("node:net");
const node_events_1 = require("node:events");
const jsforce_node_1 = require("@jsforce/jsforce-node");
const kit_1 = require("@salesforce/kit");
const ts_types_1 = require("@salesforce/ts-types");
const logger_1 = require("./logger/logger");
const authInfo_1 = require("./org/authInfo");
const sfError_1 = require("./sfError");
const messages_1 = require("./messages");
const sfProject_1 = require("./sfProject");
;
const messages = new messages_1.Messages('@salesforce/core', 'auth', new Map([["targetOrgNotSet", "A default user is not set."], ["targetOrgNotSet.actions", ["Run the \"sfdx auth\" commands with --setdefaultusername to connect to an org and set it as your default org.", "Run \"force:org:create\" with --setdefaultusername to create a scratch org and set it as your default org.", "Run \"sfdx config:set defaultusername=<username>\" to set your default username."]], ["portInUse", "Cannot start the OAuth redirect server on port %s."], ["portInUse.actions", ["Kill the process running on port %s or use a custom connected app and update OauthLocalPort in the sfdx-project.json file."]], ["invalidRequestMethod", "Invalid request method: %s"], ["invalidRequestUri", "Invalid request uri: %s"], ["error.HttpApi", "HTTP response contains html content. Check that the org exists and can be reached."], ["pollingTimeout", "The device authorization request timed out. After executing force:auth:device:login, you must approve access to the device within 10 minutes. This can happen if the URL wasn\u2019t copied into the browser, login was not attempted, or the 2FA process was not completed within 10 minutes. Request authorization again."], ["error.missingWebOauthServer.options", "You must specify both an `clientApp` and `username` if you intend the server to link a connected app to a user."], ["serverErrorHTMLResponse", "<html><head><style>body {background-color:#F4F6F9; font-family: Arial, sans-serif; font-size: 0.8125rem; line-height: 1.5rem; color: #16325c;} #center {margin: auto; width: 370px; padding: 100px 0px 20px;} #logo-container {margin-left: auto; margin-right: auto; text-align: center;} #logo {max-width: 180px; max-height: 113px; margin-bottom: 2rem; border: 0;} #header {font-size: 1.5rem; text-align: center; margin-bottom: 1rem;} #message {background-color: #FFFFFF; margin: 0px auto; padding: 1.25rem; border-radius: 0.25rem; border: 1px solid #D8DDE6;} #footer {height: 24px; width: 370px; text-align: center; font-size: .75rem; position: absolute; bottom: 10;}</style></head><body><div id=\"center\"><div id=\"logo-container\"><img id=\"logo\" aria-hidden=\"true\" name=\"logo\" alt=\"Salesforce\" src=\"data:image/svg+xml;base64,%s\"></div><div id=\"header\">%s</div><div id=\"message\">%s<br/><br/>This is most likely <b>not</b> an error with the Salesforce CLI. Please ensure all information is accurate and try again.</div><div id=\"footer\">&copy; %s Salesforce, Inc. All rights reserved.</div></div></body></html>"], ["missingAuthCode", "No authentication code found on login response."], ["serverSuccessHTMLResponse", "<html><head><style>body {background-color:#F4F6F9; font-family: Arial, sans-serif; font-size: 0.8125rem; line-height: 1.5rem; color: #16325c;} #center {margin: auto; width: 300px; padding: 100px 0px 20px;} #logo-container {margin-left: auto; margin-right: auto; text-align: center;} #logo {max-width: 180px; max-height: 113px; margin-bottom: 2rem; border: 0;} #header {font-size: 1.5rem; text-align: center; margin-bottom: 1rem;} #message {background-color: #FFFFFF; margin: 0px auto; padding: 1.25rem; border-radius: 0.25rem; border: 1px solid #D8DDE6;} #footer {height: 24px; width: 300px; text-align: center; font-size: .75rem; position: absolute; bottom: 10;}</style></head><body><div id=\"center\"><div id=\"logo-container\"><img id=\"logo\" aria-hidden=\"true\" name=\"logo\" alt=\"Salesforce\" src=\"data:image/svg+xml;base64,%s\"></div><div id=\"header\">Authentication Successful</div><div id=\"message\">You've successfully logged in. You can now close this browser tab or window.</div><div id=\"footer\">&copy; %s Salesforce, Inc. All rights reserved.</div></div></body></html>"], ["serverSfdcImage", ""]]));
// Server ignores requests for site icons
const iconPaths = ['/favicon.ico', '/apple-touch-icon-precomposed.png'];
/**
 * Handles the creation of a web server for web based login flows.
 *
 * Usage:
 * ```
 * const oauthConfig = {
 *   loginUrl: this.flags.instanceurl,
 *   clientId: this.flags.clientid,
 * };
 *
 * const oauthServer = await WebOAuthServer.create({ oauthConfig });
 * await oauthServer.start();
 * await open(oauthServer.getAuthorizationUrl(), { wait: false });
 * const authInfo = await oauthServer.authorizeAndSave();
 * ```
 */
class WebOAuthServer extends kit_1.AsyncCreatable {
    static DEFAULT_PORT = 1717;
    authUrl;
    logger;
    webServer;
    oauth2;
    oauthConfig;
    oauthError = new Error('Oauth Error');
    clientApp;
    username;
    constructor(options) {
        super(options);
        this.oauthConfig = options.oauthConfig;
        // runtime check due to TS's loose type validation when using union types.
        if (Object.hasOwn(options, 'username') && !Object.hasOwn(options, 'clientApp')) {
            throw messages.createError('error.missingWebOauthServer.options');
        }
        if (Object.hasOwn(options, 'clientApp') && !Object.hasOwn(options, 'username')) {
            throw messages.createError('error.missingWebOauthServer.options');
        }
        if ('clientApp' in options) {
            this.clientApp = options.clientApp;
            this.username = options.username;
        }
    }
    /**
     * Returns the configured oauthLocalPort or the WebOAuthServer.DEFAULT_PORT
     *
     * @returns {Promise<number>}
     */
    static async determineOauthPort() {
        try {
            const sfProject = await sfProject_1.SfProjectJson.create();
            return sfProject.get('oauthLocalPort') || WebOAuthServer.DEFAULT_PORT;
        }
        catch {
            return WebOAuthServer.DEFAULT_PORT;
        }
    }
    /**
     * Returns the authorization url that's used for the login flow
     *
     * @returns {string}
     */
    getAuthorizationUrl() {
        return this.authUrl;
    }
    /**
     * Executes the oauth request and creates a new AuthInfo when successful
     *
     * @returns {Promise<AuthInfo>}
     */
    async authorizeAndSave() {
        if (!this.webServer.server)
            await this.start();
        return new Promise((resolve, reject) => {
            const handler = () => {
                this.logger.debug(`OAuth web login service listening on port: ${this.webServer.port}`);
                this.executeOauthRequest()
                    .then(async (response) => {
                    try {
                        // Link client app to an existing auth file.
                        if (this.clientApp) {
                            const authInfo = await authInfo_1.AuthInfo.create({
                                oauth2Options: this.oauthConfig,
                                oauth2: this.oauth2,
                            });
                            const authFields = authInfo.getFields(true);
                            // get user authInfo and save client app creds in `clientApps`
                            const userAuthInfo = await authInfo_1.AuthInfo.create({
                                username: this.username,
                            });
                            const decryptedCopy = userAuthInfo.getFields(true);
                            if (decryptedCopy.clientApps && this.clientApp in decryptedCopy.clientApps) {
                                throw new sfError_1.SfError(`The username ${this.username} is already linked to a client app named "${this.clientApp}". Please authenticate again with a different client app name.`);
                            }
                            await userAuthInfo.save({
                                clientApps: {
                                    ...userAuthInfo.getFields(true).clientApps,
                                    [this.clientApp]: {
                                        clientId: (0, ts_types_1.ensureString)(authFields.clientId),
                                        clientSecret: authFields.clientSecret,
                                        accessToken: (0, ts_types_1.ensureString)(authFields.accessToken),
                                        refreshToken: (0, ts_types_1.ensureString)(authFields.refreshToken),
                                        oauthFlow: 'web',
                                    },
                                },
                            });
                            await this.webServer.handleSuccess(response);
                            response.end();
                            resolve(authInfo);
                        }
                        else {
                            // new auth, create new file.
                            const authInfo = await authInfo_1.AuthInfo.create({
                                oauth2Options: this.oauthConfig,
                                oauth2: this.oauth2,
                            });
                            await authInfo.save();
                            await this.webServer.handleSuccess(response);
                            response.end();
                            resolve(authInfo);
                        }
                    }
                    catch (err) {
                        this.oauthError = err;
                        await this.webServer.handleError(response);
                        reject(err);
                    }
                })
                    .catch((err) => {
                    this.logger.debug('error reported, closing server connection and re-throwing');
                    reject(err);
                })
                    .finally(() => {
                    this.logger.debug('closing server connection');
                    this.webServer.close();
                });
            };
            // if the server is already listening the listening event won't be fired anymore so execute handler() directly
            if (this.webServer.server.listening) {
                handler();
            }
            else {
                this.webServer.server.once('listening', handler);
            }
        });
    }
    /**
     * Starts the web server
     */
    async start() {
        await this.webServer.start();
    }
    async init() {
        this.logger = await logger_1.Logger.child(this.constructor.name);
        const port = await WebOAuthServer.determineOauthPort();
        if (!this.oauthConfig.clientId)
            this.oauthConfig.clientId = authInfo_1.DEFAULT_CONNECTED_APP_INFO.clientId;
        if (!this.oauthConfig.loginUrl)
            this.oauthConfig.loginUrl = authInfo_1.AuthInfo.getDefaultInstanceUrl();
        if (!this.oauthConfig.redirectUri)
            this.oauthConfig.redirectUri = `http://localhost:${port}/OauthRedirect`;
        // Unless explicitly turned off, use a code verifier as a best practice
        if (this.oauthConfig.useVerifier !== false)
            this.oauthConfig.useVerifier = true;
        this.webServer = await WebServer.create({ port });
        this.oauth2 = new jsforce_node_1.OAuth2(this.oauthConfig);
        this.authUrl = authInfo_1.AuthInfo.getAuthorizationUrl(this.oauthConfig, this.oauth2);
    }
    /**
     * Executes the oauth request
     *
     * @returns {Promise<AuthInfo>}
     */
    async executeOauthRequest() {
        return new Promise((resolve, reject) => {
            this.logger.debug('Starting web auth flow');
            // - async method when sync expected
            // eslint-disable-next-line @typescript-eslint/no-misused-promises
            this.webServer.server.on('request', async (request, response) => {
                if (request.url) {
                    const url = (0, node_url_1.parse)(request.url);
                    this.logger.debug(`processing request for uri: ${url.pathname}`);
                    if (request.method === 'GET') {
                        if (url.pathname?.startsWith('/OauthRedirect') && url.query) {
                            // eslint-disable-next-line no-param-reassign
                            request.query = (0, node_querystring_1.parse)(url.query);
                            if (request.query.error) {
                                const errorName = typeof request.query.error_description === 'string'
                                    ? request.query.error_description
                                    : request.query.error;
                                this.oauthError = new sfError_1.SfError(errorName, request.query.error);
                                await this.webServer.handleError(response);
                                return reject(this.oauthError);
                            }
                            this.logger.debug(`request.query.state: ${request.query.state}`);
                            try {
                                this.oauthConfig.authCode = (0, ts_types_1.asString)(this.parseAuthCodeFromRequest(response, request));
                                resolve(response);
                            }
                            catch (err) {
                                reject(err);
                            }
                        }
                        else if (url.pathname === '/OauthSuccess') {
                            this.webServer.reportSuccess(response);
                        }
                        else if (url.pathname === '/OauthError') {
                            this.webServer.reportError(this.oauthError, response);
                        }
                        else if (iconPaths.includes(url.pathname ?? '')) {
                            this.logger.debug(`Ignoring request for icon path: ${url.pathname}`);
                        }
                        else {
                            this.webServer.sendError(404, 'Resource not found', response);
                            const errName = 'invalidRequestUri';
                            const errMessage = messages.getMessage(errName, [url.pathname]);
                            reject(new sfError_1.SfError(errMessage, errName));
                        }
                    }
                    else if (request.method === 'OPTIONS' &&
                        request.headers['access-control-request-private-network'] === 'true' &&
                        request.headers['access-control-request-method']) {
                        this.webServer.handlePreflightRequest(response);
                    }
                    else {
                        this.webServer.sendError(405, 'Unsupported http methods', response);
                        const errName = 'invalidRequestMethod';
                        const errMessage = messages.getMessage(errName, [request.method]);
                        reject(new sfError_1.SfError(errMessage, errName));
                    }
                }
            });
        });
    }
    /**
     * Parses the auth code from the request url
     *
     * @param response the http response
     * @param request the http request
     * @returns {Nullable<string>}
     */
    parseAuthCodeFromRequest(response, request) {
        if (!this.validateState(request)) {
            const error = new sfError_1.SfError('urlStateMismatch');
            this.webServer.sendError(400, error.message, response);
            this.closeRequest(request);
            this.logger.warn('urlStateMismatchAttempt detected.');
            if (!(0, ts_types_1.get)(this.webServer.server, 'urlStateMismatchAttempt')) {
                this.logger.error(error.message);
                (0, kit_1.set)(this.webServer.server, 'urlStateMismatchAttempt', true);
            }
        }
        else {
            const authCode = request.query.code;
            if (authCode && authCode.length > 4) {
                // AuthCodes are generally long strings. For security purposes we will just log the last 4 of the auth code.
                this.logger.debug(`Successfully obtained auth code: ...${authCode.substring(authCode.length - 5)}`);
            }
            else {
                this.logger.debug('Expected an auth code but could not find one.');
                throw messages.createError('missingAuthCode');
            }
            this.logger.debug(`oauthConfig.loginUrl: ${this.oauthConfig.loginUrl}`);
            this.logger.debug(`oauthConfig.clientId: ${this.oauthConfig.clientId}`);
            this.logger.debug(`oauthConfig.redirectUri: ${this.oauthConfig.redirectUri}`);
            this.logger.debug(`oauthConfig.useVerifier: ${this.oauthConfig.useVerifier}`);
            return authCode;
        }
        return null;
    }
    /**
     * Closes the request
     *
     * @param request the http request
     */
    closeRequest(request) {
        request.connection.end();
        request.connection.destroy();
    }
    /**
     * Validates that the state param in the auth url matches the state
     * param in the http request
     *
     * @param request the http request
     */
    validateState(request) {
        const state = request.query.state;
        const query = (0, node_url_1.parse)(this.authUrl, true).query;
        return !!(state && state === query.state);
    }
}
exports.WebOAuthServer = WebOAuthServer;
/**
 * Handles the actions specific to the http server
 */
class WebServer extends kit_1.AsyncCreatable {
    static DEFAULT_CLIENT_SOCKET_TIMEOUT = 20_000;
    server;
    port = WebOAuthServer.DEFAULT_PORT;
    host = 'localhost';
    logger;
    sockets = [];
    redirectStatus = new node_events_1.EventEmitter();
    constructor(options) {
        super(options);
        if (options.port)
            this.port = options.port;
        if (options.host)
            this.host = options.host;
    }
    /**
     * Starts the http server after checking that the port is open
     */
    async start() {
        try {
            this.logger.debug('Starting web server');
            await this.checkOsPort();
            this.logger.debug(`Nothing listening on host: localhost port: ${this.port} - good!`);
            this.server = http.createServer();
            this.server.on('connection', (socket) => {
                this.logger.debug(`socket connection initialized from ${socket.remoteAddress}`);
                this.sockets.push(socket);
            });
            this.server.listen(this.port, this.host);
        }
        catch (err) {
            if (err.name === 'EADDRINUSE') {
                throw messages.createError('portInUse', [this.port], [this.port]);
            }
            else {
                throw err;
            }
        }
    }
    /**
     * Closes the http server and all open sockets
     */
    close() {
        this.sockets.forEach((socket) => {
            socket.end();
            socket.destroy();
        });
        this.server.getConnections((_, num) => {
            this.logger.debug(`number of connections open: ${num}`);
        });
        this.server.close();
    }
    /**
     * sends a response error.
     *
     * @param status the statusCode for the response.
     * @param message the message for the http body.
     * @param response the response to write the error to.
     */
    sendError(status, message, response) {
        // eslint-disable-next-line no-param-reassign
        response.statusMessage = message;
        // eslint-disable-next-line no-param-reassign
        response.statusCode = status;
        response.end();
    }
    /**
     * sends a response redirect.
     *
     * @param status the statusCode for the response.
     * @param url the url to redirect to.
     * @param response the response to write the redirect to.
     */
    doRedirect(status, url, response) {
        this.logger.debug(`Redirecting to ${url}`);
        response.setHeader('Content-Type', 'text/plain');
        const body = `${status} - Redirecting to ${url}`;
        response.setHeader('Content-Length', Buffer.byteLength(body));
        response.writeHead(status, { Location: url });
        response.end(body);
    }
    /**
     * sends a response to the browser reporting an error.
     *
     * @param error the oauth error
     * @param response the HTTP response.
     */
    reportError(error, response) {
        response.setHeader('Content-Type', 'text/html');
        const currentYear = new Date().getFullYear();
        const encodedImg = messages.getMessage('serverSfdcImage');
        const body = messages.getMessage('serverErrorHTMLResponse', [encodedImg, error.name, error.message, currentYear]);
        response.setHeader('Content-Length', Buffer.byteLength(body, 'utf8'));
        response.end(body);
        if (error.stack) {
            this.logger.debug(error.stack);
        }
        this.redirectStatus.emit('complete');
    }
    /**
     * sends a response to the browser reporting the success.
     *
     * @param response the HTTP response.
     */
    reportSuccess(response) {
        response.setHeader('Content-Type', 'text/html');
        const currentYear = new Date().getFullYear();
        const encodedImg = messages.getMessage('serverSfdcImage');
        const body = messages.getMessage('serverSuccessHTMLResponse', [encodedImg, currentYear]);
        response.setHeader('Content-Length', Buffer.byteLength(body, 'utf8'));
        response.end(body);
        this.redirectStatus.emit('complete');
    }
    /**
     * Preflight request:
     *
     * https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request
     * https://www.w3.org/TR/2020/SPSD-cors-20200602/#resource-preflight-requests
     */
    handlePreflightRequest(response) {
        // We don't validate the origin here because:
        // 1. The default login URL (login.salesforce.com) will not match after a redirect or if user choose a custom domain in login.
        // 2. There's no fixed list of auth URLs we could check against.
        // eslint-disable-next-line no-param-reassign
        response.statusCode = 204; // No Content response
        response.setHeader('Access-Control-Allow-Methods', 'GET');
        response.setHeader('Access-Control-Request-Headers', 'GET');
        response.end();
    }
    async handleSuccess(response) {
        return this.handleRedirect(response, '/OauthSuccess');
    }
    async handleError(response) {
        return this.handleRedirect(response, '/OauthError');
    }
    async init() {
        this.logger = await logger_1.Logger.child(this.constructor.name);
    }
    async handleRedirect(response, url) {
        return new Promise((resolve) => {
            this.redirectStatus.on('complete', () => {
                this.logger.debug('Redirect complete');
                resolve();
            });
            this.doRedirect(303, url, response);
        });
    }
    /**
     * Make sure we can't open a socket on the localhost/host port. It's important because we don't want to send
     * auth tokens to a random strange port listener. We want to make sure we can startup our server first.
     *
     * @private
     */
    async checkOsPort() {
        return new Promise((resolve, reject) => {
            const clientConfig = { port: this.port, host: this.host };
            const socket = new node_net_1.Socket();
            socket.setTimeout(this.getSocketTimeout(), () => {
                socket.destroy();
                const error = new sfError_1.SfError('timeout', 'SOCKET_TIMEOUT');
                reject(error);
            });
            // An existing connection, means that the port is occupied
            socket.connect(clientConfig, () => {
                socket.destroy();
                const error = new sfError_1.SfError('Address in use', 'EADDRINUSE');
                error.data = {
                    port: clientConfig.port,
                    address: clientConfig.host,
                };
                reject(error);
            });
            // An error means that no existing connection exists, which is what we want
            socket.on('error', () => {
                // eslint-disable-next-line no-console
                socket.destroy();
                resolve(this.port);
            });
        });
    }
    /**
     * check and get the socket timeout form what was set in process.env.SFDX_HTTP_SOCKET_TIMEOUT
     *
     * @returns {number} - represents the socket timeout in ms
     * @private
     */
    getSocketTimeout() {
        const env = new kit_1.Env();
        const socketTimeout = (0, kit_1.toNumber)(env.getNumber('SFDX_HTTP_SOCKET_TIMEOUT'));
        return Number.isInteger(socketTimeout) && socketTimeout > 0
            ? socketTimeout
            : WebServer.DEFAULT_CLIENT_SOCKET_TIMEOUT;
    }
}
exports.WebServer = WebServer;
//# sourceMappingURL=webOAuthServer.js.map