export type SettledResult<T, E = Error> = {
    fulfilled: T[];
    rejected: E[];
};
/** narrow promise.allSettled results to the successes, with provided type */
export declare const isFulfilled: <T>(s: PromiseSettledResult<T>) => s is PromiseFulfilledResult<T>;
/** narrow promise.allSettled results to the faiures.  Result is untyped */
export declare const isRejected: (s: PromiseSettledResult<unknown>) => s is PromiseRejectedResult;
/**
 * Wrapper for promise.allSettled that returns typed errors
 *
 * @param promises Array of promises to settle
 *
 * @example
 * ```
 * const promises = [Promise.resolve(1), Promise.resolve(2), Promise.resolve(3)];
 * const { fulfilled, rejected } = await settleAll<number, SfError>(promises);
 * ```
 */
export declare function settleAll<T, E = Error>(promises: Array<Promise<T>>): Promise<SettledResult<T, E>>;
