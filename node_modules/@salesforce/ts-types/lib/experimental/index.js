"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.is = is;
exports.as = as;
exports.hasNull = hasNull;
/**
 * A staging area for either introducing or removing type and functions, incrementally.
 */
const narrowing_1 = require("../narrowing");
/**
 * @ignore
 */
function is(obj, shape) {
    const isVerifiable = (v) => (0, narrowing_1.isString)(v) || (0, narrowing_1.isFunction)(v);
    return (!obj ||
        (0, narrowing_1.definiteEntriesOf)(shape)
            .map(([k, v]) => ({
            key: k,
            ...(isVerifiable(v) ? { type: v, optional: false } : v),
        }))
            .every(({ key, type, optional }) => (optional && !(key in obj)) ||
            ((0, narrowing_1.isString)(type) ? typeof (0, narrowing_1.get)(obj, key) === type : (0, narrowing_1.get)(obj, key) instanceof type)));
}
/**
 * @ignore
 */
// type Foo = { name: string, bar: Bar };
// class Bar { public baz = 'bar'; }
// const maybeFoo: object = { name: 'bar', bar: new Bar() };
// const foo = ensure(as<Foo>(maybeFoo, { name: 'string', bar: Bar }));
function as(obj, shape) {
    return is(obj, shape) ? obj : undefined;
}
/**
 * @ignore
 */
function hasNull(value, key) {
    return (0, narrowing_1.has)(value, key) && value[key] == null;
}
//# sourceMappingURL=index.js.map