"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuthorization = getAuthorization;
const request_1 = require("../utils/request");
const org_1 = require("../sdk/org");
const addon_config_1 = require("../utils/addon-config");
const HTTP_REQUEST = new request_1.HttpRequestUtil();
async function getAuthorization(developerName, attachmentNameOrColorOrUrl = process.env.HEROKU_APPLINK_ADDON_NAME ||
    "HEROKU_APPLINK") {
    if (!developerName) {
        throw Error(`Developer name not provided`);
    }
    let resolveConfigByUrl = false;
    try {
        new URL(attachmentNameOrColorOrUrl);
        resolveConfigByUrl = true;
    }
    catch {
        resolveConfigByUrl = false;
    }
    const config = resolveConfigByUrl
        ? (0, addon_config_1.resolveAddonConfigByUrl)(attachmentNameOrColorOrUrl)
        : (0, addon_config_1.resolveAddonConfigByAttachmentOrColor)(attachmentNameOrColorOrUrl);
    const authUrl = `${config.apiUrl}/authorizations/${developerName}`;
    const opts = {
        method: "GET",
        headers: {
            Authorization: `Bearer ${config.token}`,
            "X-App-UUID": config.appUuid,
            "Content-Type": "application/json",
        },
        retry: {
            limit: 1,
        },
    };
    let response;
    try {
        response = await HTTP_REQUEST.request(authUrl, opts);
    }
    catch (err) {
        if (err instanceof request_1.HttpResponseError) {
            let errorResponse;
            try {
                errorResponse = await err.response.json();
            }
            catch (jsonError) {
            }
            if (errorResponse?.title && errorResponse?.detail) {
                throw new Error(`${errorResponse.title} - ${errorResponse.detail}`);
            }
        }
        throw new Error(`Unable to get connection ${developerName}: ${err.message}`);
    }
    return new org_1.OrgImpl(response.org.user_auth.access_token, response.org.api_version, null, response.org.id, response.org.instance_url, response.org.user_auth.user_id, response.org.user_auth.username, response.org.type);
}
