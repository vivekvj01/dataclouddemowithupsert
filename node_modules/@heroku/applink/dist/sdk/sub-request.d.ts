import { RecordForCreate, RecordForUpdate, RecordModificationResult } from "../index.js";
export interface CompositeSubRequest<T> {
    readonly httpMethod: string;
    readonly body: any;
    buildUri(apiVersion: string): string;
    processResponse(statusCode: number, headers: Map<string, string>, body: any): Promise<T>;
}
export declare class DeleteRecordSubRequest implements CompositeSubRequest<RecordModificationResult> {
    readonly body: any;
    readonly httpMethod = "DELETE";
    private readonly type;
    private readonly id;
    constructor(type: string, id: string);
    buildUri(apiVersion: string): string;
    processResponse(statusCode: any, headers: any, body: any): Promise<RecordModificationResult>;
}
export declare class UpdateRecordSubRequest implements CompositeSubRequest<RecordModificationResult> {
    readonly body: any;
    readonly httpMethod = "PATCH";
    private readonly record;
    constructor(record: RecordForUpdate);
    buildUri(apiVersion: string): string;
    processResponse(statusCode: any, headers: any, body: any): Promise<RecordModificationResult>;
}
export declare class CreateRecordSubRequest implements CompositeSubRequest<RecordModificationResult> {
    readonly body: any;
    readonly httpMethod = "POST";
    private readonly record;
    constructor(record: RecordForCreate);
    buildUri(apiVersion: string): string;
    processResponse(statusCode: number, headers: Map<string, string>, body: any): Promise<RecordModificationResult>;
}
