"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _Object$defineProperties = require("@babel/runtime-corejs3/core-js-stable/object/define-properties");
var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors");
var _forEachInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/for-each");
var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");
var _filterInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/filter");
var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols");
var _Object$keys2 = require("@babel/runtime-corejs3/core-js-stable/object/keys");
require("core-js/modules/es.array.iterator");
require("core-js/modules/es.promise");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseRegistry = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/objectWithoutProperties"));
var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));
var _connection = _interopRequireDefault(require("../connection"));
function ownKeys(object, enumerableOnly) { var keys = _Object$keys2(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; _forEachInstanceProperty(_context = ownKeys(Object(source), true)).call(_context, function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 *
 */
class BaseRegistry {
  constructor() {
    (0, _defineProperty2.default)(this, "_registryConfig", {});
  }
  _saveConfig() {
    throw new Error('_saveConfig must be implemented in subclass');
  }
  _getClients() {
    return this._registryConfig.clients || (this._registryConfig.clients = {});
  }
  _getConnections() {
    return this._registryConfig.connections || (this._registryConfig.connections = {});
  }
  async getConnectionNames() {
    return (0, _keys.default)(this._getConnections());
  }
  async getConnection(name) {
    const config = await this.getConnectionConfig(name);
    return config ? new _connection.default(config) : null;
  }
  async getConnectionConfig(name) {
    if (!name) {
      name = this._registryConfig['default'];
    }
    const connections = this._getConnections();
    const connConfig = name ? connections[name] : undefined;
    if (!connConfig) {
      return null;
    }
    const {
        client
      } = connConfig,
      connConfig_ = (0, _objectWithoutProperties2.default)(connConfig, ["client"]);
    if (client) {
      return _objectSpread(_objectSpread({}, connConfig_), {}, {
        oauth2: _objectSpread({}, await this.getClientConfig(client))
      });
    }
    return connConfig_;
  }
  async saveConnectionConfig(name, connConfig) {
    const connections = this._getConnections();
    const {
        oauth2
      } = connConfig,
      connConfig_ = (0, _objectWithoutProperties2.default)(connConfig, ["oauth2"]);
    let persistConnConfig = connConfig_;
    if (oauth2) {
      const clientName = this._findClientName(oauth2);
      if (clientName) {
        persistConnConfig = _objectSpread(_objectSpread({}, persistConnConfig), {}, {
          client: clientName
        });
      }
      delete connConfig.oauth2;
    }
    connections[name] = persistConnConfig;
    this._saveConfig();
  }
  _findClientName({
    clientId,
    loginUrl
  }) {
    const clients = this._getClients();
    for (const name of (0, _keys.default)(clients)) {
      const client = clients[name];
      if (client.clientId === clientId && (client.loginUrl || 'https://login.salesforce.com') === loginUrl) {
        return name;
      }
    }
    return null;
  }
  async setDefaultConnection(name) {
    this._registryConfig['default'] = name;
    this._saveConfig();
  }
  async removeConnectionConfig(name) {
    const connections = this._getConnections();
    delete connections[name];
    this._saveConfig();
  }
  async getClientConfig(name) {
    const clients = this._getClients();
    const clientConfig = clients[name];
    return clientConfig && _objectSpread({}, clientConfig);
  }
  async getClientNames() {
    return (0, _keys.default)(this._getClients());
  }
  async registerClientConfig(name, clientConfig) {
    const clients = this._getClients();
    clients[name] = clientConfig;
    this._saveConfig();
  }
}
exports.BaseRegistry = BaseRegistry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,