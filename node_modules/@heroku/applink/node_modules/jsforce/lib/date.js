"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
require("core-js/modules/web.url.to-json");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SfDate = void 0;
var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/parse-int"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));
var _formatter = require("./util/formatter");
/**
 *
 */

/** @private **/
function createLiteralBuilder(literal) {
  return num => new SfDate(`${literal}:${String(num)}`); // eslint-disable-line no-use-before-define
}

/**
 * A date object to keep Salesforce date literal
 *
 * @class
 * @constructor
 * @see http://www.salesforce.com/us/developer/docs/soql_sosl/Content/sforce_api_calls_soql_select_dateformats.htm
 */
class SfDate {
  /**
   *
   */
  constructor(literal) {
    (0, _defineProperty2.default)(this, "_literal", void 0);
    (0, _defineProperty2.default)(this, "toString", this.toJSON);
    this._literal = literal;
  }

  /**
   * Returns literal when converted to string
   */
  toJSON() {
    return this._literal;
  }
  /**
   * Convert JavaScript date object to ISO8601 Date format (e.g. 2012-10-31)
   *
   * @param {String|Number|Date} date - Input date
   * @returns {SfDate} - Salesforce date literal with ISO8601 date format
   */
  static toDateLiteral(date) {
    let _date;
    if (typeof date === 'number') {
      _date = new Date(date);
    } else if (typeof date === 'string') {
      _date = SfDate.parseDate(date);
    } else {
      _date = date;
    }
    const yy = _date.getFullYear();
    const mm = _date.getMonth() + 1;
    const dd = _date.getDate();
    const dstr = [yy, (0, _formatter.zeroPad)(mm), (0, _formatter.zeroPad)(dd)].join('-');
    return new SfDate(dstr);
  }

  /**
   * Convert JavaScript date object to ISO8601 DateTime format
   * (e.g. 2012-10-31T12:34:56Z)
   */
  static toDateTimeLiteral(date) {
    let _date;
    if (typeof date === 'number') {
      _date = new Date(date);
    } else if (typeof date === 'string') {
      _date = SfDate.parseDate(date);
    } else {
      _date = date;
    }
    const yy = _date.getUTCFullYear();
    const mm = _date.getUTCMonth() + 1;
    const dd = _date.getUTCDate();
    const hh = _date.getUTCHours();
    const mi = _date.getUTCMinutes();
    const ss = _date.getUTCSeconds();
    const dtstr = `${[yy, (0, _formatter.zeroPad)(mm), (0, _formatter.zeroPad)(dd)].join('-')}T${[(0, _formatter.zeroPad)(hh), (0, _formatter.zeroPad)(mi), (0, _formatter.zeroPad)(ss)].join(':')}Z`;
    return new SfDate(dtstr);
  }

  /**
   * Convert JavaScript date object to ISO8601 time format
   * (e.g. 12:34:56.789Z)
   */
  static toTimeLiteral(time) {
    let _date = new Date(0);
    if (typeof time === 'string') {
      _date = SfDate.parseTime(time);
    } else if (typeof time === 'number') {
      _date = new Date(time);
    } else {
      _date = time;
    }
    const hh = _date.getUTCHours();
    const mi = _date.getUTCMinutes();
    const ss = _date.getUTCSeconds();
    const sss = _date.getUTCMilliseconds();
    const tstr = `${(0, _formatter.zeroPad)(hh)}:${(0, _formatter.zeroPad)(mi)}:${(0, _formatter.zeroPad)(ss)}.${(0, _formatter.zeroPad)(sss, 3)}Z`;
    return new SfDate(tstr);
  }

  /**
   * Parse IS08601 date(time) formatted string and return date instance
   */
  static parseDate(str) {
    let d = new Date();
    const regexp = /^([\d]{4})-?([\d]{2})-?([\d]{2})(T([\d]{2}):?([\d]{2}):?([\d]{2})(.([\d]{3}))?(Z|([+-])([\d]{2}):?([\d]{2})))?$/;
    const m = str.match(regexp);
    if (m) {
      d = new Date(0);
      if (!m[4]) {
        d.setFullYear((0, _parseInt2.default)(m[1], 10));
        d.setDate((0, _parseInt2.default)(m[3], 10));
        d.setMonth((0, _parseInt2.default)(m[2], 10) - 1);
        d.setHours(0);
        d.setMinutes(0);
        d.setSeconds(0);
        d.setMilliseconds(0);
      } else {
        d.setUTCFullYear((0, _parseInt2.default)(m[1], 10));
        d.setUTCDate((0, _parseInt2.default)(m[3], 10));
        d.setUTCMonth((0, _parseInt2.default)(m[2], 10) - 1);
        d.setUTCHours((0, _parseInt2.default)(m[5], 10));
        d.setUTCMinutes((0, _parseInt2.default)(m[6], 10));
        d.setUTCSeconds((0, _parseInt2.default)(m[7], 10));
        d.setUTCMilliseconds((0, _parseInt2.default)(m[9] || '0', 10));
        if (m[10] && m[10] !== 'Z') {
          const offset = (0, _parseInt2.default)(m[12], 10) * 60 + (0, _parseInt2.default)(m[13], 10);
          d.setTime((m[11] === '+' ? -1 : 1) * offset * 60 * 1000 + d.getTime());
        }
      }
      return d;
    }
    throw new Error(`Invalid date format is specified : ${str}`);
  }

  /**
   * Parse IS08601 time formatted string and convert to parse string
   */
  static parseTime(str) {
    const regexp = /^([\d]{2}):?([\d]{2}):?([\d]{2})(.([\d]{3}))?Z?$/;
    const m = str.match(regexp);
    if (m) {
      const d = new Date(0);
      let hh = (0, _parseInt2.default)(m[1], 10);
      const mi = (0, _parseInt2.default)(m[2], 10);
      const ss = (0, _parseInt2.default)(m[3], 10);
      const sss = (0, _parseInt2.default)(m[5] || '0', 10);
      d.setUTCHours(hh);
      d.setUTCMinutes(mi);
      d.setUTCSeconds(ss);
      d.setUTCMilliseconds(sss);
      return d;
    }
    throw new Error(`Invalid time format is specified : ${str}`);
  }
}
exports.SfDate = SfDate;
(0, _defineProperty2.default)(SfDate, "YESTERDAY", new SfDate('YESTERDAY'));
(0, _defineProperty2.default)(SfDate, "TODAY", new SfDate('TODAY'));
(0, _defineProperty2.default)(SfDate, "TOMORROW", new SfDate('TOMORROW'));
(0, _defineProperty2.default)(SfDate, "LAST_WEEK", new SfDate('LAST_WEEK'));
(0, _defineProperty2.default)(SfDate, "THIS_WEEK", new SfDate('THIS_WEEK'));
(0, _defineProperty2.default)(SfDate, "NEXT_WEEK", new SfDate('NEXT_WEEK'));
(0, _defineProperty2.default)(SfDate, "LAST_MONTH", new SfDate('LAST_MONTH'));
(0, _defineProperty2.default)(SfDate, "THIS_MONTH", new SfDate('THIS_MONTH'));
(0, _defineProperty2.default)(SfDate, "NEXT_MONTH", new SfDate('NEXT_MONTH'));
(0, _defineProperty2.default)(SfDate, "LAST_90_DAYS", new SfDate('LAST_90_DAYS'));
(0, _defineProperty2.default)(SfDate, "NEXT_90_DAYS", new SfDate('NEXT_90_DAYS'));
(0, _defineProperty2.default)(SfDate, "LAST_N_DAYS", createLiteralBuilder('LAST_N_DAYS'));
(0, _defineProperty2.default)(SfDate, "NEXT_N_DAYS", createLiteralBuilder('NEXT_N_DAYS'));
(0, _defineProperty2.default)(SfDate, "NEXT_N_WEEKS", createLiteralBuilder('NEXT_N_WEEKS'));
(0, _defineProperty2.default)(SfDate, "LAST_N_WEEKS", createLiteralBuilder('LAST_N_WEEKS'));
(0, _defineProperty2.default)(SfDate, "NEXT_N_MONTHS", createLiteralBuilder('NEXT_N_MONTHS'));
(0, _defineProperty2.default)(SfDate, "LAST_N_MONTHS", createLiteralBuilder('LAST_N_MONTHS'));
(0, _defineProperty2.default)(SfDate, "THIS_QUARTER", new SfDate('THIS_QUARTER'));
(0, _defineProperty2.default)(SfDate, "LAST_QUARTER", new SfDate('LAST_QUARTER'));
(0, _defineProperty2.default)(SfDate, "NEXT_QUARTER", new SfDate('NEXT_QUARTER'));
(0, _defineProperty2.default)(SfDate, "NEXT_N_QUARTERS", createLiteralBuilder('NEXT_N_QUARTERS'));
(0, _defineProperty2.default)(SfDate, "LAST_N_QUARTERS", createLiteralBuilder('LAST_N_QUARTERS'));
(0, _defineProperty2.default)(SfDate, "THIS_YEAR", new SfDate('THIS_YEAR'));
(0, _defineProperty2.default)(SfDate, "LAST_YEAR", new SfDate('LAST_YEAR'));
(0, _defineProperty2.default)(SfDate, "NEXT_YEAR", new SfDate('NEXT_YEAR'));
(0, _defineProperty2.default)(SfDate, "NEXT_N_YEARS", createLiteralBuilder('NEXT_N_YEARS'));
(0, _defineProperty2.default)(SfDate, "LAST_N_YEARS", createLiteralBuilder('LAST_N_YEARS'));
(0, _defineProperty2.default)(SfDate, "THIS_FISCAL_QUARTER", new SfDate('THIS_FISCAL_QUARTER'));
(0, _defineProperty2.default)(SfDate, "LAST_FISCAL_QUARTER", new SfDate('LAST_FISCAL_QUARTER'));
(0, _defineProperty2.default)(SfDate, "NEXT_FISCAL_QUARTER", new SfDate('NEXT_FISCAL_QUARTER'));
(0, _defineProperty2.default)(SfDate, "THIS_FISCAL_YEAR", new SfDate('THIS_FISCAL_YEAR'));
(0, _defineProperty2.default)(SfDate, "NEXT_N_FISCAL_QUARTERS", createLiteralBuilder('NEXT_N_FISCAL_QUARTERS'));
(0, _defineProperty2.default)(SfDate, "LAST_N_FISCAL_QUARTERS", createLiteralBuilder('LAST_N_FISCAL_QUARTERS'));
(0, _defineProperty2.default)(SfDate, "LAST_FISCAL_YEAR", new SfDate('LAST_FISCAL_YEAR'));
(0, _defineProperty2.default)(SfDate, "NEXT_FISCAL_YEAR", new SfDate('NEXT_FISCAL_YEAR'));
(0, _defineProperty2.default)(SfDate, "NEXT_N_FISCAL_YEARS", createLiteralBuilder('NEXT_N_FISCAL_YEARS'));
(0, _defineProperty2.default)(SfDate, "LAST_N_FISCAL_YEARS", createLiteralBuilder('LAST_N_FISCAL_YEARS'));
var _default = SfDate;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,