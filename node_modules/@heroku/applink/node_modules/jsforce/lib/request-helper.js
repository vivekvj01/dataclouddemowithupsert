"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _Object$defineProperties = require("@babel/runtime-corejs3/core-js-stable/object/define-properties");
var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors");
var _forEachInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/for-each");
var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");
var _filterInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/filter");
var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols");
var _Object$keys = require("@babel/runtime-corejs3/core-js-stable/object/keys");
require("core-js/modules/es.promise");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.createHttpRequestHandlerStreams = createHttpRequestHandlerStreams;
exports.isRedirect = isRedirect;
exports.performRedirectRequest = performRedirectRequest;
exports.executeWithTimeout = executeWithTimeout;
var _set = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));
var _setTimeout2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set-timeout"));
var _stream = require("stream");
var _stream2 = require("./util/stream");
var _formData = _interopRequireDefault(require("form-data"));
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; _forEachInstanceProperty(_context = ownKeys(Object(source), true)).call(_context, function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 *
 */
function createHttpRequestHandlerStreams(req, options = {}) {
  const {
    body: reqBody
  } = req;
  const input = new _stream.PassThrough();
  const output = new _stream.PassThrough();
  const duplex = (0, _stream2.concatStreamsAsDuplex)(input, output);
  if (typeof reqBody !== 'undefined') {
    (0, _setTimeout2.default)(() => {
      if (reqBody instanceof _formData.default) {
        duplex.end(reqBody.getBuffer());
      } else {
        duplex.end(reqBody, 'utf8');
      }
    }, 0);
  }
  duplex.on('response', async res => {
    if (duplex.listenerCount('complete') > 0) {
      const resBody = await (0, _stream2.readAll)(duplex, options.encoding);
      duplex.emit('complete', _objectSpread(_objectSpread({}, res), {}, {
        body: resBody
      }));
    }
  });
  return {
    input,
    output,
    stream: duplex
  };
}
const redirectStatuses = new _set.default([301, 302, 303, 307, 308]);

/**
 *
 */
function isRedirect(status) {
  return redirectStatuses.has(status);
}

/**
 *
 */
const MAX_REDIRECT_COUNT = 10;

/**
 *
 */
function performRedirectRequest(req, res, followRedirect, counter, redirectCallback) {
  if (counter >= MAX_REDIRECT_COUNT) {
    throw new Error('Reached to maximum redirect count');
  }
  const redirectUrl = res.headers['location'];
  if (!redirectUrl) {
    throw new Error('No redirect URI found');
  }
  const getRedirectRequest = typeof followRedirect === 'function' ? followRedirect : () => ({
    method: 'GET',
    url: redirectUrl,
    headers: req.headers
  });
  const nextReqParams = getRedirectRequest(redirectUrl);
  if (!nextReqParams) {
    throw new Error('Cannot handle redirect for ' + redirectUrl);
  }
  redirectCallback(nextReqParams);
}

/**
 *
 */
async function executeWithTimeout(execFn, msec, cancelCallback) {
  let timeout = false;
  let pid = msec != null ? (0, _setTimeout2.default)(() => {
    timeout = true;
    cancelCallback === null || cancelCallback === void 0 ? void 0 : cancelCallback();
  }, msec) : undefined;
  let res;
  try {
    res = await execFn();
  } finally {
    if (pid) {
      clearTimeout(pid);
    }
  }
  if (timeout) {
    throw new Error('Request Timeout');
  }
  return res;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,