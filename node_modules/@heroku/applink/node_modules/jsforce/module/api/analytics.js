import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; _forEachInstanceProperty(_context = ownKeys(Object(source), true)).call(_context, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * @file Manages Salesforce Analytics API
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { registerModule } from '../jsforce';

/*----------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------*/
/**
 * Report object class in Analytics API
 */
export class ReportInstance {
  /**
   *
   */
  constructor(report, id) {
    _defineProperty(this, "_report", void 0);
    _defineProperty(this, "_conn", void 0);
    _defineProperty(this, "id", void 0);
    this._report = report;
    this._conn = report._conn;
    this.id = id;
  }

  /**
   * Retrieve report result asynchronously executed
   */
  retrieve() {
    const url = [this._conn._baseUrl(), 'analytics', 'reports', this._report.id, 'instances', this.id].join('/');
    return this._conn.request(url);
  }
}

/*----------------------------------------------------------------------------------*/
/**
 * Report object class in Analytics API
 */
export class Report {
  /**
   *
   */
  constructor(conn, id) {
    _defineProperty(this, "_conn", void 0);
    _defineProperty(this, "id", void 0);
    _defineProperty(this, "delete", this.destroy);
    _defineProperty(this, "del", this.destroy);
    _defineProperty(this, "run", this.execute);
    _defineProperty(this, "exec", this.execute);
    this._conn = conn;
    this.id = id;
  }

  /**
   * Describe report metadata
   */
  describe() {
    var url = [this._conn._baseUrl(), 'analytics', 'reports', this.id, 'describe'].join('/');
    return this._conn.request(url);
  }

  /**
   * Destroy a report
   */
  destroy() {
    const url = [this._conn._baseUrl(), 'analytics', 'reports', this.id].join('/');
    return this._conn.request({
      method: 'DELETE',
      url
    });
  }

  /**
   * Synonym of Analytics~Report#destroy()
   */

  /**
   * Synonym of Analytics~Report#destroy()
   */

  /**
   * Clones a given report
   */
  clone(name) {
    const url = [this._conn._baseUrl(), 'analytics', 'reports'].join('/') + '?cloneId=' + this.id;
    const config = {
      reportMetadata: {
        name
      }
    };
    return this._conn.request({
      method: 'POST',
      url,
      headers: {
        'Content-Type': 'application/json'
      },
      body: _JSON$stringify(config)
    });
  }

  /**
   * Explain plan for executing report
   */
  explain() {
    const url = '/query/?explain=' + this.id;
    return this._conn.request(url);
  }

  /**
   * Run report synchronously
   */
  execute(options = {}) {
    const url = [this._conn._baseUrl(), 'analytics', 'reports', this.id].join('/') + '?includeDetails=' + (options.details ? 'true' : 'false');
    return this._conn.request(_objectSpread({
      url
    }, options.metadata ? {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: _JSON$stringify(options.metadata)
    } : {
      method: 'GET'
    }));
  }

  /**
   * Synonym of Analytics~Report#execute()
   */

  /**
   * Synonym of Analytics~Report#execute()
   */

  /**
   * Run report asynchronously
   */
  executeAsync(options = {}) {
    const url = [this._conn._baseUrl(), 'analytics', 'reports', this.id, 'instances'].join('/') + (options.details ? '?includeDetails=true' : '');
    return this._conn.request(_objectSpread({
      method: 'POST',
      url
    }, options.metadata ? {
      headers: {
        'Content-Type': 'application/json'
      },
      body: _JSON$stringify(options.metadata)
    } : {
      body: ''
    }));
  }

  /**
   * Get report instance for specified instance ID
   */
  instance(id) {
    return new ReportInstance(this, id);
  }

  /**
   * List report instances which had been executed asynchronously
   */
  instances() {
    const url = [this._conn._baseUrl(), 'analytics', 'reports', this.id, 'instances'].join('/');
    return this._conn.request(url);
  }
}

/*----------------------------------------------------------------------------------*/
/**
 * Dashboard object class in the Analytics API
 */
export class Dashboard {
  /**
   *
   */
  constructor(conn, id) {
    _defineProperty(this, "_conn", void 0);
    _defineProperty(this, "id", void 0);
    _defineProperty(this, "delete", this.destroy);
    _defineProperty(this, "del", this.destroy);
    this._conn = conn;
    this.id = id;
  }

  /**
   * Describe dashboard metadata
   *
   * @method Analytics~Dashboard#describe
   * @param {Callback.<Analytics-DashboardMetadata>} [callback] - Callback function
   * @returns {Promise.<Analytics-DashboardMetadata>}
   */
  describe() {
    const url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id, 'describe'].join('/');
    return this._conn.request(url);
  }

  /**
   * Get details about dashboard components
   */
  components(componentIds) {
    const url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id].join('/');
    const config = {
      componentIds: _Array$isArray(componentIds) ? componentIds : typeof componentIds === 'string' ? [componentIds] : undefined
    };
    return this._conn.request({
      method: 'POST',
      url,
      headers: {
        'Content-Type': 'application/json'
      },
      body: _JSON$stringify(config)
    });
  }

  /**
   * Get dashboard status
   */
  status() {
    const url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id, 'status'].join('/');
    return this._conn.request(url);
  }

  /**
   * Refresh a dashboard
   */
  refresh() {
    const url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id].join('/');
    return this._conn.request({
      method: 'PUT',
      url,
      body: ''
    });
  }

  /**
   * Clone a dashboard
   */
  clone(config, folderId) {
    const url = [this._conn._baseUrl(), 'analytics', 'dashboards'].join('/') + '?cloneId=' + this.id;
    if (typeof config === 'string') {
      config = {
        name: config,
        folderId
      };
    }
    return this._conn.request({
      method: 'POST',
      url,
      headers: {
        'Content-Type': 'application/json'
      },
      body: _JSON$stringify(config)
    });
  }

  /**
   * Destroy a dashboard
   */
  destroy() {
    const url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id].join('/');
    return this._conn.request({
      method: 'DELETE',
      url
    });
  }

  /**
   * Synonym of Analytics~Dashboard#destroy()
   */

  /**
   * Synonym of Analytics~Dashboard#destroy()
   */
}

/*----------------------------------------------------------------------------------*/
/**
 * API class for Analytics API
 */
export class Analytics {
  /**
   *
   */
  constructor(conn) {
    _defineProperty(this, "_conn", void 0);
    this._conn = conn;
  }

  /**
   * Get report object of Analytics API
   */
  report(id) {
    return new Report(this._conn, id);
  }

  /**
   * Get recent report list
   */
  reports() {
    const url = [this._conn._baseUrl(), 'analytics', 'reports'].join('/');
    return this._conn.request(url);
  }

  /**
   * Get dashboard object of Analytics API
   */
  dashboard(id) {
    return new Dashboard(this._conn, id);
  }

  /**
   * Get recent dashboard list
   */
  dashboards() {
    var url = [this._conn._baseUrl(), 'analytics', 'dashboards'].join('/');
    return this._conn.request(url);
  }
}

/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
registerModule('analytics', conn => new Analytics(conn));
export default Analytics;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWdpc3Rlck1vZHVsZSIsIlJlcG9ydEluc3RhbmNlIiwiY29uc3RydWN0b3IiLCJyZXBvcnQiLCJpZCIsIl9kZWZpbmVQcm9wZXJ0eSIsIl9yZXBvcnQiLCJfY29ubiIsInJldHJpZXZlIiwidXJsIiwiX2Jhc2VVcmwiLCJqb2luIiwicmVxdWVzdCIsIlJlcG9ydCIsImNvbm4iLCJkZXN0cm95IiwiZXhlY3V0ZSIsImRlc2NyaWJlIiwibWV0aG9kIiwiY2xvbmUiLCJuYW1lIiwiY29uZmlnIiwicmVwb3J0TWV0YWRhdGEiLCJoZWFkZXJzIiwiYm9keSIsIl9KU09OJHN0cmluZ2lmeSIsImV4cGxhaW4iLCJvcHRpb25zIiwiZGV0YWlscyIsIl9vYmplY3RTcHJlYWQiLCJtZXRhZGF0YSIsImV4ZWN1dGVBc3luYyIsImluc3RhbmNlIiwiaW5zdGFuY2VzIiwiRGFzaGJvYXJkIiwiY29tcG9uZW50cyIsImNvbXBvbmVudElkcyIsIl9BcnJheSRpc0FycmF5IiwidW5kZWZpbmVkIiwic3RhdHVzIiwicmVmcmVzaCIsImZvbGRlcklkIiwiQW5hbHl0aWNzIiwicmVwb3J0cyIsImRhc2hib2FyZCIsImRhc2hib2FyZHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBpL2FuYWx5dGljcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIE1hbmFnZXMgU2FsZXNmb3JjZSBBbmFseXRpY3MgQVBJXG4gKiBAYXV0aG9yIFNoaW5pY2hpIFRvbWl0YSA8c2hpbmljaGkudG9taXRhQGdtYWlsLmNvbT5cbiAqL1xuaW1wb3J0IHsgcmVnaXN0ZXJNb2R1bGUgfSBmcm9tICcuLi9qc2ZvcmNlJztcbmltcG9ydCBDb25uZWN0aW9uIGZyb20gJy4uL2Nvbm5lY3Rpb24nO1xuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgUmVwb3J0TWV0YWRhdGEsXG4gIFJlcG9ydEV4ZWN1dGVSZXN1bHQsXG4gIFJlcG9ydFJldHJpZXZlUmVzdWx0LFxuICBSZXBvcnREZXNjcmliZVJlc3VsdCxcbiAgUmVwb3J0SW5mbyxcbiAgUmVwb3J0SW5zdGFuY2VJbmZvLFxuICBEYXNoYm9hcmRNZXRhZGF0YSxcbiAgRGFzaGJvYXJkUmVzdWx0LFxuICBEYXNoYm9hcmRTdGF0dXNSZXN1bHQsXG4gIERhc2hib2FyZFJlZnJlc2hSZXN1bHQsXG4gIERhc2hib2FyZEluZm8sXG59IGZyb20gJy4vYW5hbHl0aWNzL3R5cGVzJztcbmltcG9ydCB7IFF1ZXJ5RXhwbGFpblJlc3VsdCB9IGZyb20gJy4uL3F1ZXJ5JztcblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCB0eXBlIHtcbiAgUmVwb3J0TWV0YWRhdGEsXG4gIFJlcG9ydEV4ZWN1dGVSZXN1bHQsXG4gIFJlcG9ydFJldHJpZXZlUmVzdWx0LFxuICBSZXBvcnREZXNjcmliZVJlc3VsdCxcbiAgUmVwb3J0SW5mbyxcbiAgUmVwb3J0SW5zdGFuY2VJbmZvLFxuICBEYXNoYm9hcmRNZXRhZGF0YSxcbiAgRGFzaGJvYXJkUmVzdWx0LFxuICBEYXNoYm9hcmRTdGF0dXNSZXN1bHQsXG4gIERhc2hib2FyZFJlZnJlc2hSZXN1bHQsXG4gIERhc2hib2FyZEluZm8sXG59O1xuXG5leHBvcnQgdHlwZSBSZXBvcnRFeGVjdXRlT3B0aW9ucyA9IHtcbiAgZGV0YWlscz86IGJvb2xlYW47XG4gIG1ldGFkYXRhPzoge1xuICAgIHJlcG9ydE1ldGFkYXRhOiBQYXJ0aWFsPFJlcG9ydE1ldGFkYXRhPjtcbiAgfTtcbn07XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIFJlcG9ydCBvYmplY3QgY2xhc3MgaW4gQW5hbHl0aWNzIEFQSVxuICovXG5leHBvcnQgY2xhc3MgUmVwb3J0SW5zdGFuY2U8UyBleHRlbmRzIFNjaGVtYT4ge1xuICBfcmVwb3J0OiBSZXBvcnQ8Uz47XG4gIF9jb25uOiBDb25uZWN0aW9uPFM+O1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IocmVwb3J0OiBSZXBvcnQ8Uz4sIGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9yZXBvcnQgPSByZXBvcnQ7XG4gICAgdGhpcy5fY29ubiA9IHJlcG9ydC5fY29ubjtcbiAgICB0aGlzLmlkID0gaWQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgcmVwb3J0IHJlc3VsdCBhc3luY2hyb25vdXNseSBleGVjdXRlZFxuICAgKi9cbiAgcmV0cmlldmUoKTogUHJvbWlzZTxSZXBvcnRSZXRyaWV2ZVJlc3VsdD4ge1xuICAgIGNvbnN0IHVybCA9IFtcbiAgICAgIHRoaXMuX2Nvbm4uX2Jhc2VVcmwoKSxcbiAgICAgICdhbmFseXRpY3MnLFxuICAgICAgJ3JlcG9ydHMnLFxuICAgICAgdGhpcy5fcmVwb3J0LmlkLFxuICAgICAgJ2luc3RhbmNlcycsXG4gICAgICB0aGlzLmlkLFxuICAgIF0uam9pbignLycpO1xuICAgIHJldHVybiB0aGlzLl9jb25uLnJlcXVlc3Q8UmVwb3J0UmV0cmlldmVSZXN1bHQ+KHVybCk7XG4gIH1cbn1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogUmVwb3J0IG9iamVjdCBjbGFzcyBpbiBBbmFseXRpY3MgQVBJXG4gKi9cbmV4cG9ydCBjbGFzcyBSZXBvcnQ8UyBleHRlbmRzIFNjaGVtYT4ge1xuICBfY29ubjogQ29ubmVjdGlvbjxTPjtcbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICpcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbm46IENvbm5lY3Rpb248Uz4sIGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9jb25uID0gY29ubjtcbiAgICB0aGlzLmlkID0gaWQ7XG4gIH1cblxuICAvKipcbiAgICogRGVzY3JpYmUgcmVwb3J0IG1ldGFkYXRhXG4gICAqL1xuICBkZXNjcmliZSgpOiBQcm9taXNlPFJlcG9ydERlc2NyaWJlUmVzdWx0PiB7XG4gICAgdmFyIHVybCA9IFtcbiAgICAgIHRoaXMuX2Nvbm4uX2Jhc2VVcmwoKSxcbiAgICAgICdhbmFseXRpY3MnLFxuICAgICAgJ3JlcG9ydHMnLFxuICAgICAgdGhpcy5pZCxcbiAgICAgICdkZXNjcmliZScsXG4gICAgXS5qb2luKCcvJyk7XG4gICAgcmV0dXJuIHRoaXMuX2Nvbm4ucmVxdWVzdDxSZXBvcnREZXNjcmliZVJlc3VsdD4odXJsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95IGEgcmVwb3J0XG4gICAqL1xuICBkZXN0cm95KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHVybCA9IFt0aGlzLl9jb25uLl9iYXNlVXJsKCksICdhbmFseXRpY3MnLCAncmVwb3J0cycsIHRoaXMuaWRdLmpvaW4oXG4gICAgICAnLycsXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcy5fY29ubi5yZXF1ZXN0PHZvaWQ+KHsgbWV0aG9kOiAnREVMRVRFJywgdXJsIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN5bm9ueW0gb2YgQW5hbHl0aWNzflJlcG9ydCNkZXN0cm95KClcbiAgICovXG4gIGRlbGV0ZSA9IHRoaXMuZGVzdHJveTtcblxuICAvKipcbiAgICogU3lub255bSBvZiBBbmFseXRpY3N+UmVwb3J0I2Rlc3Ryb3koKVxuICAgKi9cbiAgZGVsID0gdGhpcy5kZXN0cm95O1xuXG4gIC8qKlxuICAgKiBDbG9uZXMgYSBnaXZlbiByZXBvcnRcbiAgICovXG4gIGNsb25lKG5hbWU6IHN0cmluZyk6IFByb21pc2U8UmVwb3J0RGVzY3JpYmVSZXN1bHQ+IHtcbiAgICBjb25zdCB1cmwgPVxuICAgICAgW3RoaXMuX2Nvbm4uX2Jhc2VVcmwoKSwgJ2FuYWx5dGljcycsICdyZXBvcnRzJ10uam9pbignLycpICtcbiAgICAgICc/Y2xvbmVJZD0nICtcbiAgICAgIHRoaXMuaWQ7XG4gICAgY29uc3QgY29uZmlnID0geyByZXBvcnRNZXRhZGF0YTogeyBuYW1lIH0gfTtcbiAgICByZXR1cm4gdGhpcy5fY29ubi5yZXF1ZXN0PFJlcG9ydERlc2NyaWJlUmVzdWx0Pih7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIHVybCxcbiAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoY29uZmlnKSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBsYWluIHBsYW4gZm9yIGV4ZWN1dGluZyByZXBvcnRcbiAgICovXG4gIGV4cGxhaW4oKTogUHJvbWlzZTxRdWVyeUV4cGxhaW5SZXN1bHQ+IHtcbiAgICBjb25zdCB1cmwgPSAnL3F1ZXJ5Lz9leHBsYWluPScgKyB0aGlzLmlkO1xuICAgIHJldHVybiB0aGlzLl9jb25uLnJlcXVlc3Q8UXVlcnlFeHBsYWluUmVzdWx0Pih1cmwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1biByZXBvcnQgc3luY2hyb25vdXNseVxuICAgKi9cbiAgZXhlY3V0ZShvcHRpb25zOiBSZXBvcnRFeGVjdXRlT3B0aW9ucyA9IHt9KTogUHJvbWlzZTxSZXBvcnRFeGVjdXRlUmVzdWx0PiB7XG4gICAgY29uc3QgdXJsID1cbiAgICAgIFt0aGlzLl9jb25uLl9iYXNlVXJsKCksICdhbmFseXRpY3MnLCAncmVwb3J0cycsIHRoaXMuaWRdLmpvaW4oJy8nKSArXG4gICAgICAnP2luY2x1ZGVEZXRhaWxzPScgK1xuICAgICAgKG9wdGlvbnMuZGV0YWlscyA/ICd0cnVlJyA6ICdmYWxzZScpO1xuICAgIHJldHVybiB0aGlzLl9jb25uLnJlcXVlc3Q8UmVwb3J0RXhlY3V0ZVJlc3VsdD4oe1xuICAgICAgdXJsLFxuICAgICAgLi4uKG9wdGlvbnMubWV0YWRhdGFcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5tZXRhZGF0YSksXG4gICAgICAgICAgfVxuICAgICAgICA6IHsgbWV0aG9kOiAnR0VUJyB9KSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTeW5vbnltIG9mIEFuYWx5dGljc35SZXBvcnQjZXhlY3V0ZSgpXG4gICAqL1xuICBydW4gPSB0aGlzLmV4ZWN1dGU7XG5cbiAgLyoqXG4gICAqIFN5bm9ueW0gb2YgQW5hbHl0aWNzflJlcG9ydCNleGVjdXRlKClcbiAgICovXG4gIGV4ZWMgPSB0aGlzLmV4ZWN1dGU7XG5cbiAgLyoqXG4gICAqIFJ1biByZXBvcnQgYXN5bmNocm9ub3VzbHlcbiAgICovXG4gIGV4ZWN1dGVBc3luYyhcbiAgICBvcHRpb25zOiBSZXBvcnRFeGVjdXRlT3B0aW9ucyA9IHt9LFxuICApOiBQcm9taXNlPFJlcG9ydEluc3RhbmNlSW5mbz4ge1xuICAgIGNvbnN0IHVybCA9XG4gICAgICBbXG4gICAgICAgIHRoaXMuX2Nvbm4uX2Jhc2VVcmwoKSxcbiAgICAgICAgJ2FuYWx5dGljcycsXG4gICAgICAgICdyZXBvcnRzJyxcbiAgICAgICAgdGhpcy5pZCxcbiAgICAgICAgJ2luc3RhbmNlcycsXG4gICAgICBdLmpvaW4oJy8nKSArIChvcHRpb25zLmRldGFpbHMgPyAnP2luY2x1ZGVEZXRhaWxzPXRydWUnIDogJycpO1xuICAgIHJldHVybiB0aGlzLl9jb25uLnJlcXVlc3Q8UmVwb3J0SW5zdGFuY2VJbmZvPih7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIHVybCxcbiAgICAgIC4uLihvcHRpb25zLm1ldGFkYXRhXG4gICAgICAgID8ge1xuICAgICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShvcHRpb25zLm1ldGFkYXRhKSxcbiAgICAgICAgICB9XG4gICAgICAgIDogeyBib2R5OiAnJyB9KSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcmVwb3J0IGluc3RhbmNlIGZvciBzcGVjaWZpZWQgaW5zdGFuY2UgSURcbiAgICovXG4gIGluc3RhbmNlKGlkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IFJlcG9ydEluc3RhbmNlKHRoaXMsIGlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0IHJlcG9ydCBpbnN0YW5jZXMgd2hpY2ggaGFkIGJlZW4gZXhlY3V0ZWQgYXN5bmNocm9ub3VzbHlcbiAgICovXG4gIGluc3RhbmNlcygpOiBQcm9taXNlPFJlcG9ydEluc3RhbmNlSW5mb1tdPiB7XG4gICAgY29uc3QgdXJsID0gW1xuICAgICAgdGhpcy5fY29ubi5fYmFzZVVybCgpLFxuICAgICAgJ2FuYWx5dGljcycsXG4gICAgICAncmVwb3J0cycsXG4gICAgICB0aGlzLmlkLFxuICAgICAgJ2luc3RhbmNlcycsXG4gICAgXS5qb2luKCcvJyk7XG4gICAgcmV0dXJuIHRoaXMuX2Nvbm4ucmVxdWVzdDxSZXBvcnRJbnN0YW5jZUluZm9bXT4odXJsKTtcbiAgfVxufVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBEYXNoYm9hcmQgb2JqZWN0IGNsYXNzIGluIHRoZSBBbmFseXRpY3MgQVBJXG4gKi9cbmV4cG9ydCBjbGFzcyBEYXNoYm9hcmQ8UyBleHRlbmRzIFNjaGVtYT4ge1xuICBfY29ubjogQ29ubmVjdGlvbjxTPjtcbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICpcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbm46IENvbm5lY3Rpb248Uz4sIGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9jb25uID0gY29ubjtcbiAgICB0aGlzLmlkID0gaWQ7XG4gIH1cblxuICAvKipcbiAgICogRGVzY3JpYmUgZGFzaGJvYXJkIG1ldGFkYXRhXG4gICAqXG4gICAqIEBtZXRob2QgQW5hbHl0aWNzfkRhc2hib2FyZCNkZXNjcmliZVxuICAgKiBAcGFyYW0ge0NhbGxiYWNrLjxBbmFseXRpY3MtRGFzaGJvYXJkTWV0YWRhdGE+fSBbY2FsbGJhY2tdIC0gQ2FsbGJhY2sgZnVuY3Rpb25cbiAgICogQHJldHVybnMge1Byb21pc2UuPEFuYWx5dGljcy1EYXNoYm9hcmRNZXRhZGF0YT59XG4gICAqL1xuICBkZXNjcmliZSgpOiBQcm9taXNlPERhc2hib2FyZE1ldGFkYXRhPiB7XG4gICAgY29uc3QgdXJsID0gW1xuICAgICAgdGhpcy5fY29ubi5fYmFzZVVybCgpLFxuICAgICAgJ2FuYWx5dGljcycsXG4gICAgICAnZGFzaGJvYXJkcycsXG4gICAgICB0aGlzLmlkLFxuICAgICAgJ2Rlc2NyaWJlJyxcbiAgICBdLmpvaW4oJy8nKTtcbiAgICByZXR1cm4gdGhpcy5fY29ubi5yZXF1ZXN0PERhc2hib2FyZE1ldGFkYXRhPih1cmwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBkZXRhaWxzIGFib3V0IGRhc2hib2FyZCBjb21wb25lbnRzXG4gICAqL1xuICBjb21wb25lbnRzKGNvbXBvbmVudElkcz86IHN0cmluZyB8IHN0cmluZ1tdKTogUHJvbWlzZTxEYXNoYm9hcmRSZXN1bHQ+IHtcbiAgICBjb25zdCB1cmwgPSBbXG4gICAgICB0aGlzLl9jb25uLl9iYXNlVXJsKCksXG4gICAgICAnYW5hbHl0aWNzJyxcbiAgICAgICdkYXNoYm9hcmRzJyxcbiAgICAgIHRoaXMuaWQsXG4gICAgXS5qb2luKCcvJyk7XG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgY29tcG9uZW50SWRzOiBBcnJheS5pc0FycmF5KGNvbXBvbmVudElkcylcbiAgICAgICAgPyBjb21wb25lbnRJZHNcbiAgICAgICAgOiB0eXBlb2YgY29tcG9uZW50SWRzID09PSAnc3RyaW5nJ1xuICAgICAgICA/IFtjb21wb25lbnRJZHNdXG4gICAgICAgIDogdW5kZWZpbmVkLFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuX2Nvbm4ucmVxdWVzdDxEYXNoYm9hcmRSZXN1bHQ+KHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgdXJsLFxuICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShjb25maWcpLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBkYXNoYm9hcmQgc3RhdHVzXG4gICAqL1xuICBzdGF0dXMoKTogUHJvbWlzZTxEYXNoYm9hcmRTdGF0dXNSZXN1bHQ+IHtcbiAgICBjb25zdCB1cmwgPSBbXG4gICAgICB0aGlzLl9jb25uLl9iYXNlVXJsKCksXG4gICAgICAnYW5hbHl0aWNzJyxcbiAgICAgICdkYXNoYm9hcmRzJyxcbiAgICAgIHRoaXMuaWQsXG4gICAgICAnc3RhdHVzJyxcbiAgICBdLmpvaW4oJy8nKTtcbiAgICByZXR1cm4gdGhpcy5fY29ubi5yZXF1ZXN0PERhc2hib2FyZFN0YXR1c1Jlc3VsdD4odXJsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWZyZXNoIGEgZGFzaGJvYXJkXG4gICAqL1xuICByZWZyZXNoKCk6IFByb21pc2U8RGFzaGJvYXJkUmVmcmVzaFJlc3VsdD4ge1xuICAgIGNvbnN0IHVybCA9IFtcbiAgICAgIHRoaXMuX2Nvbm4uX2Jhc2VVcmwoKSxcbiAgICAgICdhbmFseXRpY3MnLFxuICAgICAgJ2Rhc2hib2FyZHMnLFxuICAgICAgdGhpcy5pZCxcbiAgICBdLmpvaW4oJy8nKTtcbiAgICByZXR1cm4gdGhpcy5fY29ubi5yZXF1ZXN0PERhc2hib2FyZFJlZnJlc2hSZXN1bHQ+KHtcbiAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICB1cmwsXG4gICAgICBib2R5OiAnJyxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9uZSBhIGRhc2hib2FyZFxuICAgKi9cbiAgY2xvbmUoXG4gICAgY29uZmlnOiB7IG5hbWU6IHN0cmluZzsgZm9sZGVySWQ/OiBzdHJpbmcgfSB8IHN0cmluZyxcbiAgICBmb2xkZXJJZD86IHN0cmluZyxcbiAgKTogUHJvbWlzZTxEYXNoYm9hcmRNZXRhZGF0YT4ge1xuICAgIGNvbnN0IHVybCA9XG4gICAgICBbdGhpcy5fY29ubi5fYmFzZVVybCgpLCAnYW5hbHl0aWNzJywgJ2Rhc2hib2FyZHMnXS5qb2luKCcvJykgK1xuICAgICAgJz9jbG9uZUlkPScgK1xuICAgICAgdGhpcy5pZDtcbiAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbmZpZyA9IHsgbmFtZTogY29uZmlnLCBmb2xkZXJJZCB9O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY29ubi5yZXF1ZXN0PERhc2hib2FyZE1ldGFkYXRhPih7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIHVybCxcbiAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoY29uZmlnKSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95IGEgZGFzaGJvYXJkXG4gICAqL1xuICBkZXN0cm95KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHVybCA9IFtcbiAgICAgIHRoaXMuX2Nvbm4uX2Jhc2VVcmwoKSxcbiAgICAgICdhbmFseXRpY3MnLFxuICAgICAgJ2Rhc2hib2FyZHMnLFxuICAgICAgdGhpcy5pZCxcbiAgICBdLmpvaW4oJy8nKTtcbiAgICByZXR1cm4gdGhpcy5fY29ubi5yZXF1ZXN0PHZvaWQ+KHsgbWV0aG9kOiAnREVMRVRFJywgdXJsIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN5bm9ueW0gb2YgQW5hbHl0aWNzfkRhc2hib2FyZCNkZXN0cm95KClcbiAgICovXG4gIGRlbGV0ZSA9IHRoaXMuZGVzdHJveTtcblxuICAvKipcbiAgICogU3lub255bSBvZiBBbmFseXRpY3N+RGFzaGJvYXJkI2Rlc3Ryb3koKVxuICAgKi9cbiAgZGVsID0gdGhpcy5kZXN0cm95O1xufVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBBUEkgY2xhc3MgZm9yIEFuYWx5dGljcyBBUElcbiAqL1xuZXhwb3J0IGNsYXNzIEFuYWx5dGljczxTIGV4dGVuZHMgU2NoZW1hPiB7XG4gIF9jb25uOiBDb25uZWN0aW9uPFM+O1xuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IoY29ubjogQ29ubmVjdGlvbjxTPikge1xuICAgIHRoaXMuX2Nvbm4gPSBjb25uO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCByZXBvcnQgb2JqZWN0IG9mIEFuYWx5dGljcyBBUElcbiAgICovXG4gIHJlcG9ydChpZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBSZXBvcnQodGhpcy5fY29ubiwgaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCByZWNlbnQgcmVwb3J0IGxpc3RcbiAgICovXG4gIHJlcG9ydHMoKSB7XG4gICAgY29uc3QgdXJsID0gW3RoaXMuX2Nvbm4uX2Jhc2VVcmwoKSwgJ2FuYWx5dGljcycsICdyZXBvcnRzJ10uam9pbignLycpO1xuICAgIHJldHVybiB0aGlzLl9jb25uLnJlcXVlc3Q8UmVwb3J0SW5mb1tdPih1cmwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBkYXNoYm9hcmQgb2JqZWN0IG9mIEFuYWx5dGljcyBBUElcbiAgICovXG4gIGRhc2hib2FyZChpZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBEYXNoYm9hcmQodGhpcy5fY29ubiwgaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCByZWNlbnQgZGFzaGJvYXJkIGxpc3RcbiAgICovXG4gIGRhc2hib2FyZHMoKSB7XG4gICAgdmFyIHVybCA9IFt0aGlzLl9jb25uLl9iYXNlVXJsKCksICdhbmFseXRpY3MnLCAnZGFzaGJvYXJkcyddLmpvaW4oJy8nKTtcbiAgICByZXR1cm4gdGhpcy5fY29ubi5yZXF1ZXN0PERhc2hib2FyZEluZm9bXT4odXJsKTtcbiAgfVxufVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qXG4gKiBSZWdpc3RlciBob29rIGluIGNvbm5lY3Rpb24gaW5zdGFudGlhdGlvbiBmb3IgZHluYW1pY2FsbHkgYWRkaW5nIHRoaXMgQVBJIG1vZHVsZSBmZWF0dXJlc1xuICovXG5yZWdpc3Rlck1vZHVsZSgnYW5hbHl0aWNzJywgKGNvbm4pID0+IG5ldyBBbmFseXRpY3MoY29ubikpO1xuXG5leHBvcnQgZGVmYXVsdCBBbmFseXRpY3M7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLGNBQWMsUUFBUSxZQUFZOztBQWtCM0M7O0FBc0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxNQUFNQyxjQUFjLENBQW1CO0VBSzVDO0FBQ0Y7QUFDQTtFQUNFQyxXQUFXQSxDQUFDQyxNQUFpQixFQUFFQyxFQUFVLEVBQUU7SUFBQUMsZUFBQTtJQUFBQSxlQUFBO0lBQUFBLGVBQUE7SUFDekMsSUFBSSxDQUFDQyxPQUFPLEdBQUdILE1BQU07SUFDckIsSUFBSSxDQUFDSSxLQUFLLEdBQUdKLE1BQU0sQ0FBQ0ksS0FBSztJQUN6QixJQUFJLENBQUNILEVBQUUsR0FBR0EsRUFBRTtFQUNkOztFQUVBO0FBQ0Y7QUFDQTtFQUNFSSxRQUFRQSxDQUFBLEVBQWtDO0lBQ3hDLE1BQU1DLEdBQUcsR0FBRyxDQUNWLElBQUksQ0FBQ0YsS0FBSyxDQUFDRyxRQUFRLENBQUMsQ0FBQyxFQUNyQixXQUFXLEVBQ1gsU0FBUyxFQUNULElBQUksQ0FBQ0osT0FBTyxDQUFDRixFQUFFLEVBQ2YsV0FBVyxFQUNYLElBQUksQ0FBQ0EsRUFBRSxDQUNSLENBQUNPLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDWCxPQUFPLElBQUksQ0FBQ0osS0FBSyxDQUFDSyxPQUFPLENBQXVCSCxHQUFHLENBQUM7RUFDdEQ7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sTUFBTUksTUFBTSxDQUFtQjtFQUlwQztBQUNGO0FBQ0E7RUFDRVgsV0FBV0EsQ0FBQ1ksSUFBbUIsRUFBRVYsRUFBVSxFQUFFO0lBQUFDLGVBQUE7SUFBQUEsZUFBQTtJQUFBQSxlQUFBLGlCQWdDcEMsSUFBSSxDQUFDVSxPQUFPO0lBQUFWLGVBQUEsY0FLZixJQUFJLENBQUNVLE9BQU87SUFBQVYsZUFBQSxjQWtEWixJQUFJLENBQUNXLE9BQU87SUFBQVgsZUFBQSxlQUtYLElBQUksQ0FBQ1csT0FBTztJQTNGakIsSUFBSSxDQUFDVCxLQUFLLEdBQUdPLElBQUk7SUFDakIsSUFBSSxDQUFDVixFQUFFLEdBQUdBLEVBQUU7RUFDZDs7RUFFQTtBQUNGO0FBQ0E7RUFDRWEsUUFBUUEsQ0FBQSxFQUFrQztJQUN4QyxJQUFJUixHQUFHLEdBQUcsQ0FDUixJQUFJLENBQUNGLEtBQUssQ0FBQ0csUUFBUSxDQUFDLENBQUMsRUFDckIsV0FBVyxFQUNYLFNBQVMsRUFDVCxJQUFJLENBQUNOLEVBQUUsRUFDUCxVQUFVLENBQ1gsQ0FBQ08sSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNYLE9BQU8sSUFBSSxDQUFDSixLQUFLLENBQUNLLE9BQU8sQ0FBdUJILEdBQUcsQ0FBQztFQUN0RDs7RUFFQTtBQUNGO0FBQ0E7RUFDRU0sT0FBT0EsQ0FBQSxFQUFrQjtJQUN2QixNQUFNTixHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUNGLEtBQUssQ0FBQ0csUUFBUSxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQ04sRUFBRSxDQUFDLENBQUNPLElBQUksQ0FDdkUsR0FDRixDQUFDO0lBQ0QsT0FBTyxJQUFJLENBQUNKLEtBQUssQ0FBQ0ssT0FBTyxDQUFPO01BQUVNLE1BQU0sRUFBRSxRQUFRO01BQUVUO0lBQUksQ0FBQyxDQUFDO0VBQzVEOztFQUVBO0FBQ0Y7QUFDQTs7RUFHRTtBQUNGO0FBQ0E7O0VBR0U7QUFDRjtBQUNBO0VBQ0VVLEtBQUtBLENBQUNDLElBQVksRUFBaUM7SUFDakQsTUFBTVgsR0FBRyxHQUNQLENBQUMsSUFBSSxDQUFDRixLQUFLLENBQUNHLFFBQVEsQ0FBQyxDQUFDLEVBQUUsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQ3pELFdBQVcsR0FDWCxJQUFJLENBQUNQLEVBQUU7SUFDVCxNQUFNaUIsTUFBTSxHQUFHO01BQUVDLGNBQWMsRUFBRTtRQUFFRjtNQUFLO0lBQUUsQ0FBQztJQUMzQyxPQUFPLElBQUksQ0FBQ2IsS0FBSyxDQUFDSyxPQUFPLENBQXVCO01BQzlDTSxNQUFNLEVBQUUsTUFBTTtNQUNkVCxHQUFHO01BQ0hjLE9BQU8sRUFBRTtRQUFFLGNBQWMsRUFBRTtNQUFtQixDQUFDO01BQy9DQyxJQUFJLEVBQUVDLGVBQUEsQ0FBZUosTUFBTTtJQUM3QixDQUFDLENBQUM7RUFDSjs7RUFFQTtBQUNGO0FBQ0E7RUFDRUssT0FBT0EsQ0FBQSxFQUFnQztJQUNyQyxNQUFNakIsR0FBRyxHQUFHLGtCQUFrQixHQUFHLElBQUksQ0FBQ0wsRUFBRTtJQUN4QyxPQUFPLElBQUksQ0FBQ0csS0FBSyxDQUFDSyxPQUFPLENBQXFCSCxHQUFHLENBQUM7RUFDcEQ7O0VBRUE7QUFDRjtBQUNBO0VBQ0VPLE9BQU9BLENBQUNXLE9BQTZCLEdBQUcsQ0FBQyxDQUFDLEVBQWdDO0lBQ3hFLE1BQU1sQixHQUFHLEdBQ1AsQ0FBQyxJQUFJLENBQUNGLEtBQUssQ0FBQ0csUUFBUSxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQ04sRUFBRSxDQUFDLENBQUNPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FDbEUsa0JBQWtCLElBQ2pCZ0IsT0FBTyxDQUFDQyxPQUFPLEdBQUcsTUFBTSxHQUFHLE9BQU8sQ0FBQztJQUN0QyxPQUFPLElBQUksQ0FBQ3JCLEtBQUssQ0FBQ0ssT0FBTyxDQUFBaUIsYUFBQTtNQUN2QnBCO0lBQUcsR0FDQ2tCLE9BQU8sQ0FBQ0csUUFBUSxHQUNoQjtNQUNFWixNQUFNLEVBQUUsTUFBTTtNQUNkSyxPQUFPLEVBQUU7UUFBRSxjQUFjLEVBQUU7TUFBbUIsQ0FBQztNQUMvQ0MsSUFBSSxFQUFFQyxlQUFBLENBQWVFLE9BQU8sQ0FBQ0csUUFBUTtJQUN2QyxDQUFDLEdBQ0Q7TUFBRVosTUFBTSxFQUFFO0lBQU0sQ0FBQyxDQUN0QixDQUFDO0VBQ0o7O0VBRUE7QUFDRjtBQUNBOztFQUdFO0FBQ0Y7QUFDQTs7RUFHRTtBQUNGO0FBQ0E7RUFDRWEsWUFBWUEsQ0FDVkosT0FBNkIsR0FBRyxDQUFDLENBQUMsRUFDTDtJQUM3QixNQUFNbEIsR0FBRyxHQUNQLENBQ0UsSUFBSSxDQUFDRixLQUFLLENBQUNHLFFBQVEsQ0FBQyxDQUFDLEVBQ3JCLFdBQVcsRUFDWCxTQUFTLEVBQ1QsSUFBSSxDQUFDTixFQUFFLEVBQ1AsV0FBVyxDQUNaLENBQUNPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSWdCLE9BQU8sQ0FBQ0MsT0FBTyxHQUFHLHNCQUFzQixHQUFHLEVBQUUsQ0FBQztJQUMvRCxPQUFPLElBQUksQ0FBQ3JCLEtBQUssQ0FBQ0ssT0FBTyxDQUFBaUIsYUFBQTtNQUN2QlgsTUFBTSxFQUFFLE1BQU07TUFDZFQ7SUFBRyxHQUNDa0IsT0FBTyxDQUFDRyxRQUFRLEdBQ2hCO01BQ0VQLE9BQU8sRUFBRTtRQUFFLGNBQWMsRUFBRTtNQUFtQixDQUFDO01BQy9DQyxJQUFJLEVBQUVDLGVBQUEsQ0FBZUUsT0FBTyxDQUFDRyxRQUFRO0lBQ3ZDLENBQUMsR0FDRDtNQUFFTixJQUFJLEVBQUU7SUFBRyxDQUFDLENBQ2pCLENBQUM7RUFDSjs7RUFFQTtBQUNGO0FBQ0E7RUFDRVEsUUFBUUEsQ0FBQzVCLEVBQVUsRUFBRTtJQUNuQixPQUFPLElBQUlILGNBQWMsQ0FBQyxJQUFJLEVBQUVHLEVBQUUsQ0FBQztFQUNyQzs7RUFFQTtBQUNGO0FBQ0E7RUFDRTZCLFNBQVNBLENBQUEsRUFBa0M7SUFDekMsTUFBTXhCLEdBQUcsR0FBRyxDQUNWLElBQUksQ0FBQ0YsS0FBSyxDQUFDRyxRQUFRLENBQUMsQ0FBQyxFQUNyQixXQUFXLEVBQ1gsU0FBUyxFQUNULElBQUksQ0FBQ04sRUFBRSxFQUNQLFdBQVcsQ0FDWixDQUFDTyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ1gsT0FBTyxJQUFJLENBQUNKLEtBQUssQ0FBQ0ssT0FBTyxDQUF1QkgsR0FBRyxDQUFDO0VBQ3REO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLE1BQU15QixTQUFTLENBQW1CO0VBSXZDO0FBQ0Y7QUFDQTtFQUNFaEMsV0FBV0EsQ0FBQ1ksSUFBbUIsRUFBRVYsRUFBVSxFQUFFO0lBQUFDLGVBQUE7SUFBQUEsZUFBQTtJQUFBQSxlQUFBLGlCQXFIcEMsSUFBSSxDQUFDVSxPQUFPO0lBQUFWLGVBQUEsY0FLZixJQUFJLENBQUNVLE9BQU87SUF6SGhCLElBQUksQ0FBQ1IsS0FBSyxHQUFHTyxJQUFJO0lBQ2pCLElBQUksQ0FBQ1YsRUFBRSxHQUFHQSxFQUFFO0VBQ2Q7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRWEsUUFBUUEsQ0FBQSxFQUErQjtJQUNyQyxNQUFNUixHQUFHLEdBQUcsQ0FDVixJQUFJLENBQUNGLEtBQUssQ0FBQ0csUUFBUSxDQUFDLENBQUMsRUFDckIsV0FBVyxFQUNYLFlBQVksRUFDWixJQUFJLENBQUNOLEVBQUUsRUFDUCxVQUFVLENBQ1gsQ0FBQ08sSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNYLE9BQU8sSUFBSSxDQUFDSixLQUFLLENBQUNLLE9BQU8sQ0FBb0JILEdBQUcsQ0FBQztFQUNuRDs7RUFFQTtBQUNGO0FBQ0E7RUFDRTBCLFVBQVVBLENBQUNDLFlBQWdDLEVBQTRCO0lBQ3JFLE1BQU0zQixHQUFHLEdBQUcsQ0FDVixJQUFJLENBQUNGLEtBQUssQ0FBQ0csUUFBUSxDQUFDLENBQUMsRUFDckIsV0FBVyxFQUNYLFlBQVksRUFDWixJQUFJLENBQUNOLEVBQUUsQ0FDUixDQUFDTyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ1gsTUFBTVUsTUFBTSxHQUFHO01BQ2JlLFlBQVksRUFBRUMsY0FBQSxDQUFjRCxZQUFZLENBQUMsR0FDckNBLFlBQVksR0FDWixPQUFPQSxZQUFZLEtBQUssUUFBUSxHQUNoQyxDQUFDQSxZQUFZLENBQUMsR0FDZEU7SUFDTixDQUFDO0lBQ0QsT0FBTyxJQUFJLENBQUMvQixLQUFLLENBQUNLLE9BQU8sQ0FBa0I7TUFDekNNLE1BQU0sRUFBRSxNQUFNO01BQ2RULEdBQUc7TUFDSGMsT0FBTyxFQUFFO1FBQUUsY0FBYyxFQUFFO01BQW1CLENBQUM7TUFDL0NDLElBQUksRUFBRUMsZUFBQSxDQUFlSixNQUFNO0lBQzdCLENBQUMsQ0FBQztFQUNKOztFQUVBO0FBQ0Y7QUFDQTtFQUNFa0IsTUFBTUEsQ0FBQSxFQUFtQztJQUN2QyxNQUFNOUIsR0FBRyxHQUFHLENBQ1YsSUFBSSxDQUFDRixLQUFLLENBQUNHLFFBQVEsQ0FBQyxDQUFDLEVBQ3JCLFdBQVcsRUFDWCxZQUFZLEVBQ1osSUFBSSxDQUFDTixFQUFFLEVBQ1AsUUFBUSxDQUNULENBQUNPLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDWCxPQUFPLElBQUksQ0FBQ0osS0FBSyxDQUFDSyxPQUFPLENBQXdCSCxHQUFHLENBQUM7RUFDdkQ7O0VBRUE7QUFDRjtBQUNBO0VBQ0UrQixPQUFPQSxDQUFBLEVBQW9DO0lBQ3pDLE1BQU0vQixHQUFHLEdBQUcsQ0FDVixJQUFJLENBQUNGLEtBQUssQ0FBQ0csUUFBUSxDQUFDLENBQUMsRUFDckIsV0FBVyxFQUNYLFlBQVksRUFDWixJQUFJLENBQUNOLEVBQUUsQ0FDUixDQUFDTyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ1gsT0FBTyxJQUFJLENBQUNKLEtBQUssQ0FBQ0ssT0FBTyxDQUF5QjtNQUNoRE0sTUFBTSxFQUFFLEtBQUs7TUFDYlQsR0FBRztNQUNIZSxJQUFJLEVBQUU7SUFDUixDQUFDLENBQUM7RUFDSjs7RUFFQTtBQUNGO0FBQ0E7RUFDRUwsS0FBS0EsQ0FDSEUsTUFBb0QsRUFDcERvQixRQUFpQixFQUNXO0lBQzVCLE1BQU1oQyxHQUFHLEdBQ1AsQ0FBQyxJQUFJLENBQUNGLEtBQUssQ0FBQ0csUUFBUSxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUNDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FDNUQsV0FBVyxHQUNYLElBQUksQ0FBQ1AsRUFBRTtJQUNULElBQUksT0FBT2lCLE1BQU0sS0FBSyxRQUFRLEVBQUU7TUFDOUJBLE1BQU0sR0FBRztRQUFFRCxJQUFJLEVBQUVDLE1BQU07UUFBRW9CO01BQVMsQ0FBQztJQUNyQztJQUNBLE9BQU8sSUFBSSxDQUFDbEMsS0FBSyxDQUFDSyxPQUFPLENBQW9CO01BQzNDTSxNQUFNLEVBQUUsTUFBTTtNQUNkVCxHQUFHO01BQ0hjLE9BQU8sRUFBRTtRQUFFLGNBQWMsRUFBRTtNQUFtQixDQUFDO01BQy9DQyxJQUFJLEVBQUVDLGVBQUEsQ0FBZUosTUFBTTtJQUM3QixDQUFDLENBQUM7RUFDSjs7RUFFQTtBQUNGO0FBQ0E7RUFDRU4sT0FBT0EsQ0FBQSxFQUFrQjtJQUN2QixNQUFNTixHQUFHLEdBQUcsQ0FDVixJQUFJLENBQUNGLEtBQUssQ0FBQ0csUUFBUSxDQUFDLENBQUMsRUFDckIsV0FBVyxFQUNYLFlBQVksRUFDWixJQUFJLENBQUNOLEVBQUUsQ0FDUixDQUFDTyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ1gsT0FBTyxJQUFJLENBQUNKLEtBQUssQ0FBQ0ssT0FBTyxDQUFPO01BQUVNLE1BQU0sRUFBRSxRQUFRO01BQUVUO0lBQUksQ0FBQyxDQUFDO0VBQzVEOztFQUVBO0FBQ0Y7QUFDQTs7RUFHRTtBQUNGO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sTUFBTWlDLFNBQVMsQ0FBbUI7RUFHdkM7QUFDRjtBQUNBO0VBQ0V4QyxXQUFXQSxDQUFDWSxJQUFtQixFQUFFO0lBQUFULGVBQUE7SUFDL0IsSUFBSSxDQUFDRSxLQUFLLEdBQUdPLElBQUk7RUFDbkI7O0VBRUE7QUFDRjtBQUNBO0VBQ0VYLE1BQU1BLENBQUNDLEVBQVUsRUFBRTtJQUNqQixPQUFPLElBQUlTLE1BQU0sQ0FBQyxJQUFJLENBQUNOLEtBQUssRUFBRUgsRUFBRSxDQUFDO0VBQ25DOztFQUVBO0FBQ0Y7QUFDQTtFQUNFdUMsT0FBT0EsQ0FBQSxFQUFHO0lBQ1IsTUFBTWxDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQ0YsS0FBSyxDQUFDRyxRQUFRLENBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNyRSxPQUFPLElBQUksQ0FBQ0osS0FBSyxDQUFDSyxPQUFPLENBQWVILEdBQUcsQ0FBQztFQUM5Qzs7RUFFQTtBQUNGO0FBQ0E7RUFDRW1DLFNBQVNBLENBQUN4QyxFQUFVLEVBQUU7SUFDcEIsT0FBTyxJQUFJOEIsU0FBUyxDQUFDLElBQUksQ0FBQzNCLEtBQUssRUFBRUgsRUFBRSxDQUFDO0VBQ3RDOztFQUVBO0FBQ0Y7QUFDQTtFQUNFeUMsVUFBVUEsQ0FBQSxFQUFHO0lBQ1gsSUFBSXBDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQ0YsS0FBSyxDQUFDRyxRQUFRLENBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUN0RSxPQUFPLElBQUksQ0FBQ0osS0FBSyxDQUFDSyxPQUFPLENBQWtCSCxHQUFHLENBQUM7RUFDakQ7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBVCxjQUFjLENBQUMsV0FBVyxFQUFHYyxJQUFJLElBQUssSUFBSTRCLFNBQVMsQ0FBQzVCLElBQUksQ0FBQyxDQUFDO0FBRTFELGVBQWU0QixTQUFTIn0=