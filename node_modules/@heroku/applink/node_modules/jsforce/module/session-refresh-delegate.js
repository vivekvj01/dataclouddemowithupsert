import "core-js/modules/es.promise";
import _Date$now from "@babel/runtime-corejs3/core-js-stable/date/now";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
/**
 *
 */
import { getLogger } from './util/logger';

/**
 *
 */

/**
 *
 */
export class SessionRefreshDelegate {
  constructor(conn, refreshFn) {
    _defineProperty(this, "_refreshFn", void 0);
    _defineProperty(this, "_conn", void 0);
    _defineProperty(this, "_logger", void 0);
    _defineProperty(this, "_lastRefreshedAt", undefined);
    _defineProperty(this, "_refreshPromise", undefined);
    this._conn = conn;
    this._logger = conn._logLevel ? SessionRefreshDelegate._logger.createInstance(conn._logLevel) : SessionRefreshDelegate._logger;
    this._refreshFn = refreshFn;
  }

  /**
   * Refresh access token
   * @private
   */
  async refresh(since) {
    // Callback immediately When refreshed after designated time
    if (this._lastRefreshedAt && this._lastRefreshedAt > since) {
      return;
    }
    if (this._refreshPromise) {
      await this._refreshPromise;
      return;
    }
    try {
      this._logger.info('<refresh token>');
      this._refreshPromise = new _Promise((resolve, reject) => {
        this._refreshFn(this._conn, (err, accessToken, res) => {
          if (!err) {
            this._logger.debug('Connection refresh completed.');
            this._conn.accessToken = accessToken;
            this._conn.emit('refresh', accessToken, res);
            resolve();
          } else {
            reject(err);
          }
        });
      });
      await this._refreshPromise;
      this._logger.info('<refresh complete>');
    } finally {
      this._refreshPromise = undefined;
      this._lastRefreshedAt = _Date$now();
    }
  }
  isRefreshing() {
    return !!this._refreshPromise;
  }
  async waitRefresh() {
    return this._refreshPromise;
  }
}
_defineProperty(SessionRefreshDelegate, "_logger", getLogger('session-refresh-delegate'));
export default SessionRefreshDelegate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRMb2dnZXIiLCJTZXNzaW9uUmVmcmVzaERlbGVnYXRlIiwiY29uc3RydWN0b3IiLCJjb25uIiwicmVmcmVzaEZuIiwiX2RlZmluZVByb3BlcnR5IiwidW5kZWZpbmVkIiwiX2Nvbm4iLCJfbG9nZ2VyIiwiX2xvZ0xldmVsIiwiY3JlYXRlSW5zdGFuY2UiLCJfcmVmcmVzaEZuIiwicmVmcmVzaCIsInNpbmNlIiwiX2xhc3RSZWZyZXNoZWRBdCIsIl9yZWZyZXNoUHJvbWlzZSIsImluZm8iLCJfUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJlcnIiLCJhY2Nlc3NUb2tlbiIsInJlcyIsImRlYnVnIiwiZW1pdCIsIl9EYXRlJG5vdyIsImlzUmVmcmVzaGluZyIsIndhaXRSZWZyZXNoIl0sInNvdXJjZXMiOlsiLi4vc3JjL3Nlc3Npb24tcmVmcmVzaC1kZWxlZ2F0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKi9cbmltcG9ydCB7IGdldExvZ2dlciwgTG9nZ2VyIH0gZnJvbSAnLi91dGlsL2xvZ2dlcic7XG5pbXBvcnQgeyBDYWxsYmFjaywgU2NoZW1hIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgQ29ubmVjdGlvbiBmcm9tICcuL2Nvbm5lY3Rpb24nO1xuaW1wb3J0IHsgVG9rZW5SZXNwb25zZSB9IGZyb20gJy4vb2F1dGgyJztcblxuLyoqXG4gKlxuICovXG5leHBvcnQgdHlwZSBTZXNzaW9uUmVmcmVzaEZ1bmM8UyBleHRlbmRzIFNjaGVtYT4gPSAoXG4gIGNvbm46IENvbm5lY3Rpb248Uz4sXG4gIGNhbGxiYWNrOiBDYWxsYmFjazxzdHJpbmcsIFRva2VuUmVzcG9uc2U+LFxuKSA9PiB2b2lkO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXNzaW9uUmVmcmVzaERlbGVnYXRlPFMgZXh0ZW5kcyBTY2hlbWE+IHtcbiAgc3RhdGljIF9sb2dnZXI6IExvZ2dlciA9IGdldExvZ2dlcignc2Vzc2lvbi1yZWZyZXNoLWRlbGVnYXRlJyk7XG5cbiAgcHJpdmF0ZSBfcmVmcmVzaEZuOiBTZXNzaW9uUmVmcmVzaEZ1bmM8Uz47XG4gIHByaXZhdGUgX2Nvbm46IENvbm5lY3Rpb248Uz47XG4gIHByaXZhdGUgX2xvZ2dlcjogTG9nZ2VyO1xuICBwcml2YXRlIF9sYXN0UmVmcmVzaGVkQXQ6IG51bWJlciB8IHZvaWQgPSB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX3JlZnJlc2hQcm9taXNlOiBQcm9taXNlPHZvaWQ+IHwgdm9pZCA9IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3Rvcihjb25uOiBDb25uZWN0aW9uPFM+LCByZWZyZXNoRm46IFNlc3Npb25SZWZyZXNoRnVuYzxTPikge1xuICAgIHRoaXMuX2Nvbm4gPSBjb25uO1xuICAgIHRoaXMuX2xvZ2dlciA9IGNvbm4uX2xvZ0xldmVsXG4gICAgICA/IFNlc3Npb25SZWZyZXNoRGVsZWdhdGUuX2xvZ2dlci5jcmVhdGVJbnN0YW5jZShjb25uLl9sb2dMZXZlbClcbiAgICAgIDogU2Vzc2lvblJlZnJlc2hEZWxlZ2F0ZS5fbG9nZ2VyO1xuICAgIHRoaXMuX3JlZnJlc2hGbiA9IHJlZnJlc2hGbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWZyZXNoIGFjY2VzcyB0b2tlblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYXN5bmMgcmVmcmVzaChzaW5jZTogbnVtYmVyKSB7XG4gICAgLy8gQ2FsbGJhY2sgaW1tZWRpYXRlbHkgV2hlbiByZWZyZXNoZWQgYWZ0ZXIgZGVzaWduYXRlZCB0aW1lXG4gICAgaWYgKHRoaXMuX2xhc3RSZWZyZXNoZWRBdCAmJiB0aGlzLl9sYXN0UmVmcmVzaGVkQXQgPiBzaW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5fcmVmcmVzaFByb21pc2UpIHtcbiAgICAgIGF3YWl0IHRoaXMuX3JlZnJlc2hQcm9taXNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgdGhpcy5fbG9nZ2VyLmluZm8oJzxyZWZyZXNoIHRva2VuPicpO1xuICAgICAgdGhpcy5fcmVmcmVzaFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHRoaXMuX3JlZnJlc2hGbih0aGlzLl9jb25uLCAoZXJyLCBhY2Nlc3NUb2tlbiwgcmVzKSA9PiB7XG4gICAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZygnQ29ubmVjdGlvbiByZWZyZXNoIGNvbXBsZXRlZC4nKTtcbiAgICAgICAgICAgIHRoaXMuX2Nvbm4uYWNjZXNzVG9rZW4gPSBhY2Nlc3NUb2tlbjtcbiAgICAgICAgICAgIHRoaXMuX2Nvbm4uZW1pdCgncmVmcmVzaCcsIGFjY2Vzc1Rva2VuLCByZXMpO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBhd2FpdCB0aGlzLl9yZWZyZXNoUHJvbWlzZTtcbiAgICAgIHRoaXMuX2xvZ2dlci5pbmZvKCc8cmVmcmVzaCBjb21wbGV0ZT4nKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5fcmVmcmVzaFByb21pc2UgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9sYXN0UmVmcmVzaGVkQXQgPSBEYXRlLm5vdygpO1xuICAgIH1cbiAgfVxuXG4gIGlzUmVmcmVzaGluZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLl9yZWZyZXNoUHJvbWlzZTtcbiAgfVxuXG4gIGFzeW5jIHdhaXRSZWZyZXNoKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWZyZXNoUHJvbWlzZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZXNzaW9uUmVmcmVzaERlbGVnYXRlO1xuIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EsU0FBU0EsU0FBUyxRQUFnQixlQUFlOztBQUtqRDtBQUNBO0FBQ0E7O0FBTUE7QUFDQTtBQUNBO0FBQ0EsT0FBTyxNQUFNQyxzQkFBc0IsQ0FBbUI7RUFTcERDLFdBQVdBLENBQUNDLElBQW1CLEVBQUVDLFNBQWdDLEVBQUU7SUFBQUMsZUFBQTtJQUFBQSxlQUFBO0lBQUFBLGVBQUE7SUFBQUEsZUFBQSwyQkFIekJDLFNBQVM7SUFBQUQsZUFBQSwwQkFDSEMsU0FBUztJQUd2RCxJQUFJLENBQUNDLEtBQUssR0FBR0osSUFBSTtJQUNqQixJQUFJLENBQUNLLE9BQU8sR0FBR0wsSUFBSSxDQUFDTSxTQUFTLEdBQ3pCUixzQkFBc0IsQ0FBQ08sT0FBTyxDQUFDRSxjQUFjLENBQUNQLElBQUksQ0FBQ00sU0FBUyxDQUFDLEdBQzdEUixzQkFBc0IsQ0FBQ08sT0FBTztJQUNsQyxJQUFJLENBQUNHLFVBQVUsR0FBR1AsU0FBUztFQUM3Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFLE1BQU1RLE9BQU9BLENBQUNDLEtBQWEsRUFBRTtJQUMzQjtJQUNBLElBQUksSUFBSSxDQUFDQyxnQkFBZ0IsSUFBSSxJQUFJLENBQUNBLGdCQUFnQixHQUFHRCxLQUFLLEVBQUU7TUFDMUQ7SUFDRjtJQUNBLElBQUksSUFBSSxDQUFDRSxlQUFlLEVBQUU7TUFDeEIsTUFBTSxJQUFJLENBQUNBLGVBQWU7TUFDMUI7SUFDRjtJQUNBLElBQUk7TUFDRixJQUFJLENBQUNQLE9BQU8sQ0FBQ1EsSUFBSSxDQUFDLGlCQUFpQixDQUFDO01BQ3BDLElBQUksQ0FBQ0QsZUFBZSxHQUFHLElBQUFFLFFBQUEsQ0FBWSxDQUFDQyxPQUFPLEVBQUVDLE1BQU0sS0FBSztRQUN0RCxJQUFJLENBQUNSLFVBQVUsQ0FBQyxJQUFJLENBQUNKLEtBQUssRUFBRSxDQUFDYSxHQUFHLEVBQUVDLFdBQVcsRUFBRUMsR0FBRyxLQUFLO1VBQ3JELElBQUksQ0FBQ0YsR0FBRyxFQUFFO1lBQ1IsSUFBSSxDQUFDWixPQUFPLENBQUNlLEtBQUssQ0FBQywrQkFBK0IsQ0FBQztZQUNuRCxJQUFJLENBQUNoQixLQUFLLENBQUNjLFdBQVcsR0FBR0EsV0FBVztZQUNwQyxJQUFJLENBQUNkLEtBQUssQ0FBQ2lCLElBQUksQ0FBQyxTQUFTLEVBQUVILFdBQVcsRUFBRUMsR0FBRyxDQUFDO1lBQzVDSixPQUFPLENBQUMsQ0FBQztVQUNYLENBQUMsTUFBTTtZQUNMQyxNQUFNLENBQUNDLEdBQUcsQ0FBQztVQUNiO1FBQ0YsQ0FBQyxDQUFDO01BQ0osQ0FBQyxDQUFDO01BQ0YsTUFBTSxJQUFJLENBQUNMLGVBQWU7TUFDMUIsSUFBSSxDQUFDUCxPQUFPLENBQUNRLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztJQUN6QyxDQUFDLFNBQVM7TUFDUixJQUFJLENBQUNELGVBQWUsR0FBR1QsU0FBUztNQUNoQyxJQUFJLENBQUNRLGdCQUFnQixHQUFHVyxTQUFBLENBQVMsQ0FBQztJQUNwQztFQUNGO0VBRUFDLFlBQVlBLENBQUEsRUFBWTtJQUN0QixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUNYLGVBQWU7RUFDL0I7RUFFQSxNQUFNWSxXQUFXQSxDQUFBLEVBQUc7SUFDbEIsT0FBTyxJQUFJLENBQUNaLGVBQWU7RUFDN0I7QUFDRjtBQUFDVixlQUFBLENBM0RZSixzQkFBc0IsYUFDUkQsU0FBUyxDQUFDLDBCQUEwQixDQUFDO0FBNERoRSxlQUFlQyxzQkFBc0IifQ==