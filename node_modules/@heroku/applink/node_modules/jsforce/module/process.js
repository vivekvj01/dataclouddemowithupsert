import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import "core-js/modules/es.promise";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; _forEachInstanceProperty(_context = ownKeys(Object(source), true)).call(_context, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * @file Process class to manage/run workflow rule and approval process
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

/**
 *
 */

/**
 *
 */

/**
 * A class which manages process (workflow) rules
 */
export class ProcessRule {
  /**
   *
   */
  constructor(conn) {
    _defineProperty(this, "_conn", void 0);
    this._conn = conn;
  }

  /**
   * Get all process rule definitions registered to sobjects
   */
  async list() {
    const res = await this._conn.request('/process/rules');
    return res.rules;
  }

  /**
   * Trigger process rule for given entities
   */
  trigger(contextIds) {
    const contextIds_ = _Array$isArray(contextIds) ? contextIds : [contextIds];
    // https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_process_rules_trigger.htm
    return this._conn.request({
      method: 'POST',
      url: '/process/rules/',
      body: _JSON$stringify({
        contextIds: contextIds_
      }),
      headers: {
        'content-type': 'application/json'
      }
    });
  }
}

/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 * A class which manages approval processes
 */
export class ApprovalProcess {
  /**
   *
   */
  constructor(conn) {
    _defineProperty(this, "_conn", void 0);
    this._conn = conn;
  }

  /**
   * Get all approval process definitions registered to sobjects
   */
  async list() {
    const res = await this._conn.request('/process/approvals');
    return res.approvals;
  }

  /**
   * Send bulk requests for approval process
   */
  request(requests) {
    const requests_ = _mapInstanceProperty(requests).call(requests, req => '_request' in req ? req._request : req);
    return this._conn.request({
      method: 'POST',
      url: '/process/approvals',
      headers: {
        'content-type': 'application/json'
      },
      body: _JSON$stringify({
        requests: requests_
      })
    });
  }

  /**
   * Create approval process request
   *
   * @private
   */
  _createRequest(actionType, contextId, comments, options = {}) {
    return new ApprovalProcessRequest(this, _objectSpread({
      actionType,
      contextId,
      comments
    }, options));
  }

  /**
   * Submit approval request for an item
   */
  submit(contextId, comments, options) {
    return this._createRequest('Submit', contextId, comments, options);
  }

  /**
   * Approve approval request for an item
   */
  approve(workitemId, comments, options = {}) {
    return this._createRequest('Approve', workitemId, comments, options);
  }

  /**
   * Reject approval request for an item
   */
  reject(workitemId, comments, options = {}) {
    return this._createRequest('Reject', workitemId, comments, options);
  }
}

/**
 *
 */

/**
 * A class representing approval process request
 */
class ApprovalProcessRequest {
  constructor(process, request) {
    _defineProperty(this, "_process", void 0);
    _defineProperty(this, "_request", void 0);
    _defineProperty(this, "_promise", void 0);
    this._process = process;
    this._request = request;
  }

  /**
   * Promise/A+ interface
   * http://promises-aplus.github.io/promises-spec/
   */
  then(onResolve, onReject) {
    if (!this._promise) {
      this._promise = this._process.request([this]).then(rets => rets[0]);
    }
    this._promise.then(onResolve, onReject);
  }
}

/**
 * A class which manages process rules and approval processes
 */
export class Process {
  /**
   *
   */
  constructor(conn) {
    _defineProperty(this, "rule", void 0);
    _defineProperty(this, "approval", void 0);
    this.rule = new ProcessRule(conn);
    this.approval = new ApprovalProcess(conn);
  }
}
export default Process;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,