import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import "core-js/modules/es.promise";
import _Set from "@babel/runtime-corejs3/core-js-stable/set";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; _forEachInstanceProperty(_context = ownKeys(Object(source), true)).call(_context, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
import { PassThrough } from 'stream';
import { concatStreamsAsDuplex, readAll } from './util/stream';
import FormData from 'form-data';

/**
 *
 */
export function createHttpRequestHandlerStreams(req, options = {}) {
  const {
    body: reqBody
  } = req;
  const input = new PassThrough();
  const output = new PassThrough();
  const duplex = concatStreamsAsDuplex(input, output);
  if (typeof reqBody !== 'undefined') {
    _setTimeout(() => {
      if (reqBody instanceof FormData) {
        duplex.end(reqBody.getBuffer());
      } else {
        duplex.end(reqBody, 'utf8');
      }
    }, 0);
  }
  duplex.on('response', async res => {
    if (duplex.listenerCount('complete') > 0) {
      const resBody = await readAll(duplex, options.encoding);
      duplex.emit('complete', _objectSpread(_objectSpread({}, res), {}, {
        body: resBody
      }));
    }
  });
  return {
    input,
    output,
    stream: duplex
  };
}
const redirectStatuses = new _Set([301, 302, 303, 307, 308]);

/**
 *
 */
export function isRedirect(status) {
  return redirectStatuses.has(status);
}

/**
 *
 */
const MAX_REDIRECT_COUNT = 10;

/**
 *
 */
export function performRedirectRequest(req, res, followRedirect, counter, redirectCallback) {
  if (counter >= MAX_REDIRECT_COUNT) {
    throw new Error('Reached to maximum redirect count');
  }
  const redirectUrl = res.headers['location'];
  if (!redirectUrl) {
    throw new Error('No redirect URI found');
  }
  const getRedirectRequest = typeof followRedirect === 'function' ? followRedirect : () => ({
    method: 'GET',
    url: redirectUrl,
    headers: req.headers
  });
  const nextReqParams = getRedirectRequest(redirectUrl);
  if (!nextReqParams) {
    throw new Error('Cannot handle redirect for ' + redirectUrl);
  }
  redirectCallback(nextReqParams);
}

/**
 *
 */
export async function executeWithTimeout(execFn, msec, cancelCallback) {
  let timeout = false;
  let pid = msec != null ? _setTimeout(() => {
    timeout = true;
    cancelCallback === null || cancelCallback === void 0 ? void 0 : cancelCallback();
  }, msec) : undefined;
  let res;
  try {
    res = await execFn();
  } finally {
    if (pid) {
      clearTimeout(pid);
    }
  }
  if (timeout) {
    throw new Error('Request Timeout');
  }
  return res;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYXNzVGhyb3VnaCIsImNvbmNhdFN0cmVhbXNBc0R1cGxleCIsInJlYWRBbGwiLCJGb3JtRGF0YSIsImNyZWF0ZUh0dHBSZXF1ZXN0SGFuZGxlclN0cmVhbXMiLCJyZXEiLCJvcHRpb25zIiwiYm9keSIsInJlcUJvZHkiLCJpbnB1dCIsIm91dHB1dCIsImR1cGxleCIsIl9zZXRUaW1lb3V0IiwiZW5kIiwiZ2V0QnVmZmVyIiwib24iLCJyZXMiLCJsaXN0ZW5lckNvdW50IiwicmVzQm9keSIsImVuY29kaW5nIiwiZW1pdCIsIl9vYmplY3RTcHJlYWQiLCJzdHJlYW0iLCJyZWRpcmVjdFN0YXR1c2VzIiwiX1NldCIsImlzUmVkaXJlY3QiLCJzdGF0dXMiLCJoYXMiLCJNQVhfUkVESVJFQ1RfQ09VTlQiLCJwZXJmb3JtUmVkaXJlY3RSZXF1ZXN0IiwiZm9sbG93UmVkaXJlY3QiLCJjb3VudGVyIiwicmVkaXJlY3RDYWxsYmFjayIsIkVycm9yIiwicmVkaXJlY3RVcmwiLCJoZWFkZXJzIiwiZ2V0UmVkaXJlY3RSZXF1ZXN0IiwibWV0aG9kIiwidXJsIiwibmV4dFJlcVBhcmFtcyIsImV4ZWN1dGVXaXRoVGltZW91dCIsImV4ZWNGbiIsIm1zZWMiLCJjYW5jZWxDYWxsYmFjayIsInRpbWVvdXQiLCJwaWQiLCJ1bmRlZmluZWQiLCJjbGVhclRpbWVvdXQiXSwic291cmNlcyI6WyIuLi9zcmMvcmVxdWVzdC1oZWxwZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFzc1Rocm91Z2ggfSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHsgY29uY2F0U3RyZWFtc0FzRHVwbGV4LCByZWFkQWxsIH0gZnJvbSAnLi91dGlsL3N0cmVhbSc7XG5pbXBvcnQgeyBIdHRwUmVxdWVzdCwgSHR0cFJlcXVlc3RPcHRpb25zLCBIdHRwUmVzcG9uc2UgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBGb3JtRGF0YSBmcm9tICdmb3JtLWRhdGEnO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIdHRwUmVxdWVzdEhhbmRsZXJTdHJlYW1zKFxuICByZXE6IEh0dHBSZXF1ZXN0LFxuICBvcHRpb25zOiBIdHRwUmVxdWVzdE9wdGlvbnMgPSB7fSxcbikge1xuICBjb25zdCB7IGJvZHk6IHJlcUJvZHkgfSA9IHJlcTtcbiAgY29uc3QgaW5wdXQgPSBuZXcgUGFzc1Rocm91Z2goKTtcbiAgY29uc3Qgb3V0cHV0ID0gbmV3IFBhc3NUaHJvdWdoKCk7XG4gIGNvbnN0IGR1cGxleCA9IGNvbmNhdFN0cmVhbXNBc0R1cGxleChpbnB1dCwgb3V0cHV0KTtcblxuICBpZiAodHlwZW9mIHJlcUJvZHkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAocmVxQm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhKSB7XG4gICAgICAgIGR1cGxleC5lbmQocmVxQm9keS5nZXRCdWZmZXIoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkdXBsZXguZW5kKHJlcUJvZHksICd1dGY4Jyk7XG4gICAgICB9XG4gICAgfSwgMCk7XG4gIH1cbiAgZHVwbGV4Lm9uKCdyZXNwb25zZScsIGFzeW5jIChyZXMpID0+IHtcbiAgICBpZiAoZHVwbGV4Lmxpc3RlbmVyQ291bnQoJ2NvbXBsZXRlJykgPiAwKSB7XG4gICAgICBjb25zdCByZXNCb2R5ID0gYXdhaXQgcmVhZEFsbChkdXBsZXgsIG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgICAgZHVwbGV4LmVtaXQoJ2NvbXBsZXRlJywge1xuICAgICAgICAuLi5yZXMsXG4gICAgICAgIGJvZHk6IHJlc0JvZHksXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4geyBpbnB1dCwgb3V0cHV0LCBzdHJlYW06IGR1cGxleCB9O1xufVxuXG5jb25zdCByZWRpcmVjdFN0YXR1c2VzID0gbmV3IFNldChbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdKTtcblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNSZWRpcmVjdChzdGF0dXM6IG51bWJlcikge1xuICByZXR1cm4gcmVkaXJlY3RTdGF0dXNlcy5oYXMoc3RhdHVzKTtcbn1cblxuLyoqXG4gKlxuICovXG5jb25zdCBNQVhfUkVESVJFQ1RfQ09VTlQgPSAxMDtcblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGVyZm9ybVJlZGlyZWN0UmVxdWVzdChcbiAgcmVxOiBIdHRwUmVxdWVzdCxcbiAgcmVzOiBPbWl0PEh0dHBSZXNwb25zZSwgJ2JvZHknPixcbiAgZm9sbG93UmVkaXJlY3Q6IE5vbk51bGxhYmxlPEh0dHBSZXF1ZXN0T3B0aW9uc1snZm9sbG93UmVkaXJlY3QnXT4sXG4gIGNvdW50ZXI6IG51bWJlcixcbiAgcmVkaXJlY3RDYWxsYmFjazogKHJlcTogSHR0cFJlcXVlc3QpID0+IHZvaWQsXG4pIHtcbiAgaWYgKGNvdW50ZXIgPj0gTUFYX1JFRElSRUNUX0NPVU5UKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdSZWFjaGVkIHRvIG1heGltdW0gcmVkaXJlY3QgY291bnQnKTtcbiAgfVxuICBjb25zdCByZWRpcmVjdFVybCA9IHJlcy5oZWFkZXJzWydsb2NhdGlvbiddO1xuICBpZiAoIXJlZGlyZWN0VXJsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyByZWRpcmVjdCBVUkkgZm91bmQnKTtcbiAgfVxuICBjb25zdCBnZXRSZWRpcmVjdFJlcXVlc3QgPVxuICAgIHR5cGVvZiBmb2xsb3dSZWRpcmVjdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBmb2xsb3dSZWRpcmVjdFxuICAgICAgOiAoKSA9PiAoe1xuICAgICAgICAgIG1ldGhvZDogJ0dFVCcgYXMgY29uc3QsXG4gICAgICAgICAgdXJsOiByZWRpcmVjdFVybCxcbiAgICAgICAgICBoZWFkZXJzOiByZXEuaGVhZGVycyxcbiAgICAgICAgfSk7XG4gIGNvbnN0IG5leHRSZXFQYXJhbXMgPSBnZXRSZWRpcmVjdFJlcXVlc3QocmVkaXJlY3RVcmwpO1xuICBpZiAoIW5leHRSZXFQYXJhbXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBoYW5kbGUgcmVkaXJlY3QgZm9yICcgKyByZWRpcmVjdFVybCk7XG4gIH1cbiAgcmVkaXJlY3RDYWxsYmFjayhuZXh0UmVxUGFyYW1zKTtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZVdpdGhUaW1lb3V0PFQ+KFxuICBleGVjRm46ICgpID0+IFByb21pc2U8VD4sXG4gIG1zZWM6IG51bWJlciB8IHVuZGVmaW5lZCxcbiAgY2FuY2VsQ2FsbGJhY2s/OiAoKSA9PiB2b2lkLFxuKTogUHJvbWlzZTxUPiB7XG4gIGxldCB0aW1lb3V0ID0gZmFsc2U7XG4gIGxldCBwaWQgPVxuICAgIG1zZWMgIT0gbnVsbFxuICAgICAgPyBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aW1lb3V0ID0gdHJ1ZTtcbiAgICAgICAgICBjYW5jZWxDYWxsYmFjaz8uKCk7XG4gICAgICAgIH0sIG1zZWMpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgbGV0IHJlcztcbiAgdHJ5IHtcbiAgICByZXMgPSBhd2FpdCBleGVjRm4oKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAocGlkKSB7XG4gICAgICBjbGVhclRpbWVvdXQocGlkKTtcbiAgICB9XG4gIH1cbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVlc3QgVGltZW91dCcpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUEsU0FBU0EsV0FBVyxRQUFRLFFBQVE7QUFDcEMsU0FBU0MscUJBQXFCLEVBQUVDLE9BQU8sUUFBUSxlQUFlO0FBRTlELE9BQU9DLFFBQVEsTUFBTSxXQUFXOztBQUVoQztBQUNBO0FBQ0E7QUFDQSxPQUFPLFNBQVNDLCtCQUErQkEsQ0FDN0NDLEdBQWdCLEVBQ2hCQyxPQUEyQixHQUFHLENBQUMsQ0FBQyxFQUNoQztFQUNBLE1BQU07SUFBRUMsSUFBSSxFQUFFQztFQUFRLENBQUMsR0FBR0gsR0FBRztFQUM3QixNQUFNSSxLQUFLLEdBQUcsSUFBSVQsV0FBVyxDQUFDLENBQUM7RUFDL0IsTUFBTVUsTUFBTSxHQUFHLElBQUlWLFdBQVcsQ0FBQyxDQUFDO0VBQ2hDLE1BQU1XLE1BQU0sR0FBR1YscUJBQXFCLENBQUNRLEtBQUssRUFBRUMsTUFBTSxDQUFDO0VBRW5ELElBQUksT0FBT0YsT0FBTyxLQUFLLFdBQVcsRUFBRTtJQUNsQ0ksV0FBQSxDQUFXLE1BQU07TUFDZixJQUFJSixPQUFPLFlBQVlMLFFBQVEsRUFBRTtRQUMvQlEsTUFBTSxDQUFDRSxHQUFHLENBQUNMLE9BQU8sQ0FBQ00sU0FBUyxDQUFDLENBQUMsQ0FBQztNQUNqQyxDQUFDLE1BQU07UUFDTEgsTUFBTSxDQUFDRSxHQUFHLENBQUNMLE9BQU8sRUFBRSxNQUFNLENBQUM7TUFDN0I7SUFDRixDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQ1A7RUFDQUcsTUFBTSxDQUFDSSxFQUFFLENBQUMsVUFBVSxFQUFFLE1BQU9DLEdBQUcsSUFBSztJQUNuQyxJQUFJTCxNQUFNLENBQUNNLGFBQWEsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7TUFDeEMsTUFBTUMsT0FBTyxHQUFHLE1BQU1oQixPQUFPLENBQUNTLE1BQU0sRUFBRUwsT0FBTyxDQUFDYSxRQUFRLENBQUM7TUFDdkRSLE1BQU0sQ0FBQ1MsSUFBSSxDQUFDLFVBQVUsRUFBQUMsYUFBQSxDQUFBQSxhQUFBLEtBQ2pCTCxHQUFHO1FBQ05ULElBQUksRUFBRVc7TUFBTyxFQUNkLENBQUM7SUFDSjtFQUNGLENBQUMsQ0FBQztFQUNGLE9BQU87SUFBRVQsS0FBSztJQUFFQyxNQUFNO0lBQUVZLE1BQU0sRUFBRVg7RUFBTyxDQUFDO0FBQzFDO0FBRUEsTUFBTVksZ0JBQWdCLEdBQUcsSUFBQUMsSUFBQSxDQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDOztBQUUzRDtBQUNBO0FBQ0E7QUFDQSxPQUFPLFNBQVNDLFVBQVVBLENBQUNDLE1BQWMsRUFBRTtFQUN6QyxPQUFPSCxnQkFBZ0IsQ0FBQ0ksR0FBRyxDQUFDRCxNQUFNLENBQUM7QUFDckM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTUUsa0JBQWtCLEdBQUcsRUFBRTs7QUFFN0I7QUFDQTtBQUNBO0FBQ0EsT0FBTyxTQUFTQyxzQkFBc0JBLENBQ3BDeEIsR0FBZ0IsRUFDaEJXLEdBQStCLEVBQy9CYyxjQUFpRSxFQUNqRUMsT0FBZSxFQUNmQyxnQkFBNEMsRUFDNUM7RUFDQSxJQUFJRCxPQUFPLElBQUlILGtCQUFrQixFQUFFO0lBQ2pDLE1BQU0sSUFBSUssS0FBSyxDQUFDLG1DQUFtQyxDQUFDO0VBQ3REO0VBQ0EsTUFBTUMsV0FBVyxHQUFHbEIsR0FBRyxDQUFDbUIsT0FBTyxDQUFDLFVBQVUsQ0FBQztFQUMzQyxJQUFJLENBQUNELFdBQVcsRUFBRTtJQUNoQixNQUFNLElBQUlELEtBQUssQ0FBQyx1QkFBdUIsQ0FBQztFQUMxQztFQUNBLE1BQU1HLGtCQUFrQixHQUN0QixPQUFPTixjQUFjLEtBQUssVUFBVSxHQUNoQ0EsY0FBYyxHQUNkLE9BQU87SUFDTE8sTUFBTSxFQUFFLEtBQWM7SUFDdEJDLEdBQUcsRUFBRUosV0FBVztJQUNoQkMsT0FBTyxFQUFFOUIsR0FBRyxDQUFDOEI7RUFDZixDQUFDLENBQUM7RUFDUixNQUFNSSxhQUFhLEdBQUdILGtCQUFrQixDQUFDRixXQUFXLENBQUM7RUFDckQsSUFBSSxDQUFDSyxhQUFhLEVBQUU7SUFDbEIsTUFBTSxJQUFJTixLQUFLLENBQUMsNkJBQTZCLEdBQUdDLFdBQVcsQ0FBQztFQUM5RDtFQUNBRixnQkFBZ0IsQ0FBQ08sYUFBYSxDQUFDO0FBQ2pDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sZUFBZUMsa0JBQWtCQSxDQUN0Q0MsTUFBd0IsRUFDeEJDLElBQXdCLEVBQ3hCQyxjQUEyQixFQUNmO0VBQ1osSUFBSUMsT0FBTyxHQUFHLEtBQUs7RUFDbkIsSUFBSUMsR0FBRyxHQUNMSCxJQUFJLElBQUksSUFBSSxHQUNSOUIsV0FBQSxDQUFXLE1BQU07SUFDZmdDLE9BQU8sR0FBRyxJQUFJO0lBQ2RELGNBQWMsYUFBZEEsY0FBYyx1QkFBZEEsY0FBYyxDQUFHLENBQUM7RUFDcEIsQ0FBQyxFQUFFRCxJQUFJLENBQUMsR0FDUkksU0FBUztFQUNmLElBQUk5QixHQUFHO0VBQ1AsSUFBSTtJQUNGQSxHQUFHLEdBQUcsTUFBTXlCLE1BQU0sQ0FBQyxDQUFDO0VBQ3RCLENBQUMsU0FBUztJQUNSLElBQUlJLEdBQUcsRUFBRTtNQUNQRSxZQUFZLENBQUNGLEdBQUcsQ0FBQztJQUNuQjtFQUNGO0VBQ0EsSUFBSUQsT0FBTyxFQUFFO0lBQ1gsTUFBTSxJQUFJWCxLQUFLLENBQUMsaUJBQWlCLENBQUM7RUFDcEM7RUFDQSxPQUFPakIsR0FBRztBQUNaIn0=