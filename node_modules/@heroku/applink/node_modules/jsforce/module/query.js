import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import "core-js/modules/es.array.iterator";
import "core-js/modules/es.array.sort";
import "core-js/modules/es.promise";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _Object$entries from "@babel/runtime-corejs3/core-js-stable/object/entries";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
import _includesInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/includes";
import _sortInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/sort";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _reduceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reduce";
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context15; _forEachInstanceProperty(_context15 = ownKeys(Object(source), true)).call(_context15, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context16; _forEachInstanceProperty(_context16 = ownKeys(Object(source))).call(_context16, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * @file Manages query for records in Salesforce
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { EventEmitter } from 'events';
import { getLogger } from './util/logger';
import RecordStream, { Serializable } from './record-stream';
import { createSOQL } from './soql-builder';

/**
 *
 */

/**
 *
 */

/**
 *
 */

const ResponseTargetValues = ['QueryResult', 'Records', 'SingleRecord', 'Count'];
export const ResponseTargets = _reduceInstanceProperty(ResponseTargetValues).call(ResponseTargetValues, (values, target) => _objectSpread(_objectSpread({}, values), {}, {
  [target]: target
}), {});

// QRT extends 'Count'

/**
 *
 */
const DEFAULT_BULK_THRESHOLD = 200;
const DEFAULT_BULK_API_VERSION = 1;

/**
 * Query
 */
export class Query extends EventEmitter {
  /**
   *
   */
  constructor(conn, config, options) {
    super();
    _defineProperty(this, "_conn", void 0);
    _defineProperty(this, "_logger", void 0);
    _defineProperty(this, "_soql", void 0);
    _defineProperty(this, "_locator", void 0);
    _defineProperty(this, "_config", {});
    _defineProperty(this, "_children", []);
    _defineProperty(this, "_options", void 0);
    _defineProperty(this, "_executed", false);
    _defineProperty(this, "_finished", false);
    _defineProperty(this, "_chaining", false);
    _defineProperty(this, "_promise", void 0);
    _defineProperty(this, "_stream", void 0);
    _defineProperty(this, "totalSize", 0);
    _defineProperty(this, "totalFetched", 0);
    _defineProperty(this, "records", []);
    _defineProperty(this, "offset", this.skip);
    _defineProperty(this, "orderby", _sortInstanceProperty(this));
    _defineProperty(this, "exec", this.execute);
    _defineProperty(this, "run", this.execute);
    _defineProperty(this, "delete", this.destroy);
    _defineProperty(this, "del", this.destroy);
    this._conn = conn;
    this._logger = conn._logLevel ? Query._logger.createInstance(conn._logLevel) : Query._logger;
    if (typeof config === 'string') {
      this._soql = config;
      this._logger.debug(`config is soql: ${config}`);
    } else if (typeof config.locator === 'string') {
      const locator = config.locator;
      this._logger.debug(`config is locator: ${locator}`);
      this._locator = _includesInstanceProperty(locator).call(locator, '/') ? this.urlToLocator(locator) : locator;
    } else {
      this._logger.debug(`config is QueryConfig: ${config}`);
      const _ref = config,
        {
          fields,
          includes,
          sort
        } = _ref,
        _config = _objectWithoutProperties(_ref, ["fields", "includes", "sort"]);
      this._config = _config;
      this.select(fields);
      if (includes) {
        this.includeChildren(includes);
      }
      if (sort) {
        var _context;
        _sortInstanceProperty(_context = this).call(_context, sort);
      }
    }
    this._options = _objectSpread({
      headers: {},
      maxFetch: 10000,
      autoFetch: false,
      scanAll: false,
      responseTarget: 'QueryResult'
    }, options || {});
    // promise instance
    this._promise = new _Promise((resolve, reject) => {
      this.on('response', resolve);
      this.on('error', reject);
    });
    this._stream = new Serializable();
    this.on('record', record => this._stream.push(record));
    this.on('end', () => this._stream.push(null));
    this.on('error', err => {
      try {
        this._stream.emit('error', err);
      } catch (e) {
        // eslint-disable-line no-empty
      }
    });
  }

  /**
   * Select fields to include in the returning result
   */
  select(fields = '*') {
    if (this._soql) {
      throw Error('Cannot set select fields for the query which has already built SOQL.');
    }
    function toFieldArray(fields) {
      var _context2, _context3, _context4, _context5;
      return typeof fields === 'string' ? fields.split(/\s*,\s*/) : _Array$isArray(fields) ? _reduceInstanceProperty(_context2 = _mapInstanceProperty(_context3 = fields).call(_context3, toFieldArray)).call(_context2, (fs, f) => [...fs, ...f], []) : _reduceInstanceProperty(_context4 = _mapInstanceProperty(_context5 = _Object$entries(fields)).call(_context5, ([f, v]) => {
        if (typeof v === 'number' || typeof v === 'boolean') {
          return v ? [f] : [];
        } else {
          var _context6;
          return _mapInstanceProperty(_context6 = toFieldArray(v)).call(_context6, p => `${f}.${p}`);
        }
      })).call(_context4, (fs, f) => [...fs, ...f], []);
    }
    if (fields) {
      this._config.fields = toFieldArray(fields);
    }
    // force convert query record type without changing instance;
    return this;
  }

  /**
   * Set query conditions to filter the result records
   */
  where(conditions) {
    if (this._soql) {
      throw Error('Cannot set where conditions for the query which has already built SOQL.');
    }
    this._config.conditions = conditions;
    return this;
  }

  /**
   * Limit the returning result
   */
  limit(limit) {
    if (this._soql) {
      throw Error('Cannot set limit for the query which has already built SOQL.');
    }
    this._config.limit = limit;
    return this;
  }

  /**
   * Skip records
   */
  skip(offset) {
    if (this._soql) {
      throw Error('Cannot set skip/offset for the query which has already built SOQL.');
    }
    this._config.offset = offset;
    return this;
  }

  /**
   * Synonym of Query#skip()
   */

  /**
   * Set query sort with direction
   */

  sort(sort, dir) {
    if (this._soql) {
      throw Error('Cannot set sort for the query which has already built SOQL.');
    }
    if (typeof sort === 'string' && typeof dir !== 'undefined') {
      this._config.sort = [[sort, dir]];
    } else {
      this._config.sort = sort;
    }
    return this;
  }

  /**
   * Synonym of Query#sort()
   */

  /**
   * Include child relationship query and move down to the child query context
   */

  include(childRelName, conditions, fields, options = {}) {
    if (this._soql) {
      throw Error('Cannot include child relationship into the query which has already built SOQL.');
    }
    const childConfig = {
      fields: fields === null ? undefined : fields,
      table: childRelName,
      conditions: conditions === null ? undefined : conditions,
      limit: options.limit,
      offset: options.offset,
      sort: _sortInstanceProperty(options)
    };
    // eslint-disable-next-line no-use-before-define
    const childQuery = new SubQuery(this._conn, childRelName, childConfig, this);
    this._children.push(childQuery);
    return childQuery;
  }

  /**
   * Include child relationship queries, but not moving down to the children context
   */
  includeChildren(includes) {
    if (this._soql) {
      throw Error('Cannot include child relationship into the query which has already built SOQL.');
    }
    for (const crname of _Object$keys(includes)) {
      const _ref2 = includes[crname],
        {
          conditions,
          fields
        } = _ref2,
        options = _objectWithoutProperties(_ref2, ["conditions", "fields"]);
      this.include(crname, conditions, fields, options);
    }
    return this;
  }

  /**
   * Setting maxFetch query option
   */
  maxFetch(maxFetch) {
    this._options.maxFetch = maxFetch;
    return this;
  }

  /**
   * Switching auto fetch mode
   */
  autoFetch(autoFetch) {
    this._options.autoFetch = autoFetch;
    return this;
  }

  /**
   * Set flag to scan all records including deleted and archived.
   */
  scanAll(scanAll) {
    this._options.scanAll = scanAll;
    return this;
  }

  /**
   *
   */
  setResponseTarget(responseTarget) {
    if (responseTarget in ResponseTargets) {
      this._options.responseTarget = responseTarget;
    }
    // force change query response target without changing instance
    return this;
  }

  /**
   * Execute query and fetch records from server.
   */
  execute(options_ = {}) {
    if (this._executed) {
      throw new Error('re-executing already executed query');
    }
    if (this._finished) {
      throw new Error('executing already closed query');
    }
    const options = {
      headers: options_.headers || this._options.headers,
      responseTarget: options_.responseTarget || this._options.responseTarget,
      autoFetch: options_.autoFetch || this._options.autoFetch,
      maxFetch: options_.maxFetch || this._options.maxFetch,
      scanAll: options_.scanAll || this._options.scanAll
    };

    // collect fetched records in array
    // only when response target is Records and
    // either callback or chaining promises are available to this query.
    this.once('fetch', () => {
      if (options.responseTarget === ResponseTargets.Records && this._chaining) {
        this._logger.debug('--- collecting all fetched records ---');
        const records = [];
        const onRecord = record => records.push(record);
        this.on('record', onRecord);
        this.once('end', () => {
          this.removeListener('record', onRecord);
          this.emit('response', records, this);
        });
      }
    });

    // flag to prevent re-execution
    this._executed = true;
    (async () => {
      // start actual query
      this._logger.debug('>>> Query start >>>');
      try {
        await this._execute(options);
        this._logger.debug('*** Query finished ***');
      } catch (error) {
        this._logger.debug('--- Query error ---', error);
        this.emit('error', error);
      }
    })();

    // return Query instance for chaining
    return this;
  }

  /**
   * Synonym of Query#execute()
   */

  /**
   * Synonym of Query#execute()
   */

  locatorToUrl() {
    return this._locator ? [this._conn._baseUrl(), '/query/', this._locator].join('') : '';
  }
  urlToLocator(url) {
    return url.split('/').pop();
  }
  constructResponse(rawDone, responseTarget) {
    var _this$records$, _this$records;
    switch (responseTarget) {
      case 'Count':
        return this.totalSize;
      case 'SingleRecord':
        return (_this$records$ = (_this$records = this.records) === null || _this$records === void 0 ? void 0 : _this$records[0]) !== null && _this$records$ !== void 0 ? _this$records$ : null;
      case 'Records':
        return this.records;
      // QueryResult is default response target
      default:
        return _objectSpread(_objectSpread({}, {
          records: this.records,
          totalSize: this.totalSize,
          done: rawDone !== null && rawDone !== void 0 ? rawDone : true // when no records, done is omitted
        }), this._locator ? {
          nextRecordsUrl: this.locatorToUrl()
        } : {});
    }
  }
  /**
   * @private
   */
  async _execute(options) {
    var _this$records2, _context7, _data$records$length, _data$records;
    const {
      headers,
      responseTarget,
      autoFetch,
      maxFetch,
      scanAll
    } = options;
    this._logger.debug('execute with options', options);
    let url;
    if (this._locator) {
      url = this.locatorToUrl();
    } else {
      const soql = await this.toSOQL();
      this._logger.debug(`SOQL = ${soql}`);
      url = [this._conn._baseUrl(), '/', scanAll ? 'queryAll' : 'query', '?q=', encodeURIComponent(soql)].join('');
    }
    const data = await this._conn.request({
      method: 'GET',
      url,
      headers
    });
    this.emit('fetch');
    this.totalSize = data.totalSize;
    this.records = (_this$records2 = this.records) === null || _this$records2 === void 0 ? void 0 : _concatInstanceProperty(_this$records2).call(_this$records2, maxFetch - this.records.length > data.records.length ? data.records : _sliceInstanceProperty(_context7 = data.records).call(_context7, 0, maxFetch - this.records.length));
    this._locator = data.nextRecordsUrl ? this.urlToLocator(data.nextRecordsUrl) : undefined;
    this._finished = this._finished || data.done || !autoFetch ||
    // this is what the response looks like when there are no results
    data.records.length === 0 && data.done === undefined;

    // streaming record instances
    const numRecords = (_data$records$length = (_data$records = data.records) === null || _data$records === void 0 ? void 0 : _data$records.length) !== null && _data$records$length !== void 0 ? _data$records$length : 0;
    let totalFetched = this.totalFetched;
    for (let i = 0; i < numRecords; i++) {
      if (totalFetched >= maxFetch) {
        this._finished = true;
        break;
      }
      const record = data.records[i];
      this.emit('record', record, totalFetched, this);
      totalFetched += 1;
    }
    this.totalFetched = totalFetched;
    if (this._finished) {
      const response = this.constructResponse(data.done, responseTarget);
      // only fire response event when it should be notified per fetch
      if (responseTarget !== ResponseTargets.Records) {
        this.emit('response', response, this);
      }
      this.emit('end');
      return response;
    } else {
      return this._execute(options);
    }
  }

  /**
   * Obtain readable stream instance
   */

  stream(type = 'csv') {
    if (!this._finished && !this._executed) {
      this.execute({
        autoFetch: true
      });
    }
    return type === 'record' ? this._stream : this._stream.stream(type);
  }

  /**
   * Pipe the queried records to another stream
   * This is for backward compatibility; Query is not a record stream instance anymore in 2.0.
   * If you want a record stream instance, use `Query#stream('record')`.
   */
  pipe(stream) {
    return this.stream('record').pipe(stream);
  }

  /**
   * @protected
   */
  async _expandFields(sobject_) {
    var _context8, _context9, _context10;
    if (this._soql) {
      throw new Error('Cannot expand fields for the query which has already built SOQL.');
    }
    const {
      fields = [],
      table = ''
    } = this._config;
    const sobject = sobject_ || table;
    this._logger.debug(`_expandFields: sobject = ${sobject}, fields = ${fields.join(', ')}`);
    const [efields] = await _Promise.all([this._expandAsteriskFields(sobject, fields), ..._mapInstanceProperty(_context8 = this._children).call(_context8, async childQuery => {
      await childQuery._expandFields();
      return [];
    })]);
    this._config.fields = efields;
    this._config.includes = _reduceInstanceProperty(_context9 = _mapInstanceProperty(_context10 = this._children).call(_context10, cquery => {
      const cconfig = cquery._query._config;
      return [cconfig.table, cconfig];
    })).call(_context9, (includes, [ctable, cconfig]) => _objectSpread(_objectSpread({}, includes), {}, {
      [ctable]: cconfig
    }), {});
  }

  /**
   *
   */
  async _findRelationObject(relName) {
    const table = this._config.table;
    if (!table) {
      throw new Error('No table information provided in the query');
    }
    this._logger.debug(`finding table for relation "${relName}" in "${table}"...`);
    const sobject = await this._conn.describe$(table);
    const upperRname = relName.toUpperCase();
    for (const cr of sobject.childRelationships) {
      if ((cr.relationshipName || '').toUpperCase() === upperRname && cr.childSObject) {
        return cr.childSObject;
      }
    }
    throw new Error(`No child relationship found: ${relName}`);
  }

  /**
   *
   */
  async _expandAsteriskFields(sobject, fields) {
    const expandedFields = await _Promise.all(_mapInstanceProperty(fields).call(fields, async field => this._expandAsteriskField(sobject, field)));
    return _reduceInstanceProperty(expandedFields).call(expandedFields, (eflds, flds) => [...eflds, ...flds], []);
  }

  /**
   *
   */
  async _expandAsteriskField(sobject, field) {
    this._logger.debug(`expanding field "${field}" in "${sobject}"...`);
    const fpath = field.split('.');
    if (fpath[fpath.length - 1] === '*') {
      var _context11;
      const so = await this._conn.describe$(sobject);
      this._logger.debug(`table ${sobject} has been described`);
      if (fpath.length > 1) {
        const rname = fpath.shift();
        for (const f of so.fields) {
          if (f.relationshipName && rname && f.relationshipName.toUpperCase() === rname.toUpperCase()) {
            const rfield = f;
            const referenceTo = rfield.referenceTo || [];
            const rtable = referenceTo.length === 1 ? referenceTo[0] : 'Name';
            const fpaths = await this._expandAsteriskField(rtable, fpath.join('.'));
            return _mapInstanceProperty(fpaths).call(fpaths, fp => `${rname}.${fp}`);
          }
        }
        return [];
      }
      return _mapInstanceProperty(_context11 = so.fields).call(_context11, f => f.name);
    }
    return [field];
  }

  /**
   * Explain plan for executing query
   */
  async explain() {
    const soql = await this.toSOQL();
    this._logger.debug(`SOQL = ${soql}`);
    const url = `/query/?explain=${encodeURIComponent(soql)}`;
    return this._conn.request(url);
  }

  /**
   * Return SOQL expression for the query
   */
  async toSOQL() {
    if (this._soql) {
      return this._soql;
    }
    await this._expandFields();
    return createSOQL(this._config);
  }

  /**
   * Promise/A+ interface
   * http://promises-aplus.github.io/promises-spec/
   *
   * Delegate to deferred promise, return promise instance for query result
   */
  then(onResolve, onReject) {
    this._chaining = true;
    if (!this._finished && !this._executed) {
      this.execute();
    }
    if (!this._promise) {
      throw new Error('invalid state: promise is not set after query execution');
    }
    return this._promise.then(onResolve, onReject);
  }
  catch(onReject) {
    return this.then(null, onReject);
  }
  promise() {
    return _Promise.resolve(this);
  }

  /**
   * Bulk delete queried records
   */

  destroy(type, options) {
    var _options$bulkApiVersi;
    if (typeof type === 'object' && type !== null) {
      options = type;
      type = undefined;
    }
    options = options || {};
    const type_ = type || this._config.table;
    if (!type_) {
      throw new Error('SOQL based query needs SObject type information to bulk delete.');
    }
    // Set the threshold number to pass to bulk API
    const thresholdNum = options.allowBulk === false ? -1 : typeof options.bulkThreshold === 'number' ? options.bulkThreshold :
    // determine threshold if the connection version supports SObject collection API or not
    this._conn._ensureVersion(42) ? DEFAULT_BULK_THRESHOLD : this._conn._maxRequest / 2;
    const bulkApiVersion = (_options$bulkApiVersi = options.bulkApiVersion) !== null && _options$bulkApiVersi !== void 0 ? _options$bulkApiVersi : DEFAULT_BULK_API_VERSION;
    return new _Promise((resolve, reject) => {
      const createBatch = () => this._conn.sobject(type_).deleteBulk().on('response', resolve).on('error', reject);
      let records = [];
      let batch = null;
      const handleRecord = rec => {
        if (!rec.Id) {
          const err = new Error('Queried record does not include Salesforce record ID.');
          this.emit('error', err);
          return;
        }
        const record = {
          Id: rec.Id
        };
        if (batch) {
          batch.write(record);
        } else {
          records.push(record);
          if (thresholdNum >= 0 && records.length > thresholdNum && bulkApiVersion === 1) {
            // Use bulk delete instead of SObject REST API
            batch = createBatch();
            for (const record of records) {
              batch.write(record);
            }
            records = [];
          }
        }
      };
      const handleEnd = () => {
        if (batch) {
          batch.end();
        } else {
          const ids = _mapInstanceProperty(records).call(records, record => record.Id);
          if (records.length > thresholdNum && bulkApiVersion === 2) {
            this._conn.bulk2.loadAndWaitForResults({
              object: type_,
              operation: 'delete',
              input: records
            }).then(allResults => resolve(this.mapBulkV2ResultsToSaveResults(allResults)), reject);
          } else {
            this._conn.sobject(type_).destroy(ids, {
              allowRecursive: true
            }).then(resolve, reject);
          }
        }
      };
      this.stream('record').on('data', handleRecord).on('end', handleEnd).on('error', reject);
    });
  }

  /**
   * Synonym of Query#destroy()
   */

  /**
   * Synonym of Query#destroy()
   */

  /**
   * Bulk update queried records, using given mapping function/object
   */

  update(mapping, type, options) {
    var _options$bulkApiVersi2;
    if (typeof type === 'object' && type !== null) {
      options = type;
      type = undefined;
    }
    options = options || {};
    const type_ = type || this._config && this._config.table;
    if (!type_) {
      throw new Error('SOQL based query needs SObject type information to bulk update.');
    }
    const updateStream = typeof mapping === 'function' ? _mapInstanceProperty(RecordStream).call(RecordStream, mapping) : RecordStream.recordMapStream(mapping);
    // Set the threshold number to pass to bulk API
    const thresholdNum = options.allowBulk === false ? -1 : typeof options.bulkThreshold === 'number' ? options.bulkThreshold :
    // determine threshold if the connection version supports SObject collection API or not
    this._conn._ensureVersion(42) ? DEFAULT_BULK_THRESHOLD : this._conn._maxRequest / 2;
    const bulkApiVersion = (_options$bulkApiVersi2 = options.bulkApiVersion) !== null && _options$bulkApiVersi2 !== void 0 ? _options$bulkApiVersi2 : DEFAULT_BULK_API_VERSION;
    return new _Promise((resolve, reject) => {
      const createBatch = () => this._conn.sobject(type_).updateBulk().on('response', resolve).on('error', reject);
      let records = [];
      let batch = null;
      const handleRecord = record => {
        if (batch) {
          batch.write(record);
        } else {
          records.push(record);
        }
        if (thresholdNum >= 0 && records.length > thresholdNum && bulkApiVersion === 1) {
          // Use bulk update instead of SObject REST API
          batch = createBatch();
          for (const record of records) {
            batch.write(record);
          }
          records = [];
        }
      };
      const handleEnd = () => {
        if (batch) {
          batch.end();
        } else {
          if (records.length > thresholdNum && bulkApiVersion === 2) {
            this._conn.bulk2.loadAndWaitForResults({
              object: type_,
              operation: 'update',
              input: records
            }).then(allResults => resolve(this.mapBulkV2ResultsToSaveResults(allResults)), reject);
          } else {
            this._conn.sobject(type_).update(records, {
              allowRecursive: true
            }).then(resolve, reject);
          }
        }
      };
      this.stream('record').on('error', reject).pipe(updateStream).on('data', handleRecord).on('end', handleEnd).on('error', reject);
    });
  }
  mapBulkV2ResultsToSaveResults(bulkJobAllResults) {
    var _context12, _context13;
    const successSaveResults = _mapInstanceProperty(_context12 = bulkJobAllResults.successfulResults).call(_context12, r => {
      const saveResult = {
        id: r.sf__Id,
        success: true,
        errors: []
      };
      return saveResult;
    });
    const failedSaveResults = _mapInstanceProperty(_context13 = bulkJobAllResults.failedResults).call(_context13, r => {
      const saveResult = {
        success: false,
        errors: [{
          errorCode: r.sf__Error,
          message: r.sf__Error
        }]
      };
      return saveResult;
    });
    return [...successSaveResults, ...failedSaveResults];
  }
}

/*--------------------------------------------*/

/**
 * SubQuery object for representing child relationship query
 */
_defineProperty(Query, "_logger", getLogger('query'));
export class SubQuery {
  /**
   *
   */
  constructor(conn, relName, config, parent) {
    _defineProperty(this, "_relName", void 0);
    _defineProperty(this, "_query", void 0);
    _defineProperty(this, "_parent", void 0);
    _defineProperty(this, "offset", this.skip);
    _defineProperty(this, "orderby", _sortInstanceProperty(this));
    this._relName = relName;
    this._query = new Query(conn, config);
    this._parent = parent;
  }

  /**
   *
   */
  select(fields) {
    // force convert query record type without changing instance
    this._query = this._query.select(fields);
    return this;
  }

  /**
   *
   */
  where(conditions) {
    this._query = this._query.where(conditions);
    return this;
  }

  /**
   * Limit the returning result
   */
  limit(limit) {
    this._query = this._query.limit(limit);
    return this;
  }

  /**
   * Skip records
   */
  skip(offset) {
    this._query = this._query.skip(offset);
    return this;
  }

  /**
   * Synonym of SubQuery#skip()
   */

  /**
   * Set query sort with direction
   */

  sort(sort, dir) {
    var _context14;
    this._query = _sortInstanceProperty(_context14 = this._query).call(_context14, sort, dir);
    return this;
  }

  /**
   * Synonym of SubQuery#sort()
   */

  /**
   *
   */
  async _expandFields() {
    const sobject = await this._parent._findRelationObject(this._relName);
    return this._query._expandFields(sobject);
  }

  /**
   * Back the context to parent query object
   */
  end() {
    return this._parent;
  }
}
export default Query;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJnZXRMb2dnZXIiLCJSZWNvcmRTdHJlYW0iLCJTZXJpYWxpemFibGUiLCJjcmVhdGVTT1FMIiwiUmVzcG9uc2VUYXJnZXRWYWx1ZXMiLCJSZXNwb25zZVRhcmdldHMiLCJfcmVkdWNlSW5zdGFuY2VQcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZXMiLCJ0YXJnZXQiLCJfb2JqZWN0U3ByZWFkIiwiREVGQVVMVF9CVUxLX1RIUkVTSE9MRCIsIkRFRkFVTFRfQlVMS19BUElfVkVSU0lPTiIsIlF1ZXJ5IiwiY29uc3RydWN0b3IiLCJjb25uIiwiY29uZmlnIiwib3B0aW9ucyIsIl9kZWZpbmVQcm9wZXJ0eSIsInNraXAiLCJfc29ydEluc3RhbmNlUHJvcGVydHkiLCJleGVjdXRlIiwiZGVzdHJveSIsIl9jb25uIiwiX2xvZ2dlciIsIl9sb2dMZXZlbCIsImNyZWF0ZUluc3RhbmNlIiwiX3NvcWwiLCJkZWJ1ZyIsImxvY2F0b3IiLCJfbG9jYXRvciIsIl9pbmNsdWRlc0luc3RhbmNlUHJvcGVydHkiLCJ1cmxUb0xvY2F0b3IiLCJfcmVmIiwiZmllbGRzIiwiaW5jbHVkZXMiLCJzb3J0IiwiX2NvbmZpZyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInNlbGVjdCIsImluY2x1ZGVDaGlsZHJlbiIsIl9jb250ZXh0IiwiX29wdGlvbnMiLCJoZWFkZXJzIiwibWF4RmV0Y2giLCJhdXRvRmV0Y2giLCJzY2FuQWxsIiwicmVzcG9uc2VUYXJnZXQiLCJfcHJvbWlzZSIsIl9Qcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uIiwiX3N0cmVhbSIsInJlY29yZCIsInB1c2giLCJlcnIiLCJlbWl0IiwiZSIsIkVycm9yIiwidG9GaWVsZEFycmF5IiwiX2NvbnRleHQyIiwiX2NvbnRleHQzIiwiX2NvbnRleHQ0IiwiX2NvbnRleHQ1Iiwic3BsaXQiLCJfQXJyYXkkaXNBcnJheSIsIl9tYXBJbnN0YW5jZVByb3BlcnR5IiwiZnMiLCJmIiwiX09iamVjdCRlbnRyaWVzIiwidiIsIl9jb250ZXh0NiIsInAiLCJ3aGVyZSIsImNvbmRpdGlvbnMiLCJsaW1pdCIsIm9mZnNldCIsImRpciIsImluY2x1ZGUiLCJjaGlsZFJlbE5hbWUiLCJjaGlsZENvbmZpZyIsInVuZGVmaW5lZCIsInRhYmxlIiwiY2hpbGRRdWVyeSIsIlN1YlF1ZXJ5IiwiX2NoaWxkcmVuIiwiY3JuYW1lIiwiX09iamVjdCRrZXlzIiwiX3JlZjIiLCJzZXRSZXNwb25zZVRhcmdldCIsIm9wdGlvbnNfIiwiX2V4ZWN1dGVkIiwiX2ZpbmlzaGVkIiwib25jZSIsIlJlY29yZHMiLCJfY2hhaW5pbmciLCJyZWNvcmRzIiwib25SZWNvcmQiLCJyZW1vdmVMaXN0ZW5lciIsIl9leGVjdXRlIiwiZXJyb3IiLCJsb2NhdG9yVG9VcmwiLCJfYmFzZVVybCIsImpvaW4iLCJ1cmwiLCJwb3AiLCJjb25zdHJ1Y3RSZXNwb25zZSIsInJhd0RvbmUiLCJfdGhpcyRyZWNvcmRzJCIsIl90aGlzJHJlY29yZHMiLCJ0b3RhbFNpemUiLCJkb25lIiwibmV4dFJlY29yZHNVcmwiLCJfdGhpcyRyZWNvcmRzMiIsIl9jb250ZXh0NyIsIl9kYXRhJHJlY29yZHMkbGVuZ3RoIiwiX2RhdGEkcmVjb3JkcyIsInNvcWwiLCJ0b1NPUUwiLCJlbmNvZGVVUklDb21wb25lbnQiLCJkYXRhIiwicmVxdWVzdCIsIm1ldGhvZCIsIl9jb25jYXRJbnN0YW5jZVByb3BlcnR5IiwibGVuZ3RoIiwiX3NsaWNlSW5zdGFuY2VQcm9wZXJ0eSIsIm51bVJlY29yZHMiLCJ0b3RhbEZldGNoZWQiLCJpIiwicmVzcG9uc2UiLCJzdHJlYW0iLCJ0eXBlIiwicGlwZSIsIl9leHBhbmRGaWVsZHMiLCJzb2JqZWN0XyIsIl9jb250ZXh0OCIsIl9jb250ZXh0OSIsIl9jb250ZXh0MTAiLCJzb2JqZWN0IiwiZWZpZWxkcyIsImFsbCIsIl9leHBhbmRBc3Rlcmlza0ZpZWxkcyIsImNxdWVyeSIsImNjb25maWciLCJfcXVlcnkiLCJjdGFibGUiLCJfZmluZFJlbGF0aW9uT2JqZWN0IiwicmVsTmFtZSIsImRlc2NyaWJlJCIsInVwcGVyUm5hbWUiLCJ0b1VwcGVyQ2FzZSIsImNyIiwiY2hpbGRSZWxhdGlvbnNoaXBzIiwicmVsYXRpb25zaGlwTmFtZSIsImNoaWxkU09iamVjdCIsImV4cGFuZGVkRmllbGRzIiwiZmllbGQiLCJfZXhwYW5kQXN0ZXJpc2tGaWVsZCIsImVmbGRzIiwiZmxkcyIsImZwYXRoIiwiX2NvbnRleHQxMSIsInNvIiwicm5hbWUiLCJzaGlmdCIsInJmaWVsZCIsInJlZmVyZW5jZVRvIiwicnRhYmxlIiwiZnBhdGhzIiwiZnAiLCJuYW1lIiwiZXhwbGFpbiIsInRoZW4iLCJvblJlc29sdmUiLCJvblJlamVjdCIsImNhdGNoIiwicHJvbWlzZSIsIl9vcHRpb25zJGJ1bGtBcGlWZXJzaSIsInR5cGVfIiwidGhyZXNob2xkTnVtIiwiYWxsb3dCdWxrIiwiYnVsa1RocmVzaG9sZCIsIl9lbnN1cmVWZXJzaW9uIiwiX21heFJlcXVlc3QiLCJidWxrQXBpVmVyc2lvbiIsImNyZWF0ZUJhdGNoIiwiZGVsZXRlQnVsayIsImJhdGNoIiwiaGFuZGxlUmVjb3JkIiwicmVjIiwiSWQiLCJ3cml0ZSIsImhhbmRsZUVuZCIsImVuZCIsImlkcyIsImJ1bGsyIiwibG9hZEFuZFdhaXRGb3JSZXN1bHRzIiwib2JqZWN0Iiwib3BlcmF0aW9uIiwiaW5wdXQiLCJhbGxSZXN1bHRzIiwibWFwQnVsa1YyUmVzdWx0c1RvU2F2ZVJlc3VsdHMiLCJhbGxvd1JlY3Vyc2l2ZSIsInVwZGF0ZSIsIm1hcHBpbmciLCJfb3B0aW9ucyRidWxrQXBpVmVyc2kyIiwidXBkYXRlU3RyZWFtIiwicmVjb3JkTWFwU3RyZWFtIiwidXBkYXRlQnVsayIsImJ1bGtKb2JBbGxSZXN1bHRzIiwiX2NvbnRleHQxMiIsIl9jb250ZXh0MTMiLCJzdWNjZXNzU2F2ZVJlc3VsdHMiLCJzdWNjZXNzZnVsUmVzdWx0cyIsInIiLCJzYXZlUmVzdWx0IiwiaWQiLCJzZl9fSWQiLCJzdWNjZXNzIiwiZXJyb3JzIiwiZmFpbGVkU2F2ZVJlc3VsdHMiLCJmYWlsZWRSZXN1bHRzIiwiZXJyb3JDb2RlIiwic2ZfX0Vycm9yIiwibWVzc2FnZSIsInBhcmVudCIsIl9yZWxOYW1lIiwiX3BhcmVudCIsIl9jb250ZXh0MTQiXSwic291cmNlcyI6WyIuLi9zcmMvcXVlcnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBNYW5hZ2VzIHF1ZXJ5IGZvciByZWNvcmRzIGluIFNhbGVzZm9yY2VcbiAqIEBhdXRob3IgU2hpbmljaGkgVG9taXRhIDxzaGluaWNoaS50b21pdGFAZ21haWwuY29tPlxuICovXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xuaW1wb3J0IHsgTG9nZ2VyLCBnZXRMb2dnZXIgfSBmcm9tICcuL3V0aWwvbG9nZ2VyJztcbmltcG9ydCBSZWNvcmRTdHJlYW0sIHsgU2VyaWFsaXphYmxlIH0gZnJvbSAnLi9yZWNvcmQtc3RyZWFtJztcbmltcG9ydCBDb25uZWN0aW9uIGZyb20gJy4vY29ubmVjdGlvbic7XG5pbXBvcnQgeyBjcmVhdGVTT1FMIH0gZnJvbSAnLi9zb3FsLWJ1aWxkZXInO1xuaW1wb3J0IHsgUXVlcnlDb25maWcgYXMgU09RTFF1ZXJ5Q29uZmlnLCBTb3J0RGlyIH0gZnJvbSAnLi9zb3FsLWJ1aWxkZXInO1xuaW1wb3J0IHtcbiAgUmVjb3JkLFxuICBPcHRpb25hbCxcbiAgU2NoZW1hLFxuICBTT2JqZWN0TmFtZXMsXG4gIENoaWxkUmVsYXRpb25zaGlwTmFtZXMsXG4gIENoaWxkUmVsYXRpb25zaGlwU09iamVjdE5hbWUsXG4gIEZpZWxkUHJvamVjdGlvbkNvbmZpZyxcbiAgRmllbGRQYXRoU3BlY2lmaWVyLFxuICBGaWVsZFBhdGhTY29wZWRQcm9qZWN0aW9uLFxuICBTT2JqZWN0UmVjb3JkLFxuICBTT2JqZWN0SW5wdXRSZWNvcmQsXG4gIFNPYmplY3RVcGRhdGVSZWNvcmQsXG4gIFNhdmVSZXN1bHQsXG4gIERhdGVTdHJpbmcsXG4gIFNPYmplY3RDaGlsZFJlbGF0aW9uc2hpcFByb3AsXG4gIFNPYmplY3RGaWVsZE5hbWVzLFxufSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IFJlYWRhYmxlIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCBTZkRhdGUgZnJvbSAnLi9kYXRlJztcbmltcG9ydCB7IEluZ2VzdEpvYlYyUmVzdWx0cyB9IGZyb20gJy4vYXBpL2J1bGsnO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIFF1ZXJ5RmllbGQ8XG4gIFMgZXh0ZW5kcyBTY2hlbWEsXG4gIE4gZXh0ZW5kcyBTT2JqZWN0TmFtZXM8Uz4sXG4gIEZQIGV4dGVuZHMgRmllbGRQYXRoU3BlY2lmaWVyPFMsIE4+ID0gRmllbGRQYXRoU3BlY2lmaWVyPFMsIE4+XG4+ID0gRlAgfCBGUFtdIHwgc3RyaW5nIHwgc3RyaW5nW10gfCB7IFtmaWVsZDogc3RyaW5nXTogbnVtYmVyIHwgYm9vbGVhbiB9O1xuXG4vKipcbiAqXG4gKi9cbnR5cGUgQ1ZhbHVlPFQ+ID0gVCBleHRlbmRzIERhdGVTdHJpbmdcbiAgPyBTZkRhdGVcbiAgOiBUIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhblxuICA/IFRcbiAgOiBuZXZlcjtcblxudHlwZSBDb25kT3A8VD4gPVxuICB8IFsnJGVxJywgQ1ZhbHVlPFQ+IHwgbnVsbF1cbiAgfCBbJyRuZScsIENWYWx1ZTxUPiB8IG51bGxdXG4gIHwgWyckZ3QnLCBDVmFsdWU8VD5dXG4gIHwgWyckZ3RlJywgQ1ZhbHVlPFQ+XVxuICB8IFsnJGx0JywgQ1ZhbHVlPFQ+XVxuICB8IFsnJGx0ZScsIENWYWx1ZTxUPl1cbiAgfCBbJyRsaWtlJywgVCBleHRlbmRzIHN0cmluZyA/IFQgOiBuZXZlcl1cbiAgfCBbJyRubGlrZScsIFQgZXh0ZW5kcyBzdHJpbmcgPyBUIDogbmV2ZXJdXG4gIHwgWyckaW4nLCBBcnJheTxDVmFsdWU8VD4+XVxuICB8IFsnJG5pbicsIEFycmF5PENWYWx1ZTxUPj5dXG4gIHwgWyckaW5jbHVkZXMnLCBUIGV4dGVuZHMgc3RyaW5nID8gVFtdIDogbmV2ZXJdXG4gIHwgWyckZXhjbHVkZXMnLCBUIGV4dGVuZHMgc3RyaW5nID8gVFtdIDogbmV2ZXJdXG4gIHwgWyckZXhpc3RzJywgYm9vbGVhbl07XG5cbnR5cGUgQ29uZFZhbHVlT2JqPFQsIE9wID0gQ29uZE9wPFQ+WzBdPiA9IE9wIGV4dGVuZHMgQ29uZE9wPFQ+WzBdXG4gID8gT3AgZXh0ZW5kcyBzdHJpbmdcbiAgICA/IHsgW0sgaW4gT3BdOiBFeHRyYWN0PENvbmRPcDxUPiwgW09wLCBhbnldPlsxXSB9XG4gICAgOiBuZXZlclxuICA6IG5ldmVyO1xuXG50eXBlIENvbmRWYWx1ZTxUPiA9IENWYWx1ZTxUPiB8IEFycmF5PENWYWx1ZTxUPj4gfCBudWxsIHwgQ29uZFZhbHVlT2JqPFQ+O1xuXG50eXBlIENvbmRpdGlvblNldDxSIGV4dGVuZHMgUmVjb3JkPiA9IHtcbiAgW0sgaW4ga2V5b2YgUl0/OiBDb25kVmFsdWU8UltLXT47XG59O1xuXG5leHBvcnQgdHlwZSBRdWVyeUNvbmRpdGlvbjxTIGV4dGVuZHMgU2NoZW1hLCBOIGV4dGVuZHMgU09iamVjdE5hbWVzPFM+PiA9XG4gIHwge1xuICAgICAgJG9yOiBRdWVyeUNvbmRpdGlvbjxTLCBOPltdO1xuICAgIH1cbiAgfCB7XG4gICAgICAkYW5kOiBRdWVyeUNvbmRpdGlvbjxTLCBOPltdO1xuICAgIH1cbiAgfCBDb25kaXRpb25TZXQ8U09iamVjdFJlY29yZDxTLCBOPj47XG5cbmV4cG9ydCB0eXBlIFF1ZXJ5U29ydDxcbiAgUyBleHRlbmRzIFNjaGVtYSxcbiAgTiBleHRlbmRzIFNPYmplY3ROYW1lczxTPixcbiAgUiBleHRlbmRzIFNPYmplY3RSZWNvcmQ8UywgTj4gPSBTT2JqZWN0UmVjb3JkPFMsIE4+XG4+ID1cbiAgfCB7XG4gICAgICBbSyBpbiBrZXlvZiBSXT86IFNvcnREaXI7XG4gICAgfVxuICB8IEFycmF5PFtrZXlvZiBSLCBTb3J0RGlyXT47XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IHR5cGUgUXVlcnlDb25maWc8XG4gIFMgZXh0ZW5kcyBTY2hlbWEsXG4gIE4gZXh0ZW5kcyBTT2JqZWN0TmFtZXM8Uz4sXG4gIEZQIGV4dGVuZHMgRmllbGRQYXRoU3BlY2lmaWVyPFMsIE4+ID0gRmllbGRQYXRoU3BlY2lmaWVyPFMsIE4+XG4+ID0ge1xuICBmaWVsZHM/OiBRdWVyeUZpZWxkPFMsIE4sIEZQPjtcbiAgaW5jbHVkZXM/OiB7XG4gICAgW0NSTiBpbiBDaGlsZFJlbGF0aW9uc2hpcE5hbWVzPFMsIE4+XT86IFF1ZXJ5Q29uZmlnPFxuICAgICAgUyxcbiAgICAgIENoaWxkUmVsYXRpb25zaGlwU09iamVjdE5hbWU8UywgTiwgQ1JOPlxuICAgID47XG4gIH07XG4gIHRhYmxlPzogc3RyaW5nO1xuICBjb25kaXRpb25zPzogUXVlcnlDb25kaXRpb248UywgTj47XG4gIHNvcnQ/OiBRdWVyeVNvcnQ8UywgTj47XG4gIGxpbWl0PzogbnVtYmVyO1xuICBvZmZzZXQ/OiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBRdWVyeU9wdGlvbnMgPSB7XG4gIGhlYWRlcnM6IHsgW25hbWU6IHN0cmluZ106IHN0cmluZyB9O1xuICBtYXhGZXRjaDogbnVtYmVyO1xuICBhdXRvRmV0Y2g6IGJvb2xlYW47XG4gIHNjYW5BbGw6IGJvb2xlYW47XG4gIHJlc3BvbnNlVGFyZ2V0OiBRdWVyeVJlc3BvbnNlVGFyZ2V0O1xufTtcblxuZXhwb3J0IHR5cGUgUXVlcnlSZXN1bHQ8UiBleHRlbmRzIFJlY29yZD4gPSB7XG4gIGRvbmU6IGJvb2xlYW47XG4gIHRvdGFsU2l6ZTogbnVtYmVyO1xuICByZWNvcmRzOiBSW107XG4gIG5leHRSZWNvcmRzVXJsPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgUXVlcnlFeHBsYWluUmVzdWx0ID0ge1xuICBwbGFuczogQXJyYXk8e1xuICAgIGNhcmRpbmFsaXR5OiBudW1iZXI7XG4gICAgZmllbGRzOiBzdHJpbmdbXTtcbiAgICBsZWFkaW5nT3BlcmF0aW9uVHlwZTogJ0luZGV4JyB8ICdPdGhlcicgfCAnU2hhcmluZycgfCAnVGFibGVTY2FuJztcbiAgICBub3RlczogQXJyYXk8e1xuICAgICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAgIGZpZWxkczogc3RyaW5nW107XG4gICAgICB0YWJsZUVudW1PcklkOiBzdHJpbmc7XG4gICAgfT47XG4gICAgcmVsYXRpdmVDb3N0OiBudW1iZXI7XG4gICAgc29iamVjdENhcmRpbmFsaXR5OiBudW1iZXI7XG4gICAgc29iamVjdFR5cGU6IHN0cmluZztcbiAgfT47XG59O1xuXG5jb25zdCBSZXNwb25zZVRhcmdldFZhbHVlcyA9IFtcbiAgJ1F1ZXJ5UmVzdWx0JyxcbiAgJ1JlY29yZHMnLFxuICAnU2luZ2xlUmVjb3JkJyxcbiAgJ0NvdW50Jyxcbl0gYXMgY29uc3Q7XG5cbmV4cG9ydCB0eXBlIFF1ZXJ5UmVzcG9uc2VUYXJnZXQgPSB0eXBlb2YgUmVzcG9uc2VUYXJnZXRWYWx1ZXNbbnVtYmVyXTtcblxuZXhwb3J0IGNvbnN0IFJlc3BvbnNlVGFyZ2V0czoge1xuICBbSyBpbiBRdWVyeVJlc3BvbnNlVGFyZ2V0XTogSztcbn0gPSBSZXNwb25zZVRhcmdldFZhbHVlcy5yZWR1Y2UoXG4gICh2YWx1ZXMsIHRhcmdldCkgPT4gKHsgLi4udmFsdWVzLCBbdGFyZ2V0XTogdGFyZ2V0IH0pLFxuICB7fSBhcyB7XG4gICAgW0sgaW4gUXVlcnlSZXNwb25zZVRhcmdldF06IEs7XG4gIH0sXG4pO1xuXG5leHBvcnQgdHlwZSBRdWVyeVJlc3BvbnNlPFxuICBSIGV4dGVuZHMgUmVjb3JkLFxuICBRUlQgZXh0ZW5kcyBRdWVyeVJlc3BvbnNlVGFyZ2V0ID0gUXVlcnlSZXNwb25zZVRhcmdldFxuPiA9IFFSVCBleHRlbmRzICdRdWVyeVJlc3VsdCdcbiAgPyBRdWVyeVJlc3VsdDxSPlxuICA6IFFSVCBleHRlbmRzICdSZWNvcmRzJ1xuICA/IFJbXVxuICA6IFFSVCBleHRlbmRzICdTaW5nbGVSZWNvcmQnXG4gID8gUiB8IG51bGxcbiAgOiBudW1iZXI7IC8vIFFSVCBleHRlbmRzICdDb3VudCdcblxuZXhwb3J0IHR5cGUgQnVsa0FwaVZlcnNpb24gPSAxIHwgMjtcblxuZXhwb3J0IHR5cGUgUXVlcnlEZXN0cm95T3B0aW9ucyA9IHtcbiAgYWxsb3dCdWxrPzogYm9vbGVhbjtcbiAgYnVsa1RocmVzaG9sZD86IG51bWJlcjtcbiAgYnVsa0FwaVZlcnNpb24/OiBCdWxrQXBpVmVyc2lvbjtcbn07XG5cbmV4cG9ydCB0eXBlIFF1ZXJ5VXBkYXRlT3B0aW9ucyA9IHtcbiAgYWxsb3dCdWxrPzogYm9vbGVhbjtcbiAgYnVsa1RocmVzaG9sZD86IG51bWJlcjtcbiAgYnVsa0FwaVZlcnNpb24/OiBCdWxrQXBpVmVyc2lvbjtcbn07XG5cbi8qKlxuICpcbiAqL1xuY29uc3QgREVGQVVMVF9CVUxLX1RIUkVTSE9MRCA9IDIwMDtcbmNvbnN0IERFRkFVTFRfQlVMS19BUElfVkVSU0lPTiA9IDE7XG5cbi8qKlxuICogUXVlcnlcbiAqL1xuZXhwb3J0IGNsYXNzIFF1ZXJ5PFxuICBTIGV4dGVuZHMgU2NoZW1hLFxuICBOIGV4dGVuZHMgU09iamVjdE5hbWVzPFM+LFxuICBSIGV4dGVuZHMgUmVjb3JkID0gUmVjb3JkLFxuICBRUlQgZXh0ZW5kcyBRdWVyeVJlc3BvbnNlVGFyZ2V0ID0gUXVlcnlSZXNwb25zZVRhcmdldFxuPiBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIHN0YXRpYyBfbG9nZ2VyID0gZ2V0TG9nZ2VyKCdxdWVyeScpO1xuXG4gIF9jb25uOiBDb25uZWN0aW9uPFM+O1xuICBfbG9nZ2VyOiBMb2dnZXI7XG4gIF9zb3FsOiBPcHRpb25hbDxzdHJpbmc+O1xuICBfbG9jYXRvcjogT3B0aW9uYWw8c3RyaW5nPjtcbiAgX2NvbmZpZzogU09RTFF1ZXJ5Q29uZmlnID0ge307XG4gIF9jaGlsZHJlbjogU3ViUXVlcnk8UywgTiwgUiwgUVJULCBhbnksIGFueSwgYW55PltdID0gW107XG4gIF9vcHRpb25zOiBRdWVyeU9wdGlvbnM7XG4gIF9leGVjdXRlZDogYm9vbGVhbiA9IGZhbHNlO1xuICBfZmluaXNoZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgX2NoYWluaW5nOiBib29sZWFuID0gZmFsc2U7XG4gIF9wcm9taXNlOiBQcm9taXNlPFF1ZXJ5UmVzcG9uc2U8UiwgUVJUPj47XG4gIF9zdHJlYW06IFNlcmlhbGl6YWJsZTxSPjtcblxuICB0b3RhbFNpemUgPSAwO1xuICB0b3RhbEZldGNoZWQgPSAwO1xuICByZWNvcmRzOiBSW10gPSBbXTtcblxuICAvKipcbiAgICpcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNvbm46IENvbm5lY3Rpb248Uz4sXG4gICAgY29uZmlnOiBzdHJpbmcgfCBRdWVyeUNvbmZpZzxTLCBOPiB8IHsgbG9jYXRvcjogc3RyaW5nIH0sXG4gICAgb3B0aW9ucz86IFBhcnRpYWw8UXVlcnlPcHRpb25zPixcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9jb25uID0gY29ubjtcbiAgICB0aGlzLl9sb2dnZXIgPSBjb25uLl9sb2dMZXZlbFxuICAgICAgPyBRdWVyeS5fbG9nZ2VyLmNyZWF0ZUluc3RhbmNlKGNvbm4uX2xvZ0xldmVsKVxuICAgICAgOiBRdWVyeS5fbG9nZ2VyO1xuICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5fc29xbCA9IGNvbmZpZztcbiAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZyhgY29uZmlnIGlzIHNvcWw6ICR7Y29uZmlnfWApO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIChjb25maWcgYXMgYW55KS5sb2NhdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgbG9jYXRvcjogc3RyaW5nID0gKGNvbmZpZyBhcyBhbnkpLmxvY2F0b3I7XG4gICAgICB0aGlzLl9sb2dnZXIuZGVidWcoYGNvbmZpZyBpcyBsb2NhdG9yOiAke2xvY2F0b3J9YCk7XG4gICAgICB0aGlzLl9sb2NhdG9yID0gbG9jYXRvci5pbmNsdWRlcygnLycpXG4gICAgICAgID8gdGhpcy51cmxUb0xvY2F0b3IobG9jYXRvcilcbiAgICAgICAgOiBsb2NhdG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9sb2dnZXIuZGVidWcoYGNvbmZpZyBpcyBRdWVyeUNvbmZpZzogJHtjb25maWd9YCk7XG4gICAgICBjb25zdCB7IGZpZWxkcywgaW5jbHVkZXMsIHNvcnQsIC4uLl9jb25maWcgfSA9IGNvbmZpZyBhcyBRdWVyeUNvbmZpZzxcbiAgICAgICAgUyxcbiAgICAgICAgTlxuICAgICAgPjtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IF9jb25maWc7XG4gICAgICB0aGlzLnNlbGVjdChmaWVsZHMpO1xuICAgICAgaWYgKGluY2x1ZGVzKSB7XG4gICAgICAgIHRoaXMuaW5jbHVkZUNoaWxkcmVuKGluY2x1ZGVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChzb3J0KSB7XG4gICAgICAgIHRoaXMuc29ydChzb3J0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fb3B0aW9ucyA9IHtcbiAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgbWF4RmV0Y2g6IDEwMDAwLFxuICAgICAgYXV0b0ZldGNoOiBmYWxzZSxcbiAgICAgIHNjYW5BbGw6IGZhbHNlLFxuICAgICAgcmVzcG9uc2VUYXJnZXQ6ICdRdWVyeVJlc3VsdCcsXG4gICAgICAuLi4ob3B0aW9ucyB8fCB7fSksXG4gICAgfSBhcyBRdWVyeU9wdGlvbnM7XG4gICAgLy8gcHJvbWlzZSBpbnN0YW5jZVxuICAgIHRoaXMuX3Byb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLm9uKCdyZXNwb25zZScsIHJlc29sdmUpO1xuICAgICAgdGhpcy5vbignZXJyb3InLCByZWplY3QpO1xuICAgIH0pO1xuICAgIHRoaXMuX3N0cmVhbSA9IG5ldyBTZXJpYWxpemFibGUoKTtcbiAgICB0aGlzLm9uKCdyZWNvcmQnLCAocmVjb3JkKSA9PiB0aGlzLl9zdHJlYW0ucHVzaChyZWNvcmQpKTtcbiAgICB0aGlzLm9uKCdlbmQnLCAoKSA9PiB0aGlzLl9zdHJlYW0ucHVzaChudWxsKSk7XG4gICAgdGhpcy5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLl9zdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0IGZpZWxkcyB0byBpbmNsdWRlIGluIHRoZSByZXR1cm5pbmcgcmVzdWx0XG4gICAqL1xuICBzZWxlY3Q8XG4gICAgUiBleHRlbmRzIFJlY29yZCA9IFJlY29yZCxcbiAgICBGUCBleHRlbmRzIEZpZWxkUGF0aFNwZWNpZmllcjxTLCBOPiA9IEZpZWxkUGF0aFNwZWNpZmllcjxTLCBOPixcbiAgICBGUEMgZXh0ZW5kcyBGaWVsZFByb2plY3Rpb25Db25maWcgPSBGaWVsZFBhdGhTY29wZWRQcm9qZWN0aW9uPFMsIE4sIEZQPixcbiAgICBSMiBleHRlbmRzIFNPYmplY3RSZWNvcmQ8UywgTiwgRlBDLCBSPiA9IFNPYmplY3RSZWNvcmQ8UywgTiwgRlBDLCBSPlxuICA+KGZpZWxkczogUXVlcnlGaWVsZDxTLCBOLCBGUD4gPSAnKicpOiBRdWVyeTxTLCBOLCBSMiwgUVJUPiB7XG4gICAgaWYgKHRoaXMuX3NvcWwpIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAnQ2Fubm90IHNldCBzZWxlY3QgZmllbGRzIGZvciB0aGUgcXVlcnkgd2hpY2ggaGFzIGFscmVhZHkgYnVpbHQgU09RTC4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdG9GaWVsZEFycmF5KGZpZWxkczogUXVlcnlGaWVsZDxTLCBOLCBGUD4pOiBzdHJpbmdbXSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGZpZWxkcyA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBmaWVsZHMuc3BsaXQoL1xccyosXFxzKi8pXG4gICAgICAgIDogQXJyYXkuaXNBcnJheShmaWVsZHMpXG4gICAgICAgID8gKGZpZWxkcyBhcyBBcnJheTxzdHJpbmcgfCBGUD4pXG4gICAgICAgICAgICAubWFwKHRvRmllbGRBcnJheSlcbiAgICAgICAgICAgIC5yZWR1Y2UoKGZzLCBmKSA9PiBbLi4uZnMsIC4uLmZdLCBbXSBhcyBzdHJpbmdbXSlcbiAgICAgICAgOiBPYmplY3QuZW50cmllcyhmaWVsZHMgYXMgeyBbbmFtZTogc3RyaW5nXTogUXVlcnlGaWVsZDxTLCBOLCBGUD4gfSlcbiAgICAgICAgICAgIC5tYXAoKFtmLCB2XSkgPT4ge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIHYgPT09ICdudW1iZXInIHx8IHR5cGVvZiB2ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdiA/IFtmXSA6IFtdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0b0ZpZWxkQXJyYXkodikubWFwKChwKSA9PiBgJHtmfS4ke3B9YCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAucmVkdWNlKChmcywgZikgPT4gWy4uLmZzLCAuLi5mXSwgW10gYXMgc3RyaW5nW10pO1xuICAgIH1cbiAgICBpZiAoZmllbGRzKSB7XG4gICAgICB0aGlzLl9jb25maWcuZmllbGRzID0gdG9GaWVsZEFycmF5KGZpZWxkcyk7XG4gICAgfVxuICAgIC8vIGZvcmNlIGNvbnZlcnQgcXVlcnkgcmVjb3JkIHR5cGUgd2l0aG91dCBjaGFuZ2luZyBpbnN0YW5jZTtcbiAgICByZXR1cm4gKHRoaXMgYXMgYW55KSBhcyBRdWVyeTxTLCBOLCBSMiwgUVJUPjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgcXVlcnkgY29uZGl0aW9ucyB0byBmaWx0ZXIgdGhlIHJlc3VsdCByZWNvcmRzXG4gICAqL1xuICB3aGVyZShjb25kaXRpb25zOiBRdWVyeUNvbmRpdGlvbjxTLCBOPiB8IHN0cmluZykge1xuICAgIGlmICh0aGlzLl9zb3FsKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBzZXQgd2hlcmUgY29uZGl0aW9ucyBmb3IgdGhlIHF1ZXJ5IHdoaWNoIGhhcyBhbHJlYWR5IGJ1aWx0IFNPUUwuJyxcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuX2NvbmZpZy5jb25kaXRpb25zID0gY29uZGl0aW9ucztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBMaW1pdCB0aGUgcmV0dXJuaW5nIHJlc3VsdFxuICAgKi9cbiAgbGltaXQobGltaXQ6IG51bWJlcikge1xuICAgIGlmICh0aGlzLl9zb3FsKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBzZXQgbGltaXQgZm9yIHRoZSBxdWVyeSB3aGljaCBoYXMgYWxyZWFkeSBidWlsdCBTT1FMLicsXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLl9jb25maWcubGltaXQgPSBsaW1pdDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTa2lwIHJlY29yZHNcbiAgICovXG4gIHNraXAob2Zmc2V0OiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5fc29xbCkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICdDYW5ub3Qgc2V0IHNraXAvb2Zmc2V0IGZvciB0aGUgcXVlcnkgd2hpY2ggaGFzIGFscmVhZHkgYnVpbHQgU09RTC4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5fY29uZmlnLm9mZnNldCA9IG9mZnNldDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTeW5vbnltIG9mIFF1ZXJ5I3NraXAoKVxuICAgKi9cbiAgb2Zmc2V0ID0gdGhpcy5za2lwO1xuXG4gIC8qKlxuICAgKiBTZXQgcXVlcnkgc29ydCB3aXRoIGRpcmVjdGlvblxuICAgKi9cbiAgc29ydChzb3J0OiBRdWVyeVNvcnQ8UywgTj4pOiB0aGlzO1xuICBzb3J0KHNvcnQ6IHN0cmluZyk6IHRoaXM7XG4gIHNvcnQoc29ydDogU09iamVjdEZpZWxkTmFtZXM8UywgTj4sIGRpcjogU29ydERpcik6IHRoaXM7XG4gIHNvcnQoc29ydDogc3RyaW5nLCBkaXI6IFNvcnREaXIpOiB0aGlzO1xuICBzb3J0KFxuICAgIHNvcnQ6IFF1ZXJ5U29ydDxTLCBOPiB8IFNPYmplY3RGaWVsZE5hbWVzPFMsIE4+IHwgc3RyaW5nLFxuICAgIGRpcj86IFNvcnREaXIsXG4gICkge1xuICAgIGlmICh0aGlzLl9zb3FsKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBzZXQgc29ydCBmb3IgdGhlIHF1ZXJ5IHdoaWNoIGhhcyBhbHJlYWR5IGJ1aWx0IFNPUUwuJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc29ydCA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIGRpciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMuX2NvbmZpZy5zb3J0ID0gW1tzb3J0LCBkaXJdXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY29uZmlnLnNvcnQgPSBzb3J0IGFzIHN0cmluZyB8IHsgW2ZpZWxkOiBzdHJpbmddOiBTb3J0RGlyIH07XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFN5bm9ueW0gb2YgUXVlcnkjc29ydCgpXG4gICAqL1xuICBvcmRlcmJ5OiB0eXBlb2YgUXVlcnkucHJvdG90eXBlLnNvcnQgPSB0aGlzLnNvcnQ7XG5cbiAgLyoqXG4gICAqIEluY2x1ZGUgY2hpbGQgcmVsYXRpb25zaGlwIHF1ZXJ5IGFuZCBtb3ZlIGRvd24gdG8gdGhlIGNoaWxkIHF1ZXJ5IGNvbnRleHRcbiAgICovXG4gIGluY2x1ZGU8XG4gICAgQ1JOIGV4dGVuZHMgQ2hpbGRSZWxhdGlvbnNoaXBOYW1lczxTLCBOPixcbiAgICBDTiBleHRlbmRzIENoaWxkUmVsYXRpb25zaGlwU09iamVjdE5hbWU8UywgTiwgQ1JOPixcbiAgICBDRlAgZXh0ZW5kcyBGaWVsZFBhdGhTcGVjaWZpZXI8UywgQ04+ID0gRmllbGRQYXRoU3BlY2lmaWVyPFMsIENOPixcbiAgICBDRlBDIGV4dGVuZHMgRmllbGRQcm9qZWN0aW9uQ29uZmlnID0gRmllbGRQYXRoU2NvcGVkUHJvamVjdGlvbjxTLCBDTiwgQ0ZQPixcbiAgICBDUiBleHRlbmRzIFJlY29yZCA9IFNPYmplY3RSZWNvcmQ8UywgQ04sIENGUEM+XG4gID4oXG4gICAgY2hpbGRSZWxOYW1lOiBDUk4sXG4gICAgY29uZGl0aW9ucz86IE9wdGlvbmFsPFF1ZXJ5Q29uZGl0aW9uPFMsIENOPj4sXG4gICAgZmllbGRzPzogT3B0aW9uYWw8UXVlcnlGaWVsZDxTLCBDTiwgQ0ZQPj4sXG4gICAgb3B0aW9ucz86IHsgbGltaXQ/OiBudW1iZXI7IG9mZnNldD86IG51bWJlcjsgc29ydD86IFF1ZXJ5U29ydDxTLCBDTj4gfSxcbiAgKTogU3ViUXVlcnk8UywgTiwgUiwgUVJULCBDUk4sIENOLCBDUj47XG4gIGluY2x1ZGU8XG4gICAgQ1JOIGV4dGVuZHMgQ2hpbGRSZWxhdGlvbnNoaXBOYW1lczxTLCBOPixcbiAgICBDTiBleHRlbmRzIFNPYmplY3ROYW1lczxTPixcbiAgICBDUiBleHRlbmRzIFJlY29yZCA9IFNPYmplY3RSZWNvcmQ8UywgQ04+XG4gID4oXG4gICAgY2hpbGRSZWxOYW1lOiBzdHJpbmcsXG4gICAgY29uZGl0aW9ucz86IE9wdGlvbmFsPFF1ZXJ5Q29uZGl0aW9uPFMsIENOPj4sXG4gICAgZmllbGRzPzogT3B0aW9uYWw8UXVlcnlGaWVsZDxTLCBDTj4+LFxuICAgIG9wdGlvbnM/OiB7IGxpbWl0PzogbnVtYmVyOyBvZmZzZXQ/OiBudW1iZXI7IHNvcnQ/OiBRdWVyeVNvcnQ8UywgQ04+IH0sXG4gICk6IFN1YlF1ZXJ5PFMsIE4sIFIsIFFSVCwgQ1JOLCBDTiwgQ1I+O1xuXG4gIGluY2x1ZGU8XG4gICAgQ1JOIGV4dGVuZHMgQ2hpbGRSZWxhdGlvbnNoaXBOYW1lczxTLCBOPixcbiAgICBDTiBleHRlbmRzIENoaWxkUmVsYXRpb25zaGlwU09iamVjdE5hbWU8UywgTiwgQ1JOPixcbiAgICBDRlAgZXh0ZW5kcyBGaWVsZFBhdGhTcGVjaWZpZXI8UywgQ04+ID0gRmllbGRQYXRoU3BlY2lmaWVyPFMsIENOPixcbiAgICBDRlBDIGV4dGVuZHMgRmllbGRQcm9qZWN0aW9uQ29uZmlnID0gRmllbGRQYXRoU2NvcGVkUHJvamVjdGlvbjxTLCBDTiwgQ0ZQPixcbiAgICBDUiBleHRlbmRzIFJlY29yZCA9IFNPYmplY3RSZWNvcmQ8UywgQ04sIENGUEM+XG4gID4oXG4gICAgY2hpbGRSZWxOYW1lOiBDUk4gfCBzdHJpbmcsXG4gICAgY29uZGl0aW9ucz86IE9wdGlvbmFsPFF1ZXJ5Q29uZGl0aW9uPFMsIENOPj4sXG4gICAgZmllbGRzPzogT3B0aW9uYWw8UXVlcnlGaWVsZDxTLCBDTiwgQ0ZQPj4sXG4gICAgb3B0aW9uczogeyBsaW1pdD86IG51bWJlcjsgb2Zmc2V0PzogbnVtYmVyOyBzb3J0PzogUXVlcnlTb3J0PFMsIENOPiB9ID0ge30sXG4gICk6IFN1YlF1ZXJ5PFMsIE4sIFIsIFFSVCwgQ1JOLCBDTiwgQ1I+IHtcbiAgICBpZiAodGhpcy5fc29xbCkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICdDYW5ub3QgaW5jbHVkZSBjaGlsZCByZWxhdGlvbnNoaXAgaW50byB0aGUgcXVlcnkgd2hpY2ggaGFzIGFscmVhZHkgYnVpbHQgU09RTC4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgY2hpbGRDb25maWc6IFF1ZXJ5Q29uZmlnPFMsIENOLCBDRlA+ID0ge1xuICAgICAgZmllbGRzOiBmaWVsZHMgPT09IG51bGwgPyB1bmRlZmluZWQgOiBmaWVsZHMsXG4gICAgICB0YWJsZTogY2hpbGRSZWxOYW1lLFxuICAgICAgY29uZGl0aW9uczogY29uZGl0aW9ucyA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IGNvbmRpdGlvbnMsXG4gICAgICBsaW1pdDogb3B0aW9ucy5saW1pdCxcbiAgICAgIG9mZnNldDogb3B0aW9ucy5vZmZzZXQsXG4gICAgICBzb3J0OiBvcHRpb25zLnNvcnQsXG4gICAgfTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICBjb25zdCBjaGlsZFF1ZXJ5ID0gbmV3IFN1YlF1ZXJ5PFMsIE4sIFIsIFFSVCwgQ1JOLCBDTiwgQ1I+KFxuICAgICAgdGhpcy5fY29ubixcbiAgICAgIGNoaWxkUmVsTmFtZSBhcyBDUk4sXG4gICAgICBjaGlsZENvbmZpZyxcbiAgICAgIHRoaXMsXG4gICAgKTtcbiAgICB0aGlzLl9jaGlsZHJlbi5wdXNoKGNoaWxkUXVlcnkpO1xuICAgIHJldHVybiBjaGlsZFF1ZXJ5O1xuICB9XG5cbiAgLyoqXG4gICAqIEluY2x1ZGUgY2hpbGQgcmVsYXRpb25zaGlwIHF1ZXJpZXMsIGJ1dCBub3QgbW92aW5nIGRvd24gdG8gdGhlIGNoaWxkcmVuIGNvbnRleHRcbiAgICovXG4gIGluY2x1ZGVDaGlsZHJlbihcbiAgICBpbmNsdWRlczoge1xuICAgICAgW0NSTiBpbiBDaGlsZFJlbGF0aW9uc2hpcE5hbWVzPFMsIE4+XT86IFF1ZXJ5Q29uZmlnPFxuICAgICAgICBTLFxuICAgICAgICBDaGlsZFJlbGF0aW9uc2hpcFNPYmplY3ROYW1lPFMsIE4sIENSTj5cbiAgICAgID47XG4gICAgfSxcbiAgKSB7XG4gICAgdHlwZSBDUk4gPSBDaGlsZFJlbGF0aW9uc2hpcE5hbWVzPFMsIE4+O1xuICAgIGlmICh0aGlzLl9zb3FsKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBpbmNsdWRlIGNoaWxkIHJlbGF0aW9uc2hpcCBpbnRvIHRoZSBxdWVyeSB3aGljaCBoYXMgYWxyZWFkeSBidWlsdCBTT1FMLicsXG4gICAgICApO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGNybmFtZSBvZiBPYmplY3Qua2V5cyhpbmNsdWRlcykgYXMgQ1JOW10pIHtcbiAgICAgIGNvbnN0IHsgY29uZGl0aW9ucywgZmllbGRzLCAuLi5vcHRpb25zIH0gPSBpbmNsdWRlc1tcbiAgICAgICAgY3JuYW1lXG4gICAgICBdIGFzIFF1ZXJ5Q29uZmlnPFMsIENoaWxkUmVsYXRpb25zaGlwU09iamVjdE5hbWU8UywgTiwgQ1JOPj47XG4gICAgICB0aGlzLmluY2x1ZGUoY3JuYW1lLCBjb25kaXRpb25zLCBmaWVsZHMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0aW5nIG1heEZldGNoIHF1ZXJ5IG9wdGlvblxuICAgKi9cbiAgbWF4RmV0Y2gobWF4RmV0Y2g6IG51bWJlcikge1xuICAgIHRoaXMuX29wdGlvbnMubWF4RmV0Y2ggPSBtYXhGZXRjaDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTd2l0Y2hpbmcgYXV0byBmZXRjaCBtb2RlXG4gICAqL1xuICBhdXRvRmV0Y2goYXV0b0ZldGNoOiBib29sZWFuKSB7XG4gICAgdGhpcy5fb3B0aW9ucy5hdXRvRmV0Y2ggPSBhdXRvRmV0Y2g7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGZsYWcgdG8gc2NhbiBhbGwgcmVjb3JkcyBpbmNsdWRpbmcgZGVsZXRlZCBhbmQgYXJjaGl2ZWQuXG4gICAqL1xuICBzY2FuQWxsKHNjYW5BbGw6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9vcHRpb25zLnNjYW5BbGwgPSBzY2FuQWxsO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBzZXRSZXNwb25zZVRhcmdldDxRUlQxIGV4dGVuZHMgUXVlcnlSZXNwb25zZVRhcmdldD4oXG4gICAgcmVzcG9uc2VUYXJnZXQ6IFFSVDEsXG4gICk6IFF1ZXJ5PFMsIE4sIFIsIFFSVDE+IHtcbiAgICBpZiAocmVzcG9uc2VUYXJnZXQgaW4gUmVzcG9uc2VUYXJnZXRzKSB7XG4gICAgICB0aGlzLl9vcHRpb25zLnJlc3BvbnNlVGFyZ2V0ID0gcmVzcG9uc2VUYXJnZXQ7XG4gICAgfVxuICAgIC8vIGZvcmNlIGNoYW5nZSBxdWVyeSByZXNwb25zZSB0YXJnZXQgd2l0aG91dCBjaGFuZ2luZyBpbnN0YW5jZVxuICAgIHJldHVybiAodGhpcyBhcyBRdWVyeTxTLCBOLCBSPikgYXMgUXVlcnk8UywgTiwgUiwgUVJUMT47XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZSBxdWVyeSBhbmQgZmV0Y2ggcmVjb3JkcyBmcm9tIHNlcnZlci5cbiAgICovXG4gIGV4ZWN1dGU8UVJUMSBleHRlbmRzIFF1ZXJ5UmVzcG9uc2VUYXJnZXQgPSBRUlQ+KFxuICAgIG9wdGlvbnNfOiBQYXJ0aWFsPFF1ZXJ5T3B0aW9ucz4gJiB7IHJlc3BvbnNlVGFyZ2V0PzogUVJUMSB9ID0ge30sXG4gICk6IFF1ZXJ5PFMsIE4sIFIsIFFSVDE+IHtcbiAgICBpZiAodGhpcy5fZXhlY3V0ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncmUtZXhlY3V0aW5nIGFscmVhZHkgZXhlY3V0ZWQgcXVlcnknKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZmluaXNoZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZXhlY3V0aW5nIGFscmVhZHkgY2xvc2VkIHF1ZXJ5Jyk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIGhlYWRlcnM6IG9wdGlvbnNfLmhlYWRlcnMgfHwgdGhpcy5fb3B0aW9ucy5oZWFkZXJzLFxuICAgICAgcmVzcG9uc2VUYXJnZXQ6IG9wdGlvbnNfLnJlc3BvbnNlVGFyZ2V0IHx8IHRoaXMuX29wdGlvbnMucmVzcG9uc2VUYXJnZXQsXG4gICAgICBhdXRvRmV0Y2g6IG9wdGlvbnNfLmF1dG9GZXRjaCB8fCB0aGlzLl9vcHRpb25zLmF1dG9GZXRjaCxcbiAgICAgIG1heEZldGNoOiBvcHRpb25zXy5tYXhGZXRjaCB8fCB0aGlzLl9vcHRpb25zLm1heEZldGNoLFxuICAgICAgc2NhbkFsbDogb3B0aW9uc18uc2NhbkFsbCB8fCB0aGlzLl9vcHRpb25zLnNjYW5BbGwsXG4gICAgfTtcblxuICAgIC8vIGNvbGxlY3QgZmV0Y2hlZCByZWNvcmRzIGluIGFycmF5XG4gICAgLy8gb25seSB3aGVuIHJlc3BvbnNlIHRhcmdldCBpcyBSZWNvcmRzIGFuZFxuICAgIC8vIGVpdGhlciBjYWxsYmFjayBvciBjaGFpbmluZyBwcm9taXNlcyBhcmUgYXZhaWxhYmxlIHRvIHRoaXMgcXVlcnkuXG4gICAgdGhpcy5vbmNlKCdmZXRjaCcsICgpID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgb3B0aW9ucy5yZXNwb25zZVRhcmdldCA9PT0gUmVzcG9uc2VUYXJnZXRzLlJlY29yZHMgJiZcbiAgICAgICAgdGhpcy5fY2hhaW5pbmdcbiAgICAgICkge1xuICAgICAgICB0aGlzLl9sb2dnZXIuZGVidWcoJy0tLSBjb2xsZWN0aW5nIGFsbCBmZXRjaGVkIHJlY29yZHMgLS0tJyk7XG4gICAgICAgIGNvbnN0IHJlY29yZHM6IFJlY29yZFtdID0gW107XG4gICAgICAgIGNvbnN0IG9uUmVjb3JkID0gKHJlY29yZDogUmVjb3JkKSA9PiByZWNvcmRzLnB1c2gocmVjb3JkKTtcbiAgICAgICAgdGhpcy5vbigncmVjb3JkJywgb25SZWNvcmQpO1xuICAgICAgICB0aGlzLm9uY2UoJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKCdyZWNvcmQnLCBvblJlY29yZCk7XG4gICAgICAgICAgdGhpcy5lbWl0KCdyZXNwb25zZScsIHJlY29yZHMsIHRoaXMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGZsYWcgdG8gcHJldmVudCByZS1leGVjdXRpb25cbiAgICB0aGlzLl9leGVjdXRlZCA9IHRydWU7XG5cbiAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gc3RhcnQgYWN0dWFsIHF1ZXJ5XG4gICAgICB0aGlzLl9sb2dnZXIuZGVidWcoJz4+PiBRdWVyeSBzdGFydCA+Pj4nKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHRoaXMuX2V4ZWN1dGUob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZygnKioqIFF1ZXJ5IGZpbmlzaGVkICoqKicpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5fbG9nZ2VyLmRlYnVnKCctLS0gUXVlcnkgZXJyb3IgLS0tJywgZXJyb3IpO1xuICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgfVxuICAgIH0pKCk7XG5cbiAgICAvLyByZXR1cm4gUXVlcnkgaW5zdGFuY2UgZm9yIGNoYWluaW5nXG4gICAgcmV0dXJuICh0aGlzIGFzIFF1ZXJ5PFMsIE4sIFI+KSBhcyBRdWVyeTxTLCBOLCBSLCBRUlQxPjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTeW5vbnltIG9mIFF1ZXJ5I2V4ZWN1dGUoKVxuICAgKi9cbiAgZXhlYyA9IHRoaXMuZXhlY3V0ZTtcblxuICAvKipcbiAgICogU3lub255bSBvZiBRdWVyeSNleGVjdXRlKClcbiAgICovXG4gIHJ1biA9IHRoaXMuZXhlY3V0ZTtcblxuICBwcml2YXRlIGxvY2F0b3JUb1VybCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbG9jYXRvclxuICAgICAgPyBbdGhpcy5fY29ubi5fYmFzZVVybCgpLCAnL3F1ZXJ5LycsIHRoaXMuX2xvY2F0b3JdLmpvaW4oJycpXG4gICAgICA6ICcnO1xuICB9XG5cbiAgcHJpdmF0ZSB1cmxUb0xvY2F0b3IodXJsOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdXJsLnNwbGl0KCcvJykucG9wKCk7XG4gIH1cblxuICBwcml2YXRlIGNvbnN0cnVjdFJlc3BvbnNlKFxuICAgIHJhd0RvbmU6IGJvb2xlYW4sXG4gICAgcmVzcG9uc2VUYXJnZXQ6IFF1ZXJ5UmVzcG9uc2VUYXJnZXRbM10sXG4gICk6IG51bWJlcjtcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RSZXNwb25zZShcbiAgICByYXdEb25lOiBib29sZWFuLFxuICAgIHJlc3BvbnNlVGFyZ2V0OiBRdWVyeVJlc3BvbnNlVGFyZ2V0WzJdLFxuICApOiBSO1xuICBwcml2YXRlIGNvbnN0cnVjdFJlc3BvbnNlKFxuICAgIHJhd0RvbmU6IGJvb2xlYW4sXG4gICAgcmVzcG9uc2VUYXJnZXQ6IFF1ZXJ5UmVzcG9uc2VUYXJnZXRbMV0sXG4gICk6IFJbXTtcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RSZXNwb25zZShcbiAgICByYXdEb25lOiBib29sZWFuLFxuICAgIHJlc3BvbnNlVGFyZ2V0OiBRdWVyeVJlc3BvbnNlVGFyZ2V0WzBdLFxuICApOiBRdWVyeVJlc3VsdDxSPjtcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RSZXNwb25zZShcbiAgICByYXdEb25lOiBib29sZWFuLFxuICAgIHJlc3BvbnNlVGFyZ2V0OiBRdWVyeVJlc3BvbnNlVGFyZ2V0LFxuICApOiBRdWVyeVJlc3VsdDxSPiB8IFJbXSB8IG51bWJlciB8IFIge1xuICAgIHN3aXRjaCAocmVzcG9uc2VUYXJnZXQpIHtcbiAgICAgIGNhc2UgJ0NvdW50JzpcbiAgICAgICAgcmV0dXJuIHRoaXMudG90YWxTaXplO1xuICAgICAgY2FzZSAnU2luZ2xlUmVjb3JkJzpcbiAgICAgICAgcmV0dXJuIHRoaXMucmVjb3Jkcz8uWzBdID8/IG51bGw7XG4gICAgICBjYXNlICdSZWNvcmRzJzpcbiAgICAgICAgcmV0dXJuIHRoaXMucmVjb3JkcztcbiAgICAgIC8vIFF1ZXJ5UmVzdWx0IGlzIGRlZmF1bHQgcmVzcG9uc2UgdGFyZ2V0XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLntcbiAgICAgICAgICAgIHJlY29yZHM6IHRoaXMucmVjb3JkcyxcbiAgICAgICAgICAgIHRvdGFsU2l6ZTogdGhpcy50b3RhbFNpemUsXG4gICAgICAgICAgICBkb25lOiByYXdEb25lID8/IHRydWUsIC8vIHdoZW4gbm8gcmVjb3JkcywgZG9uZSBpcyBvbWl0dGVkXG4gICAgICAgICAgfSxcbiAgICAgICAgICAuLi4odGhpcy5fbG9jYXRvciA/IHsgbmV4dFJlY29yZHNVcmw6IHRoaXMubG9jYXRvclRvVXJsKCkgfSA6IHt9KSxcbiAgICAgICAgfTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBhc3luYyBfZXhlY3V0ZShvcHRpb25zOiBRdWVyeU9wdGlvbnMpOiBQcm9taXNlPFF1ZXJ5UmVzcG9uc2U8Uj4+IHtcbiAgICBjb25zdCB7IGhlYWRlcnMsIHJlc3BvbnNlVGFyZ2V0LCBhdXRvRmV0Y2gsIG1heEZldGNoLCBzY2FuQWxsIH0gPSBvcHRpb25zO1xuICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZygnZXhlY3V0ZSB3aXRoIG9wdGlvbnMnLCBvcHRpb25zKTtcbiAgICBsZXQgdXJsO1xuICAgIGlmICh0aGlzLl9sb2NhdG9yKSB7XG4gICAgICB1cmwgPSB0aGlzLmxvY2F0b3JUb1VybCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzb3FsID0gYXdhaXQgdGhpcy50b1NPUUwoKTtcbiAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZyhgU09RTCA9ICR7c29xbH1gKTtcbiAgICAgIHVybCA9IFtcbiAgICAgICAgdGhpcy5fY29ubi5fYmFzZVVybCgpLFxuICAgICAgICAnLycsXG4gICAgICAgIHNjYW5BbGwgPyAncXVlcnlBbGwnIDogJ3F1ZXJ5JyxcbiAgICAgICAgJz9xPScsXG4gICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzb3FsKSxcbiAgICAgIF0uam9pbignJyk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLl9jb25uLnJlcXVlc3Q8Uj4oeyBtZXRob2Q6ICdHRVQnLCB1cmwsIGhlYWRlcnMgfSk7XG4gICAgdGhpcy5lbWl0KCdmZXRjaCcpO1xuICAgIHRoaXMudG90YWxTaXplID0gZGF0YS50b3RhbFNpemU7XG4gICAgdGhpcy5yZWNvcmRzID0gdGhpcy5yZWNvcmRzPy5jb25jYXQoXG4gICAgICBtYXhGZXRjaCAtIHRoaXMucmVjb3Jkcy5sZW5ndGggPiBkYXRhLnJlY29yZHMubGVuZ3RoXG4gICAgICAgID8gZGF0YS5yZWNvcmRzXG4gICAgICAgIDogZGF0YS5yZWNvcmRzLnNsaWNlKDAsIG1heEZldGNoIC0gdGhpcy5yZWNvcmRzLmxlbmd0aCksXG4gICAgKTtcbiAgICB0aGlzLl9sb2NhdG9yID0gZGF0YS5uZXh0UmVjb3Jkc1VybFxuICAgICAgPyB0aGlzLnVybFRvTG9jYXRvcihkYXRhLm5leHRSZWNvcmRzVXJsKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZmluaXNoZWQgPVxuICAgICAgdGhpcy5fZmluaXNoZWQgfHxcbiAgICAgIGRhdGEuZG9uZSB8fFxuICAgICAgIWF1dG9GZXRjaCB8fFxuICAgICAgLy8gdGhpcyBpcyB3aGF0IHRoZSByZXNwb25zZSBsb29rcyBsaWtlIHdoZW4gdGhlcmUgYXJlIG5vIHJlc3VsdHNcbiAgICAgIChkYXRhLnJlY29yZHMubGVuZ3RoID09PSAwICYmIGRhdGEuZG9uZSA9PT0gdW5kZWZpbmVkKTtcblxuICAgIC8vIHN0cmVhbWluZyByZWNvcmQgaW5zdGFuY2VzXG4gICAgY29uc3QgbnVtUmVjb3JkcyA9IGRhdGEucmVjb3Jkcz8ubGVuZ3RoID8/IDA7XG4gICAgbGV0IHRvdGFsRmV0Y2hlZCA9IHRoaXMudG90YWxGZXRjaGVkO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtUmVjb3JkczsgaSsrKSB7XG4gICAgICBpZiAodG90YWxGZXRjaGVkID49IG1heEZldGNoKSB7XG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjb25zdCByZWNvcmQgPSBkYXRhLnJlY29yZHNbaV07XG4gICAgICB0aGlzLmVtaXQoJ3JlY29yZCcsIHJlY29yZCwgdG90YWxGZXRjaGVkLCB0aGlzKTtcbiAgICAgIHRvdGFsRmV0Y2hlZCArPSAxO1xuICAgIH1cbiAgICB0aGlzLnRvdGFsRmV0Y2hlZCA9IHRvdGFsRmV0Y2hlZDtcblxuICAgIGlmICh0aGlzLl9maW5pc2hlZCkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLmNvbnN0cnVjdFJlc3BvbnNlKGRhdGEuZG9uZSwgcmVzcG9uc2VUYXJnZXQpO1xuICAgICAgLy8gb25seSBmaXJlIHJlc3BvbnNlIGV2ZW50IHdoZW4gaXQgc2hvdWxkIGJlIG5vdGlmaWVkIHBlciBmZXRjaFxuICAgICAgaWYgKHJlc3BvbnNlVGFyZ2V0ICE9PSBSZXNwb25zZVRhcmdldHMuUmVjb3Jkcykge1xuICAgICAgICB0aGlzLmVtaXQoJ3Jlc3BvbnNlJywgcmVzcG9uc2UsIHRoaXMpO1xuICAgICAgfVxuICAgICAgdGhpcy5lbWl0KCdlbmQnKTtcbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUob3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9idGFpbiByZWFkYWJsZSBzdHJlYW0gaW5zdGFuY2VcbiAgICovXG4gIHN0cmVhbSh0eXBlOiAncmVjb3JkJyk6IFNlcmlhbGl6YWJsZTxSPjtcbiAgc3RyZWFtKHR5cGU6ICdjc3YnKTogUmVhZGFibGU7XG4gIHN0cmVhbSh0eXBlOiAncmVjb3JkJyB8ICdjc3YnID0gJ2NzdicpIHtcbiAgICBpZiAoIXRoaXMuX2ZpbmlzaGVkICYmICF0aGlzLl9leGVjdXRlZCkge1xuICAgICAgdGhpcy5leGVjdXRlKHsgYXV0b0ZldGNoOiB0cnVlIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZSA9PT0gJ3JlY29yZCcgPyB0aGlzLl9zdHJlYW0gOiB0aGlzLl9zdHJlYW0uc3RyZWFtKHR5cGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBpcGUgdGhlIHF1ZXJpZWQgcmVjb3JkcyB0byBhbm90aGVyIHN0cmVhbVxuICAgKiBUaGlzIGlzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5OyBRdWVyeSBpcyBub3QgYSByZWNvcmQgc3RyZWFtIGluc3RhbmNlIGFueW1vcmUgaW4gMi4wLlxuICAgKiBJZiB5b3Ugd2FudCBhIHJlY29yZCBzdHJlYW0gaW5zdGFuY2UsIHVzZSBgUXVlcnkjc3RyZWFtKCdyZWNvcmQnKWAuXG4gICAqL1xuICBwaXBlKHN0cmVhbTogTm9kZUpTLldyaXRhYmxlU3RyZWFtKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RyZWFtKCdyZWNvcmQnKS5waXBlKHN0cmVhbSk7XG4gIH1cblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgYXN5bmMgX2V4cGFuZEZpZWxkcyhzb2JqZWN0Xz86IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLl9zb3FsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdDYW5ub3QgZXhwYW5kIGZpZWxkcyBmb3IgdGhlIHF1ZXJ5IHdoaWNoIGhhcyBhbHJlYWR5IGJ1aWx0IFNPUUwuJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHsgZmllbGRzID0gW10sIHRhYmxlID0gJycgfSA9IHRoaXMuX2NvbmZpZztcbiAgICBjb25zdCBzb2JqZWN0ID0gc29iamVjdF8gfHwgdGFibGU7XG4gICAgdGhpcy5fbG9nZ2VyLmRlYnVnKFxuICAgICAgYF9leHBhbmRGaWVsZHM6IHNvYmplY3QgPSAke3NvYmplY3R9LCBmaWVsZHMgPSAke2ZpZWxkcy5qb2luKCcsICcpfWAsXG4gICAgKTtcbiAgICBjb25zdCBbZWZpZWxkc10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICB0aGlzLl9leHBhbmRBc3Rlcmlza0ZpZWxkcyhzb2JqZWN0LCBmaWVsZHMpLFxuICAgICAgLi4udGhpcy5fY2hpbGRyZW4ubWFwKGFzeW5jIChjaGlsZFF1ZXJ5KSA9PiB7XG4gICAgICAgIGF3YWl0IGNoaWxkUXVlcnkuX2V4cGFuZEZpZWxkcygpO1xuICAgICAgICByZXR1cm4gW10gYXMgc3RyaW5nW107XG4gICAgICB9KSxcbiAgICBdKTtcbiAgICB0aGlzLl9jb25maWcuZmllbGRzID0gZWZpZWxkcztcbiAgICB0aGlzLl9jb25maWcuaW5jbHVkZXMgPSB0aGlzLl9jaGlsZHJlblxuICAgICAgLm1hcCgoY3F1ZXJ5KSA9PiB7XG4gICAgICAgIGNvbnN0IGNjb25maWcgPSBjcXVlcnkuX3F1ZXJ5Ll9jb25maWc7XG4gICAgICAgIHJldHVybiBbY2NvbmZpZy50YWJsZSwgY2NvbmZpZ10gYXMgW3N0cmluZywgU09RTFF1ZXJ5Q29uZmlnXTtcbiAgICAgIH0pXG4gICAgICAucmVkdWNlKFxuICAgICAgICAoaW5jbHVkZXMsIFtjdGFibGUsIGNjb25maWddKSA9PiAoe1xuICAgICAgICAgIC4uLmluY2x1ZGVzLFxuICAgICAgICAgIFtjdGFibGVdOiBjY29uZmlnLFxuICAgICAgICB9KSxcbiAgICAgICAge30gYXMgeyBbbmFtZTogc3RyaW5nXTogU09RTFF1ZXJ5Q29uZmlnIH0sXG4gICAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBhc3luYyBfZmluZFJlbGF0aW9uT2JqZWN0KHJlbE5hbWU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgdGFibGUgPSB0aGlzLl9jb25maWcudGFibGU7XG4gICAgaWYgKCF0YWJsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB0YWJsZSBpbmZvcm1hdGlvbiBwcm92aWRlZCBpbiB0aGUgcXVlcnknKTtcbiAgICB9XG4gICAgdGhpcy5fbG9nZ2VyLmRlYnVnKFxuICAgICAgYGZpbmRpbmcgdGFibGUgZm9yIHJlbGF0aW9uIFwiJHtyZWxOYW1lfVwiIGluIFwiJHt0YWJsZX1cIi4uLmAsXG4gICAgKTtcbiAgICBjb25zdCBzb2JqZWN0ID0gYXdhaXQgdGhpcy5fY29ubi5kZXNjcmliZSQodGFibGUpO1xuICAgIGNvbnN0IHVwcGVyUm5hbWUgPSByZWxOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgZm9yIChjb25zdCBjciBvZiBzb2JqZWN0LmNoaWxkUmVsYXRpb25zaGlwcykge1xuICAgICAgaWYgKFxuICAgICAgICAoY3IucmVsYXRpb25zaGlwTmFtZSB8fCAnJykudG9VcHBlckNhc2UoKSA9PT0gdXBwZXJSbmFtZSAmJlxuICAgICAgICBjci5jaGlsZFNPYmplY3RcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gY3IuY2hpbGRTT2JqZWN0O1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGNoaWxkIHJlbGF0aW9uc2hpcCBmb3VuZDogJHtyZWxOYW1lfWApO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBhc3luYyBfZXhwYW5kQXN0ZXJpc2tGaWVsZHMoXG4gICAgc29iamVjdDogc3RyaW5nLFxuICAgIGZpZWxkczogc3RyaW5nW10sXG4gICk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICBjb25zdCBleHBhbmRlZEZpZWxkcyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgZmllbGRzLm1hcChhc3luYyAoZmllbGQpID0+IHRoaXMuX2V4cGFuZEFzdGVyaXNrRmllbGQoc29iamVjdCwgZmllbGQpKSxcbiAgICApO1xuICAgIHJldHVybiBleHBhbmRlZEZpZWxkcy5yZWR1Y2UoXG4gICAgICAoZWZsZHM6IHN0cmluZ1tdLCBmbGRzOiBzdHJpbmdbXSk6IHN0cmluZ1tdID0+IFsuLi5lZmxkcywgLi4uZmxkc10sXG4gICAgICBbXSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBhc3luYyBfZXhwYW5kQXN0ZXJpc2tGaWVsZChcbiAgICBzb2JqZWN0OiBzdHJpbmcsXG4gICAgZmllbGQ6IHN0cmluZyxcbiAgKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZyhgZXhwYW5kaW5nIGZpZWxkIFwiJHtmaWVsZH1cIiBpbiBcIiR7c29iamVjdH1cIi4uLmApO1xuICAgIGNvbnN0IGZwYXRoID0gZmllbGQuc3BsaXQoJy4nKTtcbiAgICBpZiAoZnBhdGhbZnBhdGgubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuICAgICAgY29uc3Qgc28gPSBhd2FpdCB0aGlzLl9jb25uLmRlc2NyaWJlJChzb2JqZWN0KTtcbiAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZyhgdGFibGUgJHtzb2JqZWN0fSBoYXMgYmVlbiBkZXNjcmliZWRgKTtcbiAgICAgIGlmIChmcGF0aC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnN0IHJuYW1lID0gZnBhdGguc2hpZnQoKTtcbiAgICAgICAgZm9yIChjb25zdCBmIG9mIHNvLmZpZWxkcykge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGYucmVsYXRpb25zaGlwTmFtZSAmJlxuICAgICAgICAgICAgcm5hbWUgJiZcbiAgICAgICAgICAgIGYucmVsYXRpb25zaGlwTmFtZS50b1VwcGVyQ2FzZSgpID09PSBybmFtZS50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zdCByZmllbGQgPSBmO1xuICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlVG8gPSByZmllbGQucmVmZXJlbmNlVG8gfHwgW107XG4gICAgICAgICAgICBjb25zdCBydGFibGUgPSByZWZlcmVuY2VUby5sZW5ndGggPT09IDEgPyByZWZlcmVuY2VUb1swXSA6ICdOYW1lJztcbiAgICAgICAgICAgIGNvbnN0IGZwYXRocyA9IGF3YWl0IHRoaXMuX2V4cGFuZEFzdGVyaXNrRmllbGQoXG4gICAgICAgICAgICAgIHJ0YWJsZSxcbiAgICAgICAgICAgICAgZnBhdGguam9pbignLicpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiBmcGF0aHMubWFwKChmcCkgPT4gYCR7cm5hbWV9LiR7ZnB9YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzby5maWVsZHMubWFwKChmKSA9PiBmLm5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gW2ZpZWxkXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBsYWluIHBsYW4gZm9yIGV4ZWN1dGluZyBxdWVyeVxuICAgKi9cbiAgYXN5bmMgZXhwbGFpbigpIHtcbiAgICBjb25zdCBzb3FsID0gYXdhaXQgdGhpcy50b1NPUUwoKTtcbiAgICB0aGlzLl9sb2dnZXIuZGVidWcoYFNPUUwgPSAke3NvcWx9YCk7XG4gICAgY29uc3QgdXJsID0gYC9xdWVyeS8/ZXhwbGFpbj0ke2VuY29kZVVSSUNvbXBvbmVudChzb3FsKX1gO1xuICAgIHJldHVybiB0aGlzLl9jb25uLnJlcXVlc3Q8UXVlcnlFeHBsYWluUmVzdWx0Pih1cmwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBTT1FMIGV4cHJlc3Npb24gZm9yIHRoZSBxdWVyeVxuICAgKi9cbiAgYXN5bmMgdG9TT1FMKCkge1xuICAgIGlmICh0aGlzLl9zb3FsKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc29xbDtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5fZXhwYW5kRmllbGRzKCk7XG4gICAgcmV0dXJuIGNyZWF0ZVNPUUwodGhpcy5fY29uZmlnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9taXNlL0ErIGludGVyZmFjZVxuICAgKiBodHRwOi8vcHJvbWlzZXMtYXBsdXMuZ2l0aHViLmlvL3Byb21pc2VzLXNwZWMvXG4gICAqXG4gICAqIERlbGVnYXRlIHRvIGRlZmVycmVkIHByb21pc2UsIHJldHVybiBwcm9taXNlIGluc3RhbmNlIGZvciBxdWVyeSByZXN1bHRcbiAgICovXG4gIHRoZW48VSwgVj4oXG4gICAgb25SZXNvbHZlPzpcbiAgICAgIHwgKChxcjogUXVlcnlSZXNwb25zZTxSLCBRUlQ+KSA9PiBVIHwgUHJvbWlzZTxVPilcbiAgICAgIHwgbnVsbFxuICAgICAgfCB1bmRlZmluZWQsXG4gICAgb25SZWplY3Q/OiAoKGVycjogRXJyb3IpID0+IFYgfCBQcm9taXNlPFY+KSB8IG51bGwgfCB1bmRlZmluZWQsXG4gICk6IFByb21pc2U8VSB8IFY+IHtcbiAgICB0aGlzLl9jaGFpbmluZyA9IHRydWU7XG4gICAgaWYgKCF0aGlzLl9maW5pc2hlZCAmJiAhdGhpcy5fZXhlY3V0ZWQpIHtcbiAgICAgIHRoaXMuZXhlY3V0ZSgpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX3Byb21pc2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2ludmFsaWQgc3RhdGU6IHByb21pc2UgaXMgbm90IHNldCBhZnRlciBxdWVyeSBleGVjdXRpb24nLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3Byb21pc2UudGhlbihvblJlc29sdmUsIG9uUmVqZWN0KTtcbiAgfVxuXG4gIGNhdGNoKFxuICAgIG9uUmVqZWN0OiAoXG4gICAgICBlcnI6IEVycm9yLFxuICAgICkgPT4gUXVlcnlSZXNwb25zZTxSLCBRUlQ+IHwgUHJvbWlzZTxRdWVyeVJlc3BvbnNlPFIsIFFSVD4+LFxuICApOiBQcm9taXNlPFF1ZXJ5UmVzcG9uc2U8UiwgUVJUPj4ge1xuICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgb25SZWplY3QpO1xuICB9XG5cbiAgcHJvbWlzZSgpOiBQcm9taXNlPFF1ZXJ5UmVzcG9uc2U8UiwgUVJUPj4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQnVsayBkZWxldGUgcXVlcmllZCByZWNvcmRzXG4gICAqL1xuICBkZXN0cm95KG9wdGlvbnM/OiBRdWVyeURlc3Ryb3lPcHRpb25zKTogUHJvbWlzZTxTYXZlUmVzdWx0W10+O1xuICBkZXN0cm95KHR5cGU6IE4sIG9wdGlvbnM/OiBRdWVyeURlc3Ryb3lPcHRpb25zKTogUHJvbWlzZTxTYXZlUmVzdWx0W10+O1xuICBkZXN0cm95KHR5cGU/OiBOIHwgUXVlcnlEZXN0cm95T3B0aW9ucywgb3B0aW9ucz86IFF1ZXJ5RGVzdHJveU9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMgPSB0eXBlO1xuICAgICAgdHlwZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgY29uc3QgdHlwZV86IE9wdGlvbmFsPE4+ID0gdHlwZSB8fCAodGhpcy5fY29uZmlnLnRhYmxlIGFzIE9wdGlvbmFsPE4+KTtcbiAgICBpZiAoIXR5cGVfKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdTT1FMIGJhc2VkIHF1ZXJ5IG5lZWRzIFNPYmplY3QgdHlwZSBpbmZvcm1hdGlvbiB0byBidWxrIGRlbGV0ZS4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgLy8gU2V0IHRoZSB0aHJlc2hvbGQgbnVtYmVyIHRvIHBhc3MgdG8gYnVsayBBUElcbiAgICBjb25zdCB0aHJlc2hvbGROdW0gPVxuICAgICAgb3B0aW9ucy5hbGxvd0J1bGsgPT09IGZhbHNlXG4gICAgICAgID8gLTFcbiAgICAgICAgOiB0eXBlb2Ygb3B0aW9ucy5idWxrVGhyZXNob2xkID09PSAnbnVtYmVyJ1xuICAgICAgICA/IG9wdGlvbnMuYnVsa1RocmVzaG9sZFxuICAgICAgICA6IC8vIGRldGVybWluZSB0aHJlc2hvbGQgaWYgdGhlIGNvbm5lY3Rpb24gdmVyc2lvbiBzdXBwb3J0cyBTT2JqZWN0IGNvbGxlY3Rpb24gQVBJIG9yIG5vdFxuICAgICAgICB0aGlzLl9jb25uLl9lbnN1cmVWZXJzaW9uKDQyKVxuICAgICAgICA/IERFRkFVTFRfQlVMS19USFJFU0hPTERcbiAgICAgICAgOiB0aGlzLl9jb25uLl9tYXhSZXF1ZXN0IC8gMjtcblxuICAgIGNvbnN0IGJ1bGtBcGlWZXJzaW9uID0gb3B0aW9ucy5idWxrQXBpVmVyc2lvbiA/PyBERUZBVUxUX0JVTEtfQVBJX1ZFUlNJT047XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgY3JlYXRlQmF0Y2ggPSAoKSA9PlxuICAgICAgICB0aGlzLl9jb25uXG4gICAgICAgICAgLnNvYmplY3QodHlwZV8pXG4gICAgICAgICAgLmRlbGV0ZUJ1bGsoKVxuICAgICAgICAgIC5vbigncmVzcG9uc2UnLCByZXNvbHZlKVxuICAgICAgICAgIC5vbignZXJyb3InLCByZWplY3QpO1xuICAgICAgbGV0IHJlY29yZHM6IFJlY29yZFtdID0gW107XG4gICAgICBsZXQgYmF0Y2g6IFJldHVyblR5cGU8dHlwZW9mIGNyZWF0ZUJhdGNoPiB8IG51bGwgPSBudWxsO1xuICAgICAgY29uc3QgaGFuZGxlUmVjb3JkID0gKHJlYzogUmVjb3JkKSA9PiB7XG4gICAgICAgIGlmICghcmVjLklkKSB7XG4gICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFxuICAgICAgICAgICAgJ1F1ZXJpZWQgcmVjb3JkIGRvZXMgbm90IGluY2x1ZGUgU2FsZXNmb3JjZSByZWNvcmQgSUQuJyxcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZWNvcmQ6IFJlY29yZCA9IHsgSWQ6IHJlYy5JZCB9O1xuICAgICAgICBpZiAoYmF0Y2gpIHtcbiAgICAgICAgICBiYXRjaC53cml0ZShyZWNvcmQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlY29yZHMucHVzaChyZWNvcmQpO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRocmVzaG9sZE51bSA+PSAwICYmXG4gICAgICAgICAgICByZWNvcmRzLmxlbmd0aCA+IHRocmVzaG9sZE51bSAmJlxuICAgICAgICAgICAgYnVsa0FwaVZlcnNpb24gPT09IDFcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIC8vIFVzZSBidWxrIGRlbGV0ZSBpbnN0ZWFkIG9mIFNPYmplY3QgUkVTVCBBUElcbiAgICAgICAgICAgIGJhdGNoID0gY3JlYXRlQmF0Y2goKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVjb3JkIG9mIHJlY29yZHMpIHtcbiAgICAgICAgICAgICAgYmF0Y2gud3JpdGUocmVjb3JkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlY29yZHMgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCBoYW5kbGVFbmQgPSAoKSA9PiB7XG4gICAgICAgIGlmIChiYXRjaCkge1xuICAgICAgICAgIGJhdGNoLmVuZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGlkcyA9IHJlY29yZHMubWFwKChyZWNvcmQpID0+IHJlY29yZC5JZCBhcyBzdHJpbmcpO1xuICAgICAgICAgIGlmIChyZWNvcmRzLmxlbmd0aCA+IHRocmVzaG9sZE51bSAmJiBidWxrQXBpVmVyc2lvbiA9PT0gMikge1xuICAgICAgICAgICAgdGhpcy5fY29ubi5idWxrMlxuICAgICAgICAgICAgICAubG9hZEFuZFdhaXRGb3JSZXN1bHRzKHtcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHR5cGVfLFxuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogJ2RlbGV0ZScsXG4gICAgICAgICAgICAgICAgaW5wdXQ6IHJlY29yZHMsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC50aGVuKFxuICAgICAgICAgICAgICAgIChhbGxSZXN1bHRzKSA9PlxuICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLm1hcEJ1bGtWMlJlc3VsdHNUb1NhdmVSZXN1bHRzKGFsbFJlc3VsdHMpKSxcbiAgICAgICAgICAgICAgICByZWplY3QsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Nvbm5cbiAgICAgICAgICAgICAgLnNvYmplY3QodHlwZV8pXG4gICAgICAgICAgICAgIC5kZXN0cm95KGlkcywgeyBhbGxvd1JlY3Vyc2l2ZTogdHJ1ZSB9KVxuICAgICAgICAgICAgICAudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRoaXMuc3RyZWFtKCdyZWNvcmQnKVxuICAgICAgICAub24oJ2RhdGEnLCBoYW5kbGVSZWNvcmQpXG4gICAgICAgIC5vbignZW5kJywgaGFuZGxlRW5kKVxuICAgICAgICAub24oJ2Vycm9yJywgcmVqZWN0KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTeW5vbnltIG9mIFF1ZXJ5I2Rlc3Ryb3koKVxuICAgKi9cbiAgZGVsZXRlID0gdGhpcy5kZXN0cm95O1xuXG4gIC8qKlxuICAgKiBTeW5vbnltIG9mIFF1ZXJ5I2Rlc3Ryb3koKVxuICAgKi9cbiAgZGVsID0gdGhpcy5kZXN0cm95O1xuXG4gIC8qKlxuICAgKiBCdWxrIHVwZGF0ZSBxdWVyaWVkIHJlY29yZHMsIHVzaW5nIGdpdmVuIG1hcHBpbmcgZnVuY3Rpb24vb2JqZWN0XG4gICAqL1xuICB1cGRhdGU8VVIgZXh0ZW5kcyBTT2JqZWN0SW5wdXRSZWNvcmQ8UywgTj4+KFxuICAgIG1hcHBpbmc6ICgocmVjOiBSKSA9PiBVUikgfCBVUixcbiAgICB0eXBlOiBOLFxuICAgIG9wdGlvbnM/OiBRdWVyeVVwZGF0ZU9wdGlvbnMsXG4gICk6IFByb21pc2U8U2F2ZVJlc3VsdFtdPjtcbiAgdXBkYXRlPFVSIGV4dGVuZHMgU09iamVjdElucHV0UmVjb3JkPFMsIE4+PihcbiAgICBtYXBwaW5nOiAoKHJlYzogUikgPT4gVVIpIHwgVVIsXG4gICAgb3B0aW9ucz86IFF1ZXJ5VXBkYXRlT3B0aW9ucyxcbiAgKTogUHJvbWlzZTxTYXZlUmVzdWx0W10+O1xuICB1cGRhdGU8VVIgZXh0ZW5kcyBTT2JqZWN0SW5wdXRSZWNvcmQ8UywgTj4+KFxuICAgIG1hcHBpbmc6ICgocmVjOiBSKSA9PiBVUikgfCBVUixcbiAgICB0eXBlPzogTiB8IFF1ZXJ5VXBkYXRlT3B0aW9ucyxcbiAgICBvcHRpb25zPzogUXVlcnlVcGRhdGVPcHRpb25zLFxuICApIHtcbiAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMgPSB0eXBlO1xuICAgICAgdHlwZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgY29uc3QgdHlwZV86IE9wdGlvbmFsPE4+ID1cbiAgICAgIHR5cGUgfHwgKHRoaXMuX2NvbmZpZyAmJiAodGhpcy5fY29uZmlnLnRhYmxlIGFzIE9wdGlvbmFsPE4+KSk7XG4gICAgaWYgKCF0eXBlXykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnU09RTCBiYXNlZCBxdWVyeSBuZWVkcyBTT2JqZWN0IHR5cGUgaW5mb3JtYXRpb24gdG8gYnVsayB1cGRhdGUuJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHVwZGF0ZVN0cmVhbSA9XG4gICAgICB0eXBlb2YgbWFwcGluZyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IFJlY29yZFN0cmVhbS5tYXAobWFwcGluZylcbiAgICAgICAgOiBSZWNvcmRTdHJlYW0ucmVjb3JkTWFwU3RyZWFtKG1hcHBpbmcpO1xuICAgIC8vIFNldCB0aGUgdGhyZXNob2xkIG51bWJlciB0byBwYXNzIHRvIGJ1bGsgQVBJXG4gICAgY29uc3QgdGhyZXNob2xkTnVtID1cbiAgICAgIG9wdGlvbnMuYWxsb3dCdWxrID09PSBmYWxzZVxuICAgICAgICA/IC0xXG4gICAgICAgIDogdHlwZW9mIG9wdGlvbnMuYnVsa1RocmVzaG9sZCA9PT0gJ251bWJlcidcbiAgICAgICAgPyBvcHRpb25zLmJ1bGtUaHJlc2hvbGRcbiAgICAgICAgOiAvLyBkZXRlcm1pbmUgdGhyZXNob2xkIGlmIHRoZSBjb25uZWN0aW9uIHZlcnNpb24gc3VwcG9ydHMgU09iamVjdCBjb2xsZWN0aW9uIEFQSSBvciBub3RcbiAgICAgICAgdGhpcy5fY29ubi5fZW5zdXJlVmVyc2lvbig0MilcbiAgICAgICAgPyBERUZBVUxUX0JVTEtfVEhSRVNIT0xEXG4gICAgICAgIDogdGhpcy5fY29ubi5fbWF4UmVxdWVzdCAvIDI7XG4gICAgY29uc3QgYnVsa0FwaVZlcnNpb24gPSBvcHRpb25zLmJ1bGtBcGlWZXJzaW9uID8/IERFRkFVTFRfQlVMS19BUElfVkVSU0lPTjtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgY3JlYXRlQmF0Y2ggPSAoKSA9PlxuICAgICAgICB0aGlzLl9jb25uXG4gICAgICAgICAgLnNvYmplY3QodHlwZV8pXG4gICAgICAgICAgLnVwZGF0ZUJ1bGsoKVxuICAgICAgICAgIC5vbigncmVzcG9uc2UnLCByZXNvbHZlKVxuICAgICAgICAgIC5vbignZXJyb3InLCByZWplY3QpO1xuICAgICAgbGV0IHJlY29yZHM6IFNPYmplY3RVcGRhdGVSZWNvcmQ8UywgTj5bXSA9IFtdO1xuICAgICAgbGV0IGJhdGNoOiBSZXR1cm5UeXBlPHR5cGVvZiBjcmVhdGVCYXRjaD4gfCBudWxsID0gbnVsbDtcbiAgICAgIGNvbnN0IGhhbmRsZVJlY29yZCA9IChyZWNvcmQ6IFJlY29yZCkgPT4ge1xuICAgICAgICBpZiAoYmF0Y2gpIHtcbiAgICAgICAgICBiYXRjaC53cml0ZShyZWNvcmQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlY29yZHMucHVzaChyZWNvcmQgYXMgU09iamVjdFVwZGF0ZVJlY29yZDxTLCBOPik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRocmVzaG9sZE51bSA+PSAwICYmXG4gICAgICAgICAgcmVjb3Jkcy5sZW5ndGggPiB0aHJlc2hvbGROdW0gJiZcbiAgICAgICAgICBidWxrQXBpVmVyc2lvbiA9PT0gMVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBVc2UgYnVsayB1cGRhdGUgaW5zdGVhZCBvZiBTT2JqZWN0IFJFU1QgQVBJXG4gICAgICAgICAgYmF0Y2ggPSBjcmVhdGVCYXRjaCgpO1xuICAgICAgICAgIGZvciAoY29uc3QgcmVjb3JkIG9mIHJlY29yZHMpIHtcbiAgICAgICAgICAgIGJhdGNoLndyaXRlKHJlY29yZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlY29yZHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IGhhbmRsZUVuZCA9ICgpID0+IHtcbiAgICAgICAgaWYgKGJhdGNoKSB7XG4gICAgICAgICAgYmF0Y2guZW5kKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHJlY29yZHMubGVuZ3RoID4gdGhyZXNob2xkTnVtICYmIGJ1bGtBcGlWZXJzaW9uID09PSAyKSB7XG4gICAgICAgICAgICB0aGlzLl9jb25uLmJ1bGsyXG4gICAgICAgICAgICAgIC5sb2FkQW5kV2FpdEZvclJlc3VsdHMoe1xuICAgICAgICAgICAgICAgIG9iamVjdDogdHlwZV8sXG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiAndXBkYXRlJyxcbiAgICAgICAgICAgICAgICBpbnB1dDogcmVjb3JkcyxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAgICAgKGFsbFJlc3VsdHMpID0+XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMubWFwQnVsa1YyUmVzdWx0c1RvU2F2ZVJlc3VsdHMoYWxsUmVzdWx0cykpLFxuICAgICAgICAgICAgICAgIHJlamVjdCxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY29ublxuICAgICAgICAgICAgICAuc29iamVjdCh0eXBlXylcbiAgICAgICAgICAgICAgLnVwZGF0ZShyZWNvcmRzLCB7IGFsbG93UmVjdXJzaXZlOiB0cnVlIH0pXG4gICAgICAgICAgICAgIC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdGhpcy5zdHJlYW0oJ3JlY29yZCcpXG4gICAgICAgIC5vbignZXJyb3InLCByZWplY3QpXG4gICAgICAgIC5waXBlKHVwZGF0ZVN0cmVhbSlcbiAgICAgICAgLm9uKCdkYXRhJywgaGFuZGxlUmVjb3JkKVxuICAgICAgICAub24oJ2VuZCcsIGhhbmRsZUVuZClcbiAgICAgICAgLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIG1hcEJ1bGtWMlJlc3VsdHNUb1NhdmVSZXN1bHRzKFxuICAgIGJ1bGtKb2JBbGxSZXN1bHRzOiBJbmdlc3RKb2JWMlJlc3VsdHM8Uz4sXG4gICk6IFNhdmVSZXN1bHRbXSB7XG4gICAgY29uc3Qgc3VjY2Vzc1NhdmVSZXN1bHRzOiBTYXZlUmVzdWx0W10gPSBidWxrSm9iQWxsUmVzdWx0cy5zdWNjZXNzZnVsUmVzdWx0cy5tYXAoXG4gICAgICAocikgPT4ge1xuICAgICAgICBjb25zdCBzYXZlUmVzdWx0OiBTYXZlUmVzdWx0ID0ge1xuICAgICAgICAgIGlkOiByLnNmX19JZCxcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgIGVycm9yczogW10sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBzYXZlUmVzdWx0O1xuICAgICAgfSxcbiAgICApO1xuXG4gICAgY29uc3QgZmFpbGVkU2F2ZVJlc3VsdHMgPSBidWxrSm9iQWxsUmVzdWx0cy5mYWlsZWRSZXN1bHRzLm1hcCgocikgPT4ge1xuICAgICAgY29uc3Qgc2F2ZVJlc3VsdDogU2F2ZVJlc3VsdCA9IHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yQ29kZTogci5zZl9fRXJyb3IsXG4gICAgICAgICAgICBtZXNzYWdlOiByLnNmX19FcnJvcixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfTtcbiAgICAgIHJldHVybiBzYXZlUmVzdWx0O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIFsuLi5zdWNjZXNzU2F2ZVJlc3VsdHMsIC4uLmZhaWxlZFNhdmVSZXN1bHRzXTtcbiAgfVxufVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuLyoqXG4gKiBTdWJRdWVyeSBvYmplY3QgZm9yIHJlcHJlc2VudGluZyBjaGlsZCByZWxhdGlvbnNoaXAgcXVlcnlcbiAqL1xuZXhwb3J0IGNsYXNzIFN1YlF1ZXJ5PFxuICBTIGV4dGVuZHMgU2NoZW1hLFxuICBQTiBleHRlbmRzIFNPYmplY3ROYW1lczxTPixcbiAgUFIgZXh0ZW5kcyBSZWNvcmQsXG4gIFBRUlQgZXh0ZW5kcyBRdWVyeVJlc3BvbnNlVGFyZ2V0LFxuICBDUk4gZXh0ZW5kcyBDaGlsZFJlbGF0aW9uc2hpcE5hbWVzPFMsIFBOPiA9IENoaWxkUmVsYXRpb25zaGlwTmFtZXM8UywgUE4+LFxuICBDTiBleHRlbmRzIFNPYmplY3ROYW1lczxTPiA9IENoaWxkUmVsYXRpb25zaGlwU09iamVjdE5hbWU8UywgUE4sIENSTj4sXG4gIENSIGV4dGVuZHMgUmVjb3JkID0gUmVjb3JkXG4+IHtcbiAgX3JlbE5hbWU6IENSTjtcbiAgX3F1ZXJ5OiBRdWVyeTxTLCBDTiwgQ1I+O1xuICBfcGFyZW50OiBRdWVyeTxTLCBQTiwgUFIsIFBRUlQ+O1xuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgY29ubjogQ29ubmVjdGlvbjxTPixcbiAgICByZWxOYW1lOiBDUk4sXG4gICAgY29uZmlnOiBRdWVyeUNvbmZpZzxTLCBDTj4sXG4gICAgcGFyZW50OiBRdWVyeTxTLCBQTiwgUFIsIFBRUlQ+LFxuICApIHtcbiAgICB0aGlzLl9yZWxOYW1lID0gcmVsTmFtZTtcbiAgICB0aGlzLl9xdWVyeSA9IG5ldyBRdWVyeShjb25uLCBjb25maWcpO1xuICAgIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgc2VsZWN0PFxuICAgIFIgZXh0ZW5kcyBSZWNvcmQgPSBSZWNvcmQsXG4gICAgRlAgZXh0ZW5kcyBGaWVsZFBhdGhTcGVjaWZpZXI8UywgQ04+ID0gRmllbGRQYXRoU3BlY2lmaWVyPFMsIENOPixcbiAgICBGUEMgZXh0ZW5kcyBGaWVsZFByb2plY3Rpb25Db25maWcgPSBGaWVsZFBhdGhTY29wZWRQcm9qZWN0aW9uPFMsIENOLCBGUD5cbiAgPihcbiAgICBmaWVsZHM6IFF1ZXJ5RmllbGQ8UywgQ04sIEZQPixcbiAgKTogU3ViUXVlcnk8UywgUE4sIFBSLCBQUVJULCBDUk4sIENOLCBTT2JqZWN0UmVjb3JkPFMsIENOLCBGUEMsIFI+PiB7XG4gICAgLy8gZm9yY2UgY29udmVydCBxdWVyeSByZWNvcmQgdHlwZSB3aXRob3V0IGNoYW5naW5nIGluc3RhbmNlXG4gICAgdGhpcy5fcXVlcnkgPSB0aGlzLl9xdWVyeS5zZWxlY3QoZmllbGRzKSBhcyBhbnk7XG4gICAgcmV0dXJuICh0aGlzIGFzIGFueSkgYXMgU3ViUXVlcnk8XG4gICAgICBTLFxuICAgICAgUE4sXG4gICAgICBQUixcbiAgICAgIFBRUlQsXG4gICAgICBDUk4sXG4gICAgICBDTixcbiAgICAgIFNPYmplY3RSZWNvcmQ8UywgQ04sIEZQQywgUj5cbiAgICA+O1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICB3aGVyZShjb25kaXRpb25zOiBRdWVyeUNvbmRpdGlvbjxTLCBDTj4gfCBzdHJpbmcpOiB0aGlzIHtcbiAgICB0aGlzLl9xdWVyeSA9IHRoaXMuX3F1ZXJ5LndoZXJlKGNvbmRpdGlvbnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIExpbWl0IHRoZSByZXR1cm5pbmcgcmVzdWx0XG4gICAqL1xuICBsaW1pdChsaW1pdDogbnVtYmVyKSB7XG4gICAgdGhpcy5fcXVlcnkgPSB0aGlzLl9xdWVyeS5saW1pdChsaW1pdCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2tpcCByZWNvcmRzXG4gICAqL1xuICBza2lwKG9mZnNldDogbnVtYmVyKSB7XG4gICAgdGhpcy5fcXVlcnkgPSB0aGlzLl9xdWVyeS5za2lwKG9mZnNldCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU3lub255bSBvZiBTdWJRdWVyeSNza2lwKClcbiAgICovXG4gIG9mZnNldCA9IHRoaXMuc2tpcDtcblxuICAvKipcbiAgICogU2V0IHF1ZXJ5IHNvcnQgd2l0aCBkaXJlY3Rpb25cbiAgICovXG4gIHNvcnQoc29ydDogUXVlcnlTb3J0PFMsIENOPik6IHRoaXM7XG4gIHNvcnQoc29ydDogc3RyaW5nKTogdGhpcztcbiAgc29ydChzb3J0OiBTT2JqZWN0RmllbGROYW1lczxTLCBDTj4sIGRpcjogU29ydERpcik6IHRoaXM7XG4gIHNvcnQoc29ydDogc3RyaW5nLCBkaXI6IFNvcnREaXIpOiB0aGlzO1xuICBzb3J0KFxuICAgIHNvcnQ6IFF1ZXJ5U29ydDxTLCBDTj4gfCBTT2JqZWN0RmllbGROYW1lczxTLCBDTj4gfCBzdHJpbmcsXG4gICAgZGlyPzogU29ydERpcixcbiAgKSB7XG4gICAgdGhpcy5fcXVlcnkgPSB0aGlzLl9xdWVyeS5zb3J0KHNvcnQgYXMgYW55LCBkaXIgYXMgU29ydERpcik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU3lub255bSBvZiBTdWJRdWVyeSNzb3J0KClcbiAgICovXG4gIG9yZGVyYnk6IHR5cGVvZiBTdWJRdWVyeS5wcm90b3R5cGUuc29ydCA9IHRoaXMuc29ydDtcblxuICAvKipcbiAgICpcbiAgICovXG4gIGFzeW5jIF9leHBhbmRGaWVsZHMoKSB7XG4gICAgY29uc3Qgc29iamVjdCA9IGF3YWl0IHRoaXMuX3BhcmVudC5fZmluZFJlbGF0aW9uT2JqZWN0KHRoaXMuX3JlbE5hbWUpO1xuICAgIHJldHVybiB0aGlzLl9xdWVyeS5fZXhwYW5kRmllbGRzKHNvYmplY3QpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJhY2sgdGhlIGNvbnRleHQgdG8gcGFyZW50IHF1ZXJ5IG9iamVjdFxuICAgKi9cbiAgZW5kPFxuICAgIENSUCBleHRlbmRzIFNPYmplY3RDaGlsZFJlbGF0aW9uc2hpcFByb3A8XG4gICAgICBDUk4sXG4gICAgICBDUlxuICAgID4gPSBTT2JqZWN0Q2hpbGRSZWxhdGlvbnNoaXBQcm9wPENSTiwgQ1I+LFxuICAgIFBSMSBleHRlbmRzIFJlY29yZCA9IFBSICYgQ1JQXG4gID4oKTogUXVlcnk8UywgUE4sIFBSMSwgUFFSVD4ge1xuICAgIHJldHVybiAodGhpcy5fcGFyZW50IGFzIGFueSkgYXMgUXVlcnk8UywgUE4sIFBSMSwgUFFSVD47XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUXVlcnk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0EsWUFBWSxRQUFRLFFBQVE7QUFDckMsU0FBaUJDLFNBQVMsUUFBUSxlQUFlO0FBQ2pELE9BQU9DLFlBQVksSUFBSUMsWUFBWSxRQUFRLGlCQUFpQjtBQUU1RCxTQUFTQyxVQUFVLFFBQVEsZ0JBQWdCOztBQXdCM0M7QUFDQTtBQUNBOztBQU9BO0FBQ0E7QUFDQTs7QUFxREE7QUFDQTtBQUNBOztBQW1EQSxNQUFNQyxvQkFBb0IsR0FBRyxDQUMzQixhQUFhLEVBQ2IsU0FBUyxFQUNULGNBQWMsRUFDZCxPQUFPLENBQ0M7QUFJVixPQUFPLE1BQU1DLGVBRVosR0FBR0MsdUJBQUEsQ0FBQUYsb0JBQW9CLEVBQUFHLElBQUEsQ0FBcEJILG9CQUFvQixFQUN0QixDQUFDSSxNQUFNLEVBQUVDLE1BQU0sS0FBQUMsYUFBQSxDQUFBQSxhQUFBLEtBQVdGLE1BQU07RUFBRSxDQUFDQyxNQUFNLEdBQUdBO0FBQU0sRUFBRyxFQUNyRCxDQUFDLENBR0gsQ0FBQzs7QUFXVzs7QUFnQlo7QUFDQTtBQUNBO0FBQ0EsTUFBTUUsc0JBQXNCLEdBQUcsR0FBRztBQUNsQyxNQUFNQyx3QkFBd0IsR0FBRyxDQUFDOztBQUVsQztBQUNBO0FBQ0E7QUFDQSxPQUFPLE1BQU1DLEtBQUssU0FLUmQsWUFBWSxDQUFDO0VBb0JyQjtBQUNGO0FBQ0E7RUFDRWUsV0FBV0EsQ0FDVEMsSUFBbUIsRUFD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