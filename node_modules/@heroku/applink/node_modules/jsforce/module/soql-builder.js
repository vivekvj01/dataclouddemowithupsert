import "core-js/modules/es.array.iterator";
import "core-js/modules/es.string.replace";
import _sortInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/sort";
import _includesInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/includes";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$entries from "@babel/runtime-corejs3/core-js-stable/object/entries";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Object$values from "@babel/runtime-corejs3/core-js-stable/object/values";
/**
 * @file Create and build SOQL string from configuration
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import SfDate from './date';
/** @private **/
function escapeSOQLString(str) {
  return String(str || '').replace(/'/g, "\\'");
}

/** @private **/
function createFieldsClause(fields, childQueries = {}) {
  const cqueries = _Object$values(childQueries);
  // eslint-disable-next-line no-use-before-define
  return [...(fields || ['Id']), ..._mapInstanceProperty(cqueries).call(cqueries, cquery => `(${createSOQL(cquery)})`)].join(', ');
}

/** @private **/
function createValueExpression(value) {
  if (_Array$isArray(value)) {
    return value.length > 0 ? `(${_mapInstanceProperty(value).call(value, createValueExpression).join(', ')})` : undefined;
  }
  if (value instanceof SfDate) {
    return value.toString();
  }
  if (typeof value === 'string') {
    return `'${escapeSOQLString(value)}'`;
  }
  if (typeof value === 'number') {
    return value.toString();
  }
  if (value === null) {
    return 'null';
  }
  return value;
}
const opMap = {
  '=': '=',
  $eq: '=',
  '!=': '!=',
  $ne: '!=',
  '>': '>',
  $gt: '>',
  '<': '<',
  $lt: '<',
  '>=': '>=',
  $gte: '>=',
  '<=': '<=',
  $lte: '<=',
  $like: 'LIKE',
  $nlike: 'NOT LIKE',
  $in: 'IN',
  $nin: 'NOT IN',
  $includes: 'INCLUDES',
  $excludes: 'EXCLUDES',
  $exists: 'EXISTS'
};

/** @private **/
function createFieldExpression(field, value) {
  let op = '$eq';
  let _value = value;

  // Assume the `$in` operator if value is an array and none was supplied.
  if (_Array$isArray(value)) {
    op = '$in';
  } else if (typeof value === 'object' && value !== null) {
    // Otherwise, if an object was passed then process the supplied ops.
    for (const k of _Object$keys(value)) {
      if (k[0] === '$') {
        op = k;
        _value = value[k];
        break;
      }
    }
  }
  const sfop = opMap[op];
  if (!sfop || typeof _value === 'undefined') {
    return null;
  }
  const valueExpr = createValueExpression(_value);
  if (typeof valueExpr === 'undefined') {
    return null;
  }
  switch (sfop) {
    case 'NOT LIKE':
      return `(${['NOT', field, 'LIKE', valueExpr].join(' ')})`;
    case 'EXISTS':
      return [field, _value ? '!=' : '=', 'null'].join(' ');
    default:
      return [field, sfop, valueExpr].join(' ');
  }
}

/** @private **/
function createOrderByClause(sort = []) {
  let _sort = [];
  if (typeof sort === 'string') {
    var _context;
    if (/,|\s+(asc|desc)\s*$/.test(sort)) {
      // must be specified in pure "order by" clause. Return raw config.
      return sort;
    }
    // sort order in mongoose-style expression.
    // e.g. "FieldA -FieldB" => "ORDER BY FieldA ASC, FieldB DESC"
    _sort = _mapInstanceProperty(_context = sort.split(/\s+/)).call(_context, field => {
      let dir = 'ASC'; // ascending
      const flag = field[0];
      if (flag === '-') {
        dir = 'DESC';
        field = field.substring(1); // eslint-disable-line no-param-reassign
      } else if (flag === '+') {
        field = field.substring(1); // eslint-disable-line no-param-reassign
      }

      return [field, dir];
    });
  } else if (_Array$isArray(sort)) {
    _sort = sort;
  } else {
    var _context2;
    _sort = _mapInstanceProperty(_context2 = _Object$entries(sort)).call(_context2, ([field, dir]) => [field, dir]);
  }
  return _mapInstanceProperty(_sort).call(_sort, ([field, dir]) => {
    /* eslint-disable no-param-reassign */
    switch (String(dir)) {
      case 'DESC':
      case 'desc':
      case 'descending':
      case '-':
      case '-1':
        dir = 'DESC';
        break;
      default:
        dir = 'ASC';
    }
    return `${field} ${dir}`;
  }).join(', ');
}
/** @private **/
function createConditionClause(conditions = {}, operator = 'AND', depth = 0) {
  var _context5;
  if (typeof conditions === 'string') {
    return conditions;
  }
  let conditionList = [];
  if (!_Array$isArray(conditions)) {
    var _context3;
    // if passed in hash object
    const conditionsMap = conditions;
    conditionList = _mapInstanceProperty(_context3 = _Object$keys(conditionsMap)).call(_context3, key => ({
      key,
      value: conditionsMap[key]
    }));
  } else {
    conditionList = _mapInstanceProperty(conditions).call(conditions, cond => {
      var _context4;
      const conds = _mapInstanceProperty(_context4 = _Object$keys(cond)).call(_context4, key => ({
        key,
        value: cond[key]
      }));
      return conds.length > 1 ? {
        key: '$and',
        value: _mapInstanceProperty(conds).call(conds, c => ({
          [c.key]: c.value
        }))
      } : conds[0];
    });
  }
  const conditionClauses = _filterInstanceProperty(_context5 = _mapInstanceProperty(conditionList).call(conditionList, cond => {
    let d = depth + 1;
    let op;
    switch (cond.key) {
      case '$or':
      case '$and':
      case '$not':
        if (operator !== 'NOT' && conditionList.length === 1) {
          d = depth; // not change tree depth
        }

        op = cond.key === '$or' ? 'OR' : cond.key === '$and' ? 'AND' : 'NOT';
        return createConditionClause(cond.value, op, d);
      default:
        return createFieldExpression(cond.key, cond.value);
    }
  })).call(_context5, expr => expr);
  let hasParen;
  if (operator === 'NOT') {
    hasParen = depth > 0;
    return `${hasParen ? '(' : ''}NOT ${conditionClauses[0]}${hasParen ? ')' : ''}`;
  }
  hasParen = depth > 0 && conditionClauses.length > 1;
  return (hasParen ? '(' : '') + conditionClauses.join(` ${operator} `) + (hasParen ? ')' : '');
}

/**
 * Create SOQL
 * @private
 */
export function createSOQL(query) {
  let soql = ['SELECT ', createFieldsClause(query.fields, _includesInstanceProperty(query)), ' FROM ', query.table].join('');
  const cond = createConditionClause(query.conditions);
  if (cond) {
    soql += ` WHERE ${cond}`;
  }
  const orderby = createOrderByClause(_sortInstanceProperty(query));
  if (orderby) {
    soql += ` ORDER BY ${orderby}`;
  }
  if (query.limit) {
    soql += ` LIMIT ${query.limit}`;
  }
  if (query.offset) {
    soql += ` OFFSET ${query.offset}`;
  }
  return soql;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,