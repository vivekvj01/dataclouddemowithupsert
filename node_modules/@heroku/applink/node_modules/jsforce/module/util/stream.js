import "core-js/modules/es.array.iterator";
import "core-js/modules/es.promise";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import { Duplex, PassThrough, Writable } from 'stream';
export function createLazyStream() {
  const ins = new PassThrough();
  const outs = new PassThrough();
  const stream = concatStreamsAsDuplex(ins, outs);
  let piped = false;
  const setStream = str => {
    if (piped) {
      throw new Error('stream is already piped to actual stream');
    }
    piped = true;
    ins.pipe(str).pipe(outs);
  };
  return {
    stream,
    setStream
  };
}
class MemoryWriteStream extends Writable {
  constructor() {
    super();
    _defineProperty(this, "_buf", void 0);
    this._buf = Buffer.alloc(0);
  }
  _write(chunk, encoding, callback) {
    this._buf = _concatInstanceProperty(Buffer).call(Buffer, [this._buf, chunk]);
    callback();
  }
  _writev(data, callback) {
    this._buf = _concatInstanceProperty(Buffer).call(Buffer, [this._buf, ..._mapInstanceProperty(data).call(data, ({
      chunk
    }) => chunk)]);
    callback();
  }
  toString(encoding = 'utf-8') {
    return this._buf.toString(encoding);
  }
}
export async function readAll(rs, encoding = 'utf-8') {
  return new _Promise((resolve, reject) => {
    const ws = new MemoryWriteStream();
    rs.on('error', reject).pipe(ws).on('finish', () => resolve(ws.toString(encoding)));
  });
}
class DuplexifiedStream extends Duplex {
  constructor(ws, rs, opts = {}) {
    var _opts$writableObjectM, _opts$readableObjectM;
    super({
      writableObjectMode: (_opts$writableObjectM = opts.writableObjectMode) !== null && _opts$writableObjectM !== void 0 ? _opts$writableObjectM : ws.writableObjectMode,
      readableObjectMode: (_opts$readableObjectM = opts.readableObjectMode) !== null && _opts$readableObjectM !== void 0 ? _opts$readableObjectM : rs.readableObjectMode
    });
    _defineProperty(this, "_writable", void 0);
    _defineProperty(this, "_readable", void 0);
    this._writable = ws;
    this._readable = rs;
    ws.once('finish', () => {
      this.end();
    });
    this.once('finish', () => {
      ws.end();
    });
    rs.on('readable', () => {
      this._readStream();
    });
    rs.once('end', () => {
      this.push(null);
    });
    ws.on('error', err => this.emit('error', err));
    rs.on('error', err => this.emit('error', err));
  }
  _write(chunk, encoding, callback) {
    this._writable.write(chunk, encoding, callback);
  }
  _read(n) {
    this._readStream(n);
  }
  _readStream(n) {
    let data;
    while ((data = this._readable.read(n)) !== null) {
      this.push(data);
    }
  }
}
export function concatStreamsAsDuplex(ws, rs, opts) {
  return new DuplexifiedStream(ws, rs, opts);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,