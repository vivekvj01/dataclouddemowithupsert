import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import "core-js/modules/es.array.iterator";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _reverseInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reverse";
import _Date$now from "@babel/runtime-corejs3/core-js-stable/date/now";
import _setInterval from "@babel/runtime-corejs3/core-js-stable/set-interval";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source), true)).call(_context2, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source))).call(_context3, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * @file Browser client connection management class
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { EventEmitter } from 'events';
import qs from 'querystring';
import Connection from '../connection';
import OAuth2 from '../oauth2';

/**
 * @private
 */
function popupWin(url, w, h) {
  const left = screen.width / 2 - w / 2;
  const top = screen.height / 2 - h / 2;
  return window.open(url, undefined, `location=yes,toolbar=no,status=no,menubar=no,width=${w},height=${h},top=${top},left=${left}`);
}

/**
 * @private
 */
function handleCallbackResponse() {
  const res = checkCallbackResponse();
  const state = localStorage.getItem('jsforce_state');
  if (res && state && res.body.state === state) {
    localStorage.removeItem('jsforce_state');
    const [prefix, promptType] = state.split('.');
    const cli = new BrowserClient(prefix);
    if (res.success) {
      cli._storeTokens(res.body);
      location.hash = '';
    } else {
      cli._storeError(res.body);
    }
    if (promptType === 'popup') {
      window.close();
    }
    return true;
  }
}

/**
 * @private
 */
function checkCallbackResponse() {
  let params;
  if (window.location.hash) {
    params = qs.parse(window.location.hash.substring(1));
    if (params.access_token) {
      return {
        success: true,
        body: params
      };
    }
  } else if (window.location.search) {
    params = qs.parse(window.location.search.substring(1));
    if (params.error) {
      return {
        success: false,
        body: params
      };
    }
  }
}

/**
 *
 */

/**
 *
 */
const DEFAULT_POPUP_WIN_WIDTH = 912;
const DEFAULT_POPUP_WIN_HEIGHT = 513;

/** @private **/
let clientIdx = 0;

/**
 *
 */
export class BrowserClient extends EventEmitter {
  /**
   *
   */
  constructor(prefix) {
    super();
    _defineProperty(this, "_prefix", void 0);
    _defineProperty(this, "_config", void 0);
    _defineProperty(this, "_connection", void 0);
    this._prefix = prefix || 'jsforce' + clientIdx++;
  }
  get connection() {
    if (!this._connection) {
      this._connection = new Connection(this._config);
    }
    return this._connection;
  }

  /**
   *
   */
  init(config) {
    if (handleCallbackResponse()) {
      return;
    }
    this._config = config;
    const tokens = this._getTokens();
    if (tokens) {
      this.connection._establish(tokens);
      _setTimeout(() => {
        this.emit('connect', this.connection);
      }, 10);
    }
  }

  /**
   *
   */
  login(options = {}) {
    var _this$_config, _size$width, _size$height;
    const {
      scope,
      size
    } = options;
    const oauth2 = new OAuth2((_this$_config = this._config) !== null && _this$_config !== void 0 ? _this$_config : {});
    const rand = Math.random().toString(36).substring(2);
    const state = [this._prefix, 'popup', rand].join('.');
    localStorage.setItem('jsforce_state', state);
    const authzUrl = oauth2.getAuthorizationUrl(_objectSpread({
      response_type: 'token',
      state
    }, scope ? {
      scope
    } : {}));
    const pw = popupWin(authzUrl, (_size$width = size === null || size === void 0 ? void 0 : size.width) !== null && _size$width !== void 0 ? _size$width : DEFAULT_POPUP_WIN_WIDTH, (_size$height = size === null || size === void 0 ? void 0 : size.height) !== null && _size$height !== void 0 ? _size$height : DEFAULT_POPUP_WIN_HEIGHT);
    return new _Promise((resolve, reject) => {
      if (!pw) {
        const state = [this._prefix, 'redirect', rand].join('.');
        localStorage.setItem('jsforce_state', state);
        const authzUrl = oauth2.getAuthorizationUrl(_objectSpread({
          response_type: 'token',
          state
        }, scope ? {
          scope
        } : {}));
        location.href = authzUrl;
        return;
      }
      this._removeTokens();
      const pid = _setInterval(() => {
        try {
          if (!pw || pw.closed) {
            clearInterval(pid);
            const tokens = this._getTokens();
            if (tokens) {
              this.connection._establish(tokens);
              this.emit('connect', this.connection);
              resolve({
                status: 'connect'
              });
            } else {
              const err = this._getError();
              if (err) {
                reject(new Error(err.error + ': ' + err.error_description));
              } else {
                resolve({
                  status: 'cancel'
                });
              }
            }
          }
        } catch (e) {
          //
        }
      }, 1000);
    });
  }

  /**
   *
   */
  isLoggedIn() {
    return !!this.connection.accessToken;
  }

  /**
   *
   */
  logout() {
    this.connection.logout();
    this._removeTokens();
    this.emit('disconnect');
  }

  /**
   * @private
   */
  _getTokens() {
    const regexp = new RegExp('(^|;\\s*)' + this._prefix + '_loggedin=true(;|$)');
    if (document.cookie.match(regexp)) {
      const issuedAt = Number(localStorage.getItem(this._prefix + '_issued_at'));
      // 2 hours
      if (_Date$now() < issuedAt + 2 * 60 * 60 * 1000) {
        let userInfo;
        const idUrl = localStorage.getItem(this._prefix + '_id');
        if (idUrl) {
          var _context;
          const [id, organizationId] = _reverseInstanceProperty(_context = idUrl.split('/')).call(_context);
          userInfo = {
            id,
            organizationId,
            url: idUrl
          };
        }
        return {
          accessToken: localStorage.getItem(this._prefix + '_access_token'),
          instanceUrl: localStorage.getItem(this._prefix + '_instance_url'),
          userInfo
        };
      }
    }
    return null;
  }

  /**
   * @private
   */
  _storeTokens(params) {
    localStorage.setItem(this._prefix + '_access_token', params.access_token);
    localStorage.setItem(this._prefix + '_instance_url', params.instance_url);
    localStorage.setItem(this._prefix + '_issued_at', params.issued_at);
    localStorage.setItem(this._prefix + '_id', params.id);
    document.cookie = this._prefix + '_loggedin=true;';
  }

  /**
   * @private
   */
  _removeTokens() {
    localStorage.removeItem(this._prefix + '_access_token');
    localStorage.removeItem(this._prefix + '_instance_url');
    localStorage.removeItem(this._prefix + '_issued_at');
    localStorage.removeItem(this._prefix + '_id');
    document.cookie = this._prefix + '_loggedin=';
  }

  /**
   * @private
   */
  _getError() {
    try {
      var _localStorage$getItem;
      const err = JSON.parse((_localStorage$getItem = localStorage.getItem(this._prefix + '_error')) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : '');
      localStorage.removeItem(this._prefix + '_error');
      return err;
    } catch (e) {
      //
    }
  }

  /**
   * @private
   */
  _storeError(err) {
    localStorage.setItem(this._prefix + '_error', _JSON$stringify(err));
  }
}

/**
 *
 */
const client = new BrowserClient();
export default client;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,