import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import "core-js/modules/es.array.join";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source), true)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context4; _forEachInstanceProperty(_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 *
 */

/**
 * Remote reference to record information
 */
export var RecordReference = /*#__PURE__*/function () {
  /**
   *
   */
  function RecordReference(conn, type, id) {
    _classCallCheck(this, RecordReference);
    _defineProperty(this, "type", void 0);
    _defineProperty(this, "id", void 0);
    _defineProperty(this, "_conn", void 0);
    _defineProperty(this, "delete", this.destroy);
    _defineProperty(this, "del", this.destroy);
    this._conn = conn;
    this.type = type;
    this.id = id;
  }

  /**
   * Retrieve record field information
   */
  _createClass(RecordReference, [{
    key: "retrieve",
    value: function () {
      var _retrieve = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
        var rec;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this._conn.retrieve(this.type, this.id, options);
              case 2:
                rec = _context.sent;
                return _context.abrupt("return", rec);
              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function retrieve(_x) {
        return _retrieve.apply(this, arguments);
      }
      return retrieve;
    }()
    /**
     * Update record field information
     */
  }, {
    key: "update",
    value: function () {
      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(record, options) {
        var record_;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                record_ = _objectSpread(_objectSpread({}, record), {}, {
                  Id: this.id
                });
                return _context2.abrupt("return", this._conn.update(this.type, record_, options));
              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function update(_x2, _x3) {
        return _update.apply(this, arguments);
      }
      return update;
    }()
    /**
     * Delete record field
     */
  }, {
    key: "destroy",
    value: function destroy(options) {
      return this._conn.destroy(this.type, this.id, options);
    }
    /**
     * Synonym of Record#destroy()
     */
    /**
     * Synonym of Record#destroy()
     */
  }, {
    key: "blob",
    /**
     * Get blob field as stream
     *
     * @param {String} fieldName - Blob field name
     * @returns {stream.Stream}
     */
    value: function blob(fieldName) {
      var url = [this._conn._baseUrl(), 'sobjects', this.type, this.id, fieldName].join('/');
      return this._conn.request(url).stream();
    }
  }]);
  return RecordReference;
}();
export default RecordReference;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWNvcmRSZWZlcmVuY2UiLCJjb25uIiwidHlwZSIsImlkIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2RlZmluZVByb3BlcnR5IiwiZGVzdHJveSIsIl9jb25uIiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJfcmV0cmlldmUiLCJfYXN5bmNUb0dlbmVyYXRvciIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJtYXJrIiwiX2NhbGxlZSIsIm9wdGlvbnMiLCJyZWMiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwicmV0cmlldmUiLCJzZW50IiwiYWJydXB0Iiwic3RvcCIsIl94IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfdXBkYXRlIiwiX2NhbGxlZTIiLCJyZWNvcmQiLCJyZWNvcmRfIiwiX2NhbGxlZTIkIiwiX2NvbnRleHQyIiwiX29iamVjdFNwcmVhZCIsIklkIiwidXBkYXRlIiwiX3gyIiwiX3gzIiwiYmxvYiIsImZpZWxkTmFtZSIsInVybCIsIl9iYXNlVXJsIiwiam9pbiIsInJlcXVlc3QiLCJzdHJlYW0iXSwic291cmNlcyI6WyIuLi9zcmMvcmVjb3JkLXJlZmVyZW5jZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKi9cbmltcG9ydCBDb25uZWN0aW9uIGZyb20gJy4vY29ubmVjdGlvbic7XG5pbXBvcnQge1xuICBSZXRyaWV2ZU9wdGlvbnMsXG4gIERtbE9wdGlvbnMsXG4gIFNjaGVtYSxcbiAgU09iamVjdE5hbWVzLFxuICBTT2JqZWN0SW5wdXRSZWNvcmQsXG4gIFNPYmplY3RVcGRhdGVSZWNvcmQsXG59IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIFJlbW90ZSByZWZlcmVuY2UgdG8gcmVjb3JkIGluZm9ybWF0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBSZWNvcmRSZWZlcmVuY2U8XG4gIFMgZXh0ZW5kcyBTY2hlbWEsXG4gIE4gZXh0ZW5kcyBTT2JqZWN0TmFtZXM8Uz4sXG4gIElucHV0UmVjb3JkIGV4dGVuZHMgU09iamVjdElucHV0UmVjb3JkPFMsIE4+ID0gU09iamVjdElucHV0UmVjb3JkPFMsIE4+LFxuICBSZXRyaWV2ZVJlY29yZCBleHRlbmRzIFNPYmplY3RVcGRhdGVSZWNvcmQ8UywgTj4gPSBTT2JqZWN0VXBkYXRlUmVjb3JkPFMsIE4+XG4+IHtcbiAgdHlwZTogTjtcbiAgaWQ6IHN0cmluZztcbiAgX2Nvbm46IENvbm5lY3Rpb248Uz47XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25uOiBDb25uZWN0aW9uPFM+LCB0eXBlOiBOLCBpZDogc3RyaW5nKSB7XG4gICAgdGhpcy5fY29ubiA9IGNvbm47XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmlkID0gaWQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgcmVjb3JkIGZpZWxkIGluZm9ybWF0aW9uXG4gICAqL1xuICBhc3luYyByZXRyaWV2ZShvcHRpb25zPzogUmV0cmlldmVPcHRpb25zKSB7XG4gICAgY29uc3QgcmVjID0gYXdhaXQgdGhpcy5fY29ubi5yZXRyaWV2ZSh0aGlzLnR5cGUsIHRoaXMuaWQsIG9wdGlvbnMpO1xuICAgIHJldHVybiByZWMgYXMgUmV0cmlldmVSZWNvcmQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHJlY29yZCBmaWVsZCBpbmZvcm1hdGlvblxuICAgKi9cbiAgYXN5bmMgdXBkYXRlKHJlY29yZDogSW5wdXRSZWNvcmQsIG9wdGlvbnM/OiBEbWxPcHRpb25zKSB7XG4gICAgY29uc3QgcmVjb3JkXyA9IHsgLi4ucmVjb3JkLCBJZDogdGhpcy5pZCB9O1xuICAgIHJldHVybiB0aGlzLl9jb25uLnVwZGF0ZSh0aGlzLnR5cGUsIHJlY29yZF8sIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSByZWNvcmQgZmllbGRcbiAgICovXG4gIGRlc3Ryb3kob3B0aW9ucz86IERtbE9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fY29ubi5kZXN0cm95KHRoaXMudHlwZSwgdGhpcy5pZCwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogU3lub255bSBvZiBSZWNvcmQjZGVzdHJveSgpXG4gICAqL1xuICBkZWxldGUgPSB0aGlzLmRlc3Ryb3k7XG5cbiAgLyoqXG4gICAqIFN5bm9ueW0gb2YgUmVjb3JkI2Rlc3Ryb3koKVxuICAgKi9cbiAgZGVsID0gdGhpcy5kZXN0cm95O1xuXG4gIC8qKlxuICAgKiBHZXQgYmxvYiBmaWVsZCBhcyBzdHJlYW1cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkTmFtZSAtIEJsb2IgZmllbGQgbmFtZVxuICAgKiBAcmV0dXJucyB7c3RyZWFtLlN0cmVhbX1cbiAgICovXG4gIGJsb2IoZmllbGROYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCB1cmwgPSBbXG4gICAgICB0aGlzLl9jb25uLl9iYXNlVXJsKCksXG4gICAgICAnc29iamVjdHMnLFxuICAgICAgdGhpcy50eXBlLFxuICAgICAgdGhpcy5pZCxcbiAgICAgIGZpZWxkTmFtZSxcbiAgICBdLmpvaW4oJy8nKTtcbiAgICByZXR1cm4gdGhpcy5fY29ubi5yZXF1ZXN0KHVybCkuc3RyZWFtKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVjb3JkUmVmZXJlbmNlO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTs7QUFXQTtBQUNBO0FBQ0E7QUFDQSxXQUFhQSxlQUFlO0VBVTFCO0FBQ0Y7QUFDQTtFQUNFLFNBQUFBLGdCQUFZQyxJQUFtQixFQUFFQyxJQUFPLEVBQUVDLEVBQVUsRUFBRTtJQUFBQyxlQUFBLE9BQUFKLGVBQUE7SUFBQUssZUFBQTtJQUFBQSxlQUFBO0lBQUFBLGVBQUE7SUFBQUEsZUFBQSxpQkFnQzdDLElBQUksQ0FBQ0MsT0FBTztJQUFBRCxlQUFBLGNBS2YsSUFBSSxDQUFDQyxPQUFPO0lBcENoQixJQUFJLENBQUNDLEtBQUssR0FBR04sSUFBSTtJQUNqQixJQUFJLENBQUND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