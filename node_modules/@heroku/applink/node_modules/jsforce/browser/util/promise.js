import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import _Promise2 from "@babel/runtime-corejs3/core-js-stable/promise";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _wrapNativeSuper from "@babel/runtime-corejs3/helpers/wrapNativeSuper";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }
/**
 *
 */
import { Duplex } from 'stream';

/**
 *
 */

/**
 *
 */
export var StreamPromise = /*#__PURE__*/function (_Promise) {
  _inherits(StreamPromise, _Promise);
  var _super = _createSuper(StreamPromise);
  function StreamPromise() {
    _classCallCheck(this, StreamPromise);
    return _super.apply(this, arguments);
  }
  _createClass(StreamPromise, [{
    key: "stream",
    value: function stream() {
      // dummy
      return new Duplex();
    }
  }], [{
    key: "create",
    value: function create(builder) {
      var _builder = builder(),
        stream = _builder.stream,
        promise = _builder.promise;
      var streamPromise = new StreamPromise(function (resolve, reject) {
        promise.then(resolve, reject);
      });
      streamPromise.stream = function () {
        return stream;
      };
      return streamPromise;
    }
  }]);
  return StreamPromise;
}( /*#__PURE__*/_wrapNativeSuper(_Promise2));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEdXBsZXgiLCJTdHJlYW1Qcm9taXNlIiwiX1Byb21pc2UiLCJfaW5oZXJpdHMiLCJfc3VwZXIiLCJfY3JlYXRlU3VwZXIiLCJfY2xhc3NDYWxsQ2hlY2siLCJhcHBseSIsImFyZ3VtZW50cyIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwic3RyZWFtIiwiY3JlYXRlIiwiYnVpbGRlciIsIl9idWlsZGVyIiwicHJvbWlzZSIsInN0cmVhbVByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidGhlbiIsIl93cmFwTmF0aXZlU3VwZXIiLCJfUHJvbWlzZTIiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbC9wcm9taXNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqL1xuaW1wb3J0IHsgRHVwbGV4IH0gZnJvbSAnc3RyZWFtJztcblxuLyoqXG4gKlxuICovXG5leHBvcnQgdHlwZSBTdHJlYW1Qcm9taXNlQnVpbGRlcjxUPiA9ICgpID0+IHtcbiAgc3RyZWFtOiBEdXBsZXg7XG4gIHByb21pc2U6IFByb21pc2U8VD47XG59O1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHJlYW1Qcm9taXNlPFQ+IGV4dGVuZHMgUHJvbWlzZTxUPiB7XG4gIHN0cmVhbSgpIHtcbiAgICAvLyBkdW1teVxuICAgIHJldHVybiBuZXcgRHVwbGV4KCk7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlPFQ+KGJ1aWxkZXI6IFN0cmVhbVByb21pc2VCdWlsZGVyPFQ+KSB7XG4gICAgY29uc3QgeyBzdHJlYW0sIHByb21pc2UgfSA9IGJ1aWxkZXIoKTtcbiAgICBjb25zdCBzdHJlYW1Qcm9taXNlID0gbmV3IFN0cmVhbVByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgcHJvbWlzZS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSk7XG4gICAgc3RyZWFtUHJvbWlzZS5zdHJlYW0gPSAoKSA9PiBzdHJlYW07XG4gICAgcmV0dXJuIHN0cmVhbVByb21pc2U7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLE1BQU0sUUFBUSxRQUFROztBQUUvQjtBQUNBO0FBQ0E7O0FBTUE7QUFDQTtBQUNBO0FBQ0EsV0FBYUMsYUFBYSwwQkFBQUMsUUFBQTtFQUFBQyxTQUFBLENBQUFGLGFBQUEsRUFBQUMsUUFBQTtFQUFBLElBQUFFLE1BQUEsR0FBQUMsWUFBQSxDQUFBSixhQUFBO0VBQUEsU0FBQUEsY0FBQTtJQUFBSyxlQUFBLE9BQUFMLGFBQUE7SUFBQSxPQUFBRyxNQUFBLENBQUFHLEtBQUEsT0FBQUMsU0FBQTtFQUFBO0VBQUFDLFlBQUEsQ0FBQVIsYUFBQTtJQUFBUyxHQUFBO0lBQUFDLEtBQUEsV0FBQUMsT0FBQSxFQUNmO01BQ1A7TUFDQSxPQUFPLElBQUlaLE1BQU0sQ0FBQyxDQUFDO0lBQ3JCO0VBQUM7SUFBQVUsR0FBQTtJQUFBQyxLQUFBLFdBQUFFLE9BRWdCQyxPQUFnQyxFQUFFO01BQUEsSUFBQUMsUUFBQSxHQUNyQkQsT0FBTyxDQUFDLENBQUM7UUFBN0JGLE1BQU0sR0FBQUcsUUFBQSxDQUFOSCxNQUFNO1FBQUVJLE9BQU8sR0FBQUQsUUFBQSxDQUFQQyxPQUFPO01BQ3ZCLElBQU1DLGFBQWEsR0FBRyxJQUFJaEIsYUFBYSxDQUFJLFVBQUNpQixPQUFPLEVBQUVDLE1BQU0sRUFBSztRQUM5REgsT0FBTyxDQUFDSSxJQUFJLENBQUNGLE9BQU8sRUFBRUMsTUFBTSxDQUFDO01BQy9CLENBQUMsQ0FBQztNQUNGRixhQUFhLENBQUNMLE1BQU0sR0FBRztRQUFBLE9BQU1BLE1BQU07TUFBQTtNQUNuQyxPQUFPSyxhQUFhO0lBQ3RCO0VBQUM7RUFBQSxPQUFBaEIsYUFBQTtBQUFBLGdCQUFBb0IsZ0JBQUEsQ0FBQUMsU0FBQSJ9