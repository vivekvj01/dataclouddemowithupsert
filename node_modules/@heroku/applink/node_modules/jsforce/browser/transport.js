import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import "core-js/modules/es.regexp.exec";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
import _get from "@babel/runtime-corejs3/helpers/get";
import _Date$now from "@babel/runtime-corejs3/core-js-stable/date/now";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _Object$keys2 from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _assertThisInitialized from "@babel/runtime-corejs3/helpers/assertThisInitialized";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _parseInt from "@babel/runtime-corejs3/core-js-stable/parse-int";
var _ref, _process$env$HTTPS_PR;
function ownKeys(object, enumerableOnly) { var keys = _Object$keys2(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source), true)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context4; _forEachInstanceProperty(_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }
/**
 *
 */

import request, { setDefaults } from './request';
import { StreamPromise } from './util/promise';
import jsonp from './browser/jsonp';
import canvas from './browser/canvas';

/**
 * Normarize Salesforce API host name
 * @private
 */
function normalizeApiHost(apiHost) {
  var m = /(\w+)\.(visual\.force|salesforce)\.com$/.exec(apiHost);
  if (m) {
    return "".concat(m[1], ".salesforce.com");
  }
  return apiHost;
}
setDefaults({
  httpProxy: (_ref = (_process$env$HTTPS_PR = process.env.HTTPS_PROXY) !== null && _process$env$HTTPS_PR !== void 0 ? _process$env$HTTPS_PR : process.env.HTTP_PROXY) !== null && _ref !== void 0 ? _ref : undefined,
  timeout: process.env.HTTP_TIMEOUT ? _parseInt(process.env.HTTP_TIMEOUT, 10) : undefined,
  followRedirect: true
});
var baseUrl = typeof window !== 'undefined' && window.location && window.location.host ? "https://".concat(normalizeApiHost(window.location.host)) : process.env.LOCATION_BASE_URL || '';

/**
 * Class for HTTP request transport
 *
 * @class
 * @protected
 */
export var Transport = /*#__PURE__*/function () {
  function Transport() {
    _classCallCheck(this, Transport);
  }
  _createClass(Transport, [{
    key: "httpRequest",
    /**
     */
    value: function httpRequest(req) {
      var _this = this;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return StreamPromise.create(function () {
        var createStream = _this.getRequestStreamCreator();
        var stream = createStream(req, options);
        var promise = new _Promise(function (resolve, reject) {
          stream.on('complete', function (res) {
            return resolve(res);
          }).on('error', reject);
        });
        return {
          stream: stream,
          promise: promise
        };
      });
    }
    /**
     * @protected
     */
  }, {
    key: "getRequestStreamCreator",
    value: function getRequestStreamCreator() {
      return request;
    }
  }]);
  return Transport;
}();

/**
 * Class for JSONP request transport
 */
export var JsonpTransport = /*#__PURE__*/function (_Transport) {
  _inherits(JsonpTransport, _Transport);
  var _super = _createSuper(JsonpTransport);
  function JsonpTransport(jsonpParam) {
    var _this2;
    _classCallCheck(this, JsonpTransport);
    _this2 = _super.call(this);
    _defineProperty(_assertThisInitialized(_this2), "_jsonpParam", void 0);
    _this2._jsonpParam = jsonpParam;
    return _this2;
  }
  _createClass(JsonpTransport, [{
    key: "getRequestStreamCreator",
    value: function getRequestStreamCreator() {
      var jsonpRequest = jsonp.createRequest(this._jsonpParam);
      return function (params) {
        return jsonpRequest(params);
      };
    }
  }]);
  return JsonpTransport;
}(Transport);

/**
 * Class for Sfdc Canvas request transport
 */
_defineProperty(JsonpTransport, "supprted", jsonp.supported);
export var CanvasTransport = /*#__PURE__*/function (_Transport2) {
  _inherits(CanvasTransport, _Transport2);
  var _super2 = _createSuper(CanvasTransport);
  function CanvasTransport(signedRequest) {
    var _this3;
    _classCallCheck(this, CanvasTransport);
    _this3 = _super2.call(this);
    _defineProperty(_assertThisInitialized(_this3), "_signedRequest", void 0);
    _this3._signedRequest = signedRequest;
    return _this3;
  }
  _createClass(CanvasTransport, [{
    key: "getRequestStreamCreator",
    value: function getRequestStreamCreator() {
      var canvasRequest = canvas.createRequest(this._signedRequest);
      return function (params) {
        return canvasRequest(params);
      };
    }
  }]);
  return CanvasTransport;
}(Transport);

/* @private */
_defineProperty(CanvasTransport, "supported", canvas.supported);
function createXdProxyRequest(req, proxyUrl) {
  var _context, _context2;
  var headers = {
    'salesforceproxy-endpoint': req.url
  };
  if (req.headers) {
    for (var _i = 0, _Object$keys = _Object$keys2(req.headers); _i < _Object$keys.length; _i++) {
      var _name = _Object$keys[_i];
      headers[_name] = req.headers[_name];
    }
  }
  var nocache = _concatInstanceProperty(_context = "".concat(_Date$now(), ".")).call(_context, String(Math.random()).substring(2));
  return _objectSpread({
    method: req.method,
    url: _concatInstanceProperty(_context2 = "".concat(proxyUrl, "?")).call(_context2, nocache),
    headers: headers
  }, req.body != null ? {
    body: req.body
  } : {});
}

/**
 * Class for HTTP request transport using cross-domain AJAX proxy service
 */
export var XdProxyTransport = /*#__PURE__*/function (_Transport3) {
  _inherits(XdProxyTransport, _Transport3);
  var _super3 = _createSuper(XdProxyTransport);
  function XdProxyTransport(xdProxyUrl) {
    var _this4;
    _classCallCheck(this, XdProxyTransport);
    _this4 = _super3.call(this);
    _defineProperty(_assertThisInitialized(_this4), "_xdProxyUrl", void 0);
    _this4._xdProxyUrl = xdProxyUrl;
    return _this4;
  }

  /**
   * Make HTTP request via AJAX proxy
   */
  _createClass(XdProxyTransport, [{
    key: "httpRequest",
    value: function httpRequest(req) {
      var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var xdProxyUrl = this._xdProxyUrl;
      var url = req.url,
        body = req.body,
        rreq = _objectWithoutProperties(req, ["url", "body"]);
      var canonicalUrl = _indexOfInstanceProperty(url).call(url, '/') === 0 ? baseUrl + url : url;
      var xdProxyReq = createXdProxyRequest(_objectSpread(_objectSpread({}, rreq), {}, {
        url: canonicalUrl,
        body: body
      }), xdProxyUrl);
      return _get(_getPrototypeOf(XdProxyTransport.prototype), "httpRequest", this).call(this, xdProxyReq, {
        followRedirect: function followRedirect(redirectUrl) {
          return createXdProxyRequest(_objectSpread(_objectSpread({}, rreq), {}, {
            method: 'GET',
            url: redirectUrl
          }), xdProxyUrl);
        }
      });
    }
  }]);
  return XdProxyTransport;
}(Transport);

/**
 * Class for HTTP request transport using a proxy server
 */
export var HttpProxyTransport = /*#__PURE__*/function (_Transport4) {
  _inherits(HttpProxyTransport, _Transport4);
  var _super4 = _createSuper(HttpProxyTransport);
  function HttpProxyTransport(httpProxy) {
    var _this5;
    _classCallCheck(this, HttpProxyTransport);
    _this5 = _super4.call(this);
    _defineProperty(_assertThisInitialized(_this5), "_httpProxy", void 0);
    _this5._httpProxy = httpProxy;
    return _this5;
  }

  /**
   * Make HTTP request via proxy server
   */
  _createClass(HttpProxyTransport, [{
    key: "httpRequest",
    value: function httpRequest(req) {
      var options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = _objectSpread(_objectSpread({}, options_), {}, {
        httpProxy: this._httpProxy
      });
      return _get(_getPrototypeOf(HttpProxyTransport.prototype), "httpRequest", this).call(this, req, options);
    }
  }]);
  return HttpProxyTransport;
}(Transport);
export default Transport;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1ZXN0Iiwic2V0RGVmYXVsdHMiLCJTdHJlYW1Qcm9taXNlIiwianNvbnAiLCJjYW52YXMiLCJub3JtYWxpemVBcGlIb3N0IiwiYXBpSG9zdCIsIm0iLCJleGVjIiwiY29uY2F0IiwiaHR0cFByb3h5IiwiX3JlZiIsIl9wcm9jZXNzJGVudiRIVFRQU19QUiIsInByb2Nlc3MiLCJlbnYiLCJIVFRQU19QUk9YWSIsIkhUVFBfUFJPWFkiLCJ1bmRlZmluZWQiLCJ0aW1lb3V0IiwiSFRUUF9USU1FT1VUIiwiX3BhcnNlSW50IiwiZm9sbG93UmVkaXJlY3QiLCJiYXNlVXJsIiwid2luZG93IiwibG9jYXRpb24iLCJob3N0IiwiTE9DQVRJT05fQkFTRV9VUkwiLCJUcmFuc3BvcnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsImh0dHBSZXF1ZXN0IiwicmVxIiwiX3RoaXMiLCJvcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiY3JlYXRlIiwiY3JlYXRlU3RyZWFtIiwiZ2V0UmVxdWVzdFN0cmVhbUNyZWF0b3IiLCJzdHJlYW0iLCJwcm9taXNlIiwiX1Byb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwib24iLCJyZXMiLCJKc29ucFRyYW5zcG9ydCIsIl9UcmFuc3BvcnQiLCJfaW5oZXJpdHMiLCJfc3VwZXIiLCJfY3JlYXRlU3VwZXIiLCJqc29ucFBhcmFtIiwiX3RoaXMyIiwiY2FsbCIsIl9kZWZpbmVQcm9wZXJ0eSIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfanNvbnBQYXJhbSIsImpzb25wUmVxdWVzdCIsImNyZWF0ZVJlcXVlc3QiLCJwYXJhbXMiLCJzdXBwb3J0ZWQiLCJDYW52YXNUcmFuc3BvcnQiLCJfVHJhbnNwb3J0MiIsIl9zdXBlcjIiLCJzaWduZWRSZXF1ZXN0IiwiX3RoaXMzIiwiX3NpZ25lZFJlcXVlc3QiLCJjYW52YXNSZXF1ZXN0IiwiY3JlYXRlWGRQcm94eVJlcXVlc3QiLCJwcm94eVVybCIsIl9jb250ZXh0IiwiX2NvbnRleHQyIiwiaGVhZGVycyIsInVybCIsIl9pIiwiX09iamVjdCRrZXlzIiwiX09iamVjdCRrZXlzMiIsIm5hbWUiLCJub2NhY2hlIiwiX2NvbmNhdEluc3RhbmNlUHJvcGVydHkiLCJfRGF0ZSRub3ciLCJTdHJpbmciLCJNYXRoIiwicmFuZG9tIiwic3Vic3RyaW5nIiwiX29iamVjdFNwcmVhZCIsIm1ldGhvZCIsImJvZHkiLCJYZFByb3h5VHJhbnNwb3J0IiwiX1RyYW5zcG9ydDMiLCJfc3VwZXIzIiwieGRQcm94eVVybCIsIl90aGlzNCIsIl94ZFByb3h5VXJsIiwiX29wdGlvbnMiLCJycmVxIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiY2Fub25pY2FsVXJsIiwiX2luZGV4T2ZJbnN0YW5jZVByb3BlcnR5IiwieGRQcm94eVJlcSIsIl9nZXQiLCJfZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJyZWRpcmVjdFVybCIsIkh0dHBQcm94eVRyYW5zcG9ydCIsIl9UcmFuc3BvcnQ0IiwiX3N1cGVyNCIsIl90aGlzNSIsIl9odHRwUHJveHkiLCJvcHRpb25zXyJdLCJzb3VyY2VzIjpbIi4uL3NyYy90cmFuc3BvcnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICovXG5pbXBvcnQgeyBEdXBsZXggfSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHJlcXVlc3QsIHsgc2V0RGVmYXVsdHMgfSBmcm9tICcuL3JlcXVlc3QnO1xuaW1wb3J0IHsgSHR0cFJlcXVlc3QsIEh0dHBSZXF1ZXN0T3B0aW9ucywgSHR0cFJlc3BvbnNlIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBTdHJlYW1Qcm9taXNlIH0gZnJvbSAnLi91dGlsL3Byb21pc2UnO1xuaW1wb3J0IGpzb25wIGZyb20gJy4vYnJvd3Nlci9qc29ucCc7XG5pbXBvcnQgY2FudmFzIGZyb20gJy4vYnJvd3Nlci9jYW52YXMnO1xuXG4vKipcbiAqIE5vcm1hcml6ZSBTYWxlc2ZvcmNlIEFQSSBob3N0IG5hbWVcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUFwaUhvc3QoYXBpSG9zdDogc3RyaW5nKSB7XG4gIGNvbnN0IG0gPSAvKFxcdyspXFwuKHZpc3VhbFxcLmZvcmNlfHNhbGVzZm9yY2UpXFwuY29tJC8uZXhlYyhhcGlIb3N0KTtcbiAgaWYgKG0pIHtcbiAgICByZXR1cm4gYCR7bVsxXX0uc2FsZXNmb3JjZS5jb21gO1xuICB9XG4gIHJldHVybiBhcGlIb3N0O1xufVxuXG5zZXREZWZhdWx0cyh7XG4gIGh0dHBQcm94eTogcHJvY2Vzcy5lbnYuSFRUUFNfUFJPWFkgPz8gcHJvY2Vzcy5lbnYuSFRUUF9QUk9YWSA/PyB1bmRlZmluZWQsXG4gIHRpbWVvdXQ6IHByb2Nlc3MuZW52LkhUVFBfVElNRU9VVFxuICAgID8gcGFyc2VJbnQocHJvY2Vzcy5lbnYuSFRUUF9USU1FT1VULCAxMClcbiAgICA6IHVuZGVmaW5lZCxcbiAgZm9sbG93UmVkaXJlY3Q6IHRydWUsXG59KTtcblxuY29uc3QgYmFzZVVybCA9XG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaG9zdFxuICAgID8gYGh0dHBzOi8vJHtub3JtYWxpemVBcGlIb3N0KHdpbmRvdy5sb2NhdGlvbi5ob3N0KX1gXG4gICAgOiBwcm9jZXNzLmVudi5MT0NBVElPTl9CQVNFX1VSTCB8fCAnJztcblxuLyoqXG4gKiBDbGFzcyBmb3IgSFRUUCByZXF1ZXN0IHRyYW5zcG9ydFxuICpcbiAqIEBjbGFzc1xuICogQHByb3RlY3RlZFxuICovXG5leHBvcnQgY2xhc3MgVHJhbnNwb3J0IHtcbiAgLyoqXG4gICAqL1xuICBodHRwUmVxdWVzdChcbiAgICByZXE6IEh0dHBSZXF1ZXN0LFxuICAgIG9wdGlvbnM6IEh0dHBSZXF1ZXN0T3B0aW9ucyA9IHt9LFxuICApOiBTdHJlYW1Qcm9taXNlPEh0dHBSZXNwb25zZT4ge1xuICAgIHJldHVybiBTdHJlYW1Qcm9taXNlLmNyZWF0ZSgoKSA9PiB7XG4gICAgICBjb25zdCBjcmVhdGVTdHJlYW0gPSB0aGlzLmdldFJlcXVlc3RTdHJlYW1DcmVhdG9yKCk7XG4gICAgICBjb25zdCBzdHJlYW0gPSBjcmVhdGVTdHJlYW0ocmVxLCBvcHRpb25zKTtcbiAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZTxIdHRwUmVzcG9uc2U+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgc3RyZWFtXG4gICAgICAgICAgLm9uKCdjb21wbGV0ZScsIChyZXM6IEh0dHBSZXNwb25zZSkgPT4gcmVzb2x2ZShyZXMpKVxuICAgICAgICAgIC5vbignZXJyb3InLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4geyBzdHJlYW0sIHByb21pc2UgfTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBnZXRSZXF1ZXN0U3RyZWFtQ3JlYXRvcigpOiAoXG4gICAgcmVxOiBIdHRwUmVxdWVzdCxcbiAgICBvcHRpb25zOiBIdHRwUmVxdWVzdE9wdGlvbnMsXG4gICkgPT4gRHVwbGV4IHtcbiAgICByZXR1cm4gcmVxdWVzdDtcbiAgfVxufVxuXG4vKipcbiAqIENsYXNzIGZvciBKU09OUCByZXF1ZXN0IHRyYW5zcG9ydFxuICovXG5leHBvcnQgY2xhc3MgSnNvbnBUcmFuc3BvcnQgZXh0ZW5kcyBUcmFuc3BvcnQge1xuICBzdGF0aWMgc3VwcHJ0ZWQ6IGJvb2xlYW4gPSBqc29ucC5zdXBwb3J0ZWQ7XG4gIF9qc29ucFBhcmFtOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoanNvbnBQYXJhbTogc3RyaW5nKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9qc29ucFBhcmFtID0ganNvbnBQYXJhbTtcbiAgfVxuXG4gIGdldFJlcXVlc3RTdHJlYW1DcmVhdG9yKCk6IChcbiAgICByZXE6IEh0dHBSZXF1ZXN0LFxuICAgIG9wdGlvbnM6IEh0dHBSZXF1ZXN0T3B0aW9ucyxcbiAgKSA9PiBEdXBsZXgge1xuICAgIGNvbnN0IGpzb25wUmVxdWVzdCA9IGpzb25wLmNyZWF0ZVJlcXVlc3QodGhpcy5fanNvbnBQYXJhbSk7XG4gICAgcmV0dXJuIChwYXJhbXMpID0+IGpzb25wUmVxdWVzdChwYXJhbXMpO1xuICB9XG59XG5cbi8qKlxuICogQ2xhc3MgZm9yIFNmZGMgQ2FudmFzIHJlcXVlc3QgdHJhbnNwb3J0XG4gKi9cbmV4cG9ydCBjbGFzcyBDYW52YXNUcmFuc3BvcnQgZXh0ZW5kcyBUcmFuc3BvcnQge1xuICBzdGF0aWMgc3VwcG9ydGVkOiBib29sZWFuID0gY2FudmFzLnN1cHBvcnRlZDtcbiAgX3NpZ25lZFJlcXVlc3Q6IGFueTtcblxuICBjb25zdHJ1Y3RvcihzaWduZWRSZXF1ZXN0OiBhbnkpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NpZ25lZFJlcXVlc3QgPSBzaWduZWRSZXF1ZXN0O1xuICB9XG5cbiAgZ2V0UmVxdWVzdFN0cmVhbUNyZWF0b3IoKTogKFxuICAgIHJlcTogSHR0cFJlcXVlc3QsXG4gICAgb3B0aW9uczogSHR0cFJlcXVlc3RPcHRpb25zLFxuICApID0+IER1cGxleCB7XG4gICAgY29uc3QgY2FudmFzUmVxdWVzdCA9IGNhbnZhcy5jcmVhdGVSZXF1ZXN0KHRoaXMuX3NpZ25lZFJlcXVlc3QpO1xuICAgIHJldHVybiAocGFyYW1zKSA9PiBjYW52YXNSZXF1ZXN0KHBhcmFtcyk7XG4gIH1cbn1cblxuLyogQHByaXZhdGUgKi9cbmZ1bmN0aW9uIGNyZWF0ZVhkUHJveHlSZXF1ZXN0KHJlcTogSHR0cFJlcXVlc3QsIHByb3h5VXJsOiBzdHJpbmcpOiBIdHRwUmVxdWVzdCB7XG4gIGNvbnN0IGhlYWRlcnM6IHsgW25hbWU6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICAgICdzYWxlc2ZvcmNlcHJveHktZW5kcG9pbnQnOiByZXEudXJsLFxuICB9O1xuICBpZiAocmVxLmhlYWRlcnMpIHtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgT2JqZWN0LmtleXMocmVxLmhlYWRlcnMpKSB7XG4gICAgICBoZWFkZXJzW25hbWVdID0gcmVxLmhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9XG4gIGNvbnN0IG5vY2FjaGUgPSBgJHtEYXRlLm5vdygpfS4ke1N0cmluZyhNYXRoLnJhbmRvbSgpKS5zdWJzdHJpbmcoMil9YDtcbiAgcmV0dXJuIHtcbiAgICBtZXRob2Q6IHJlcS5tZXRob2QsXG4gICAgdXJsOiBgJHtwcm94eVVybH0/JHtub2NhY2hlfWAsXG4gICAgaGVhZGVycyxcbiAgICAuLi4ocmVxLmJvZHkgIT0gbnVsbCA/IHsgYm9keTogcmVxLmJvZHkgfSA6IHt9KSxcbiAgfTtcbn1cblxuLyoqXG4gKiBDbGFzcyBmb3IgSFRUUCByZXF1ZXN0IHRyYW5zcG9ydCB1c2luZyBjcm9zcy1kb21haW4gQUpBWCBwcm94eSBzZXJ2aWNlXG4gKi9cbmV4cG9ydCBjbGFzcyBYZFByb3h5VHJhbnNwb3J0IGV4dGVuZHMgVHJhbnNwb3J0IHtcbiAgX3hkUHJveHlVcmw6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcih4ZFByb3h5VXJsOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3hkUHJveHlVcmwgPSB4ZFByb3h5VXJsO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2UgSFRUUCByZXF1ZXN0IHZpYSBBSkFYIHByb3h5XG4gICAqL1xuICBodHRwUmVxdWVzdChyZXE6IEh0dHBSZXF1ZXN0LCBfb3B0aW9uczogSHR0cFJlcXVlc3RPcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB4ZFByb3h5VXJsID0gdGhpcy5feGRQcm94eVVybDtcbiAgICBjb25zdCB7IHVybCwgYm9keSwgLi4ucnJlcSB9ID0gcmVxO1xuICAgIGNvbnN0IGNhbm9uaWNhbFVybCA9IHVybC5pbmRleE9mKCcvJykgPT09IDAgPyBiYXNlVXJsICsgdXJsIDogdXJsO1xuICAgIGNvbnN0IHhkUHJveHlSZXEgPSBjcmVhdGVYZFByb3h5UmVxdWVzdChcbiAgICAgIHsgLi4ucnJlcSwgdXJsOiBjYW5vbmljYWxVcmwsIGJvZHkgfSxcbiAgICAgIHhkUHJveHlVcmwsXG4gICAgKTtcbiAgICByZXR1cm4gc3VwZXIuaHR0cFJlcXVlc3QoeGRQcm94eVJlcSwge1xuICAgICAgZm9sbG93UmVkaXJlY3Q6IChyZWRpcmVjdFVybCkgPT5cbiAgICAgICAgY3JlYXRlWGRQcm94eVJlcXVlc3QoXG4gICAgICAgICAgeyAuLi5ycmVxLCBtZXRob2Q6ICdHRVQnLCB1cmw6IHJlZGlyZWN0VXJsIH0sXG4gICAgICAgICAgeGRQcm94eVVybCxcbiAgICAgICAgKSxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIENsYXNzIGZvciBIVFRQIHJlcXVlc3QgdHJhbnNwb3J0IHVzaW5nIGEgcHJveHkgc2VydmVyXG4gKi9cbmV4cG9ydCBjbGFzcyBIdHRwUHJveHlUcmFuc3BvcnQgZXh0ZW5kcyBUcmFuc3BvcnQge1xuICBfaHR0cFByb3h5OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoaHR0cFByb3h5OiBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2h0dHBQcm94eSA9IGh0dHBQcm94eTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtlIEhUVFAgcmVxdWVzdCB2aWEgcHJveHkgc2VydmVyXG4gICAqL1xuICBodHRwUmVxdWVzdChyZXE6IEh0dHBSZXF1ZXN0LCBvcHRpb25zXzogSHR0cFJlcXVlc3RPcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBvcHRpb25zID0geyAuLi5vcHRpb25zXywgaHR0cFByb3h5OiB0aGlzLl9odHRwUHJveHkgfTtcbiAgICByZXR1cm4gc3VwZXIuaHR0cFJlcXVlc3QocmVxLCBvcHRpb25zKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUcmFuc3BvcnQ7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sSUFBSUMsV0FBVyxRQUFRLFdBQVc7QUFFaEQsU0FBU0MsYUFB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