import { CompositeResponse, CompositeSubrequest, ConnectionConfig, Error, Logger, Method, SObject } from './../..';
interface IReferenceIdToCompositeSubrequests {
    [key: string]: CompositeSubrequest;
}
interface UuidToReferenceIds {
    [key: string]: Set<string>;
}
export declare class UnitOfWorkResult {
    readonly method: Method;
    readonly id: string;
    readonly isSuccess: boolean;
    readonly errors: ReadonlyArray<Error>;
    constructor(method: Method, id: string, isSuccess: boolean, errors: ReadonlyArray<Error>);
}
export declare class UnitOfWorkResponse {
    private readonly _uuidToReferenceIds;
    private readonly _referenceIdToCompositeSubrequests;
    private readonly _compositeResponse;
    constructor(uuidToReferenceIds: UuidToReferenceIds, referenceIdToCompositeSubrequests: IReferenceIdToCompositeSubrequests, compositeResponse: CompositeResponse);
    getResults(sObject: SObject): ReadonlyArray<UnitOfWorkResult>;
    getId(sObject: SObject): string;
}
export declare class UnitOfWork {
    private readonly _compositeRequest;
    private readonly _config;
    private readonly _uuidToReferenceIds;
    private readonly _referenceIdToCompositeSubrequests;
    private logger;
    constructor(config: ConnectionConfig, logger: Logger);
    registerNew(sObject: SObject): void;
    registerModified(sObject: SObject): void;
    registerDeleted(sObject: SObject): void;
    commit(): Promise<UnitOfWorkResponse>;
    private addCompositeSubrequest;
}
export {};
