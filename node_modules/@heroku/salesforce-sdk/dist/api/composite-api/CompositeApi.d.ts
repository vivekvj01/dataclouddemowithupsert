import { CompositeRequest, CompositeSubrequest } from './';
import { ConnectionConfig, Error, Logger } from './../..';
export declare class CompositeSubresponse {
    private static HEADER_LOCATION;
    private static KEY_ID;
    readonly httpHeaders: {
        [key: string]: string;
    };
    readonly httpStatusCode: number;
    readonly referenceId: string;
    private readonly _errors;
    private readonly _body;
    readonly body: {
        [key: string]: any;
    };
    readonly errors: ReadonlyArray<Error>;
    readonly id: string;
    readonly isSuccess: boolean;
    readonly location: string;
    constructor(compositeSubresponse: CompositeSubresponse);
}
export declare class CompositeResponse {
    readonly compositeSubresponses: ReadonlyArray<CompositeSubresponse>;
    constructor(json: string);
    getCompositeSubresponse(compositeSubrequest: CompositeSubrequest): CompositeSubresponse;
}
export declare class CompositeApi {
    private readonly _connectionConfig;
    private readonly logger;
    constructor(connectionConfig: ConnectionConfig, logger: Logger);
    invoke(compositeRequest: CompositeRequest): Promise<CompositeResponse>;
}
